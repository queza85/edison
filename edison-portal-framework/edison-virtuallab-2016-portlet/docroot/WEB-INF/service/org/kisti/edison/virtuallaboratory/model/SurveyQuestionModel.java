/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.kisti.edison.virtuallaboratory.model;

import com.liferay.portal.LocaleException;
import com.liferay.portal.kernel.bean.AutoEscape;
import com.liferay.portal.model.BaseModel;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;

import java.io.Serializable;

import java.util.Locale;
import java.util.Map;

/**
 * The base model interface for the SurveyQuestion service. Represents a row in the &quot;EDVIR_SurveyQuestion&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This interface and its corresponding implementation {@link org.kisti.edison.virtuallaboratory.model.impl.SurveyQuestionModelImpl} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link org.kisti.edison.virtuallaboratory.model.impl.SurveyQuestionImpl}.
 * </p>
 *
 * @author EDISON
 * @see SurveyQuestion
 * @see org.kisti.edison.virtuallaboratory.model.impl.SurveyQuestionImpl
 * @see org.kisti.edison.virtuallaboratory.model.impl.SurveyQuestionModelImpl
 * @generated
 */
public interface SurveyQuestionModel extends BaseModel<SurveyQuestion> {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this interface directly. All methods that expect a survey question model instance should use the {@link SurveyQuestion} interface instead.
	 */

	/**
	 * Returns the primary key of this survey question.
	 *
	 * @return the primary key of this survey question
	 */
	public long getPrimaryKey();

	/**
	 * Sets the primary key of this survey question.
	 *
	 * @param primaryKey the primary key of this survey question
	 */
	public void setPrimaryKey(long primaryKey);

	/**
	 * Returns the question seq no of this survey question.
	 *
	 * @return the question seq no of this survey question
	 */
	public long getQuestionSeqNo();

	/**
	 * Sets the question seq no of this survey question.
	 *
	 * @param questionSeqNo the question seq no of this survey question
	 */
	public void setQuestionSeqNo(long questionSeqNo);

	/**
	 * Returns the question div cd of this survey question.
	 *
	 * @return the question div cd of this survey question
	 */
	@AutoEscape
	public String getQuestionDivCd();

	/**
	 * Sets the question div cd of this survey question.
	 *
	 * @param questionDivCd the question div cd of this survey question
	 */
	public void setQuestionDivCd(String questionDivCd);

	/**
	 * Returns the question title of this survey question.
	 *
	 * @return the question title of this survey question
	 */
	public String getQuestionTitle();

	/**
	 * Returns the localized question title of this survey question in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized question title of this survey question
	 */
	@AutoEscape
	public String getQuestionTitle(Locale locale);

	/**
	 * Returns the localized question title of this survey question in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized question title of this survey question. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getQuestionTitle(Locale locale, boolean useDefault);

	/**
	 * Returns the localized question title of this survey question in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized question title of this survey question
	 */
	@AutoEscape
	public String getQuestionTitle(String languageId);

	/**
	 * Returns the localized question title of this survey question in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized question title of this survey question
	 */
	@AutoEscape
	public String getQuestionTitle(String languageId, boolean useDefault);

	@AutoEscape
	public String getQuestionTitleCurrentLanguageId();

	@AutoEscape
	public String getQuestionTitleCurrentValue();

	/**
	 * Returns a map of the locales and localized question titles of this survey question.
	 *
	 * @return the locales and localized question titles of this survey question
	 */
	public Map<Locale, String> getQuestionTitleMap();

	/**
	 * Sets the question title of this survey question.
	 *
	 * @param questionTitle the question title of this survey question
	 */
	public void setQuestionTitle(String questionTitle);

	/**
	 * Sets the localized question title of this survey question in the language.
	 *
	 * @param questionTitle the localized question title of this survey question
	 * @param locale the locale of the language
	 */
	public void setQuestionTitle(String questionTitle, Locale locale);

	/**
	 * Sets the localized question title of this survey question in the language, and sets the default locale.
	 *
	 * @param questionTitle the localized question title of this survey question
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setQuestionTitle(String questionTitle, Locale locale,
		Locale defaultLocale);

	public void setQuestionTitleCurrentLanguageId(String languageId);

	/**
	 * Sets the localized question titles of this survey question from the map of locales and localized question titles.
	 *
	 * @param questionTitleMap the locales and localized question titles of this survey question
	 */
	public void setQuestionTitleMap(Map<Locale, String> questionTitleMap);

	/**
	 * Sets the localized question titles of this survey question from the map of locales and localized question titles, and sets the default locale.
	 *
	 * @param questionTitleMap the locales and localized question titles of this survey question
	 * @param defaultLocale the default locale
	 */
	public void setQuestionTitleMap(Map<Locale, String> questionTitleMap,
		Locale defaultLocale);

	/**
	 * Returns the question1 of this survey question.
	 *
	 * @return the question1 of this survey question
	 */
	public String getQuestion1();

	/**
	 * Returns the localized question1 of this survey question in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized question1 of this survey question
	 */
	@AutoEscape
	public String getQuestion1(Locale locale);

	/**
	 * Returns the localized question1 of this survey question in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized question1 of this survey question. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getQuestion1(Locale locale, boolean useDefault);

	/**
	 * Returns the localized question1 of this survey question in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized question1 of this survey question
	 */
	@AutoEscape
	public String getQuestion1(String languageId);

	/**
	 * Returns the localized question1 of this survey question in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized question1 of this survey question
	 */
	@AutoEscape
	public String getQuestion1(String languageId, boolean useDefault);

	@AutoEscape
	public String getQuestion1CurrentLanguageId();

	@AutoEscape
	public String getQuestion1CurrentValue();

	/**
	 * Returns a map of the locales and localized question1s of this survey question.
	 *
	 * @return the locales and localized question1s of this survey question
	 */
	public Map<Locale, String> getQuestion1Map();

	/**
	 * Sets the question1 of this survey question.
	 *
	 * @param question1 the question1 of this survey question
	 */
	public void setQuestion1(String question1);

	/**
	 * Sets the localized question1 of this survey question in the language.
	 *
	 * @param question1 the localized question1 of this survey question
	 * @param locale the locale of the language
	 */
	public void setQuestion1(String question1, Locale locale);

	/**
	 * Sets the localized question1 of this survey question in the language, and sets the default locale.
	 *
	 * @param question1 the localized question1 of this survey question
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setQuestion1(String question1, Locale locale,
		Locale defaultLocale);

	public void setQuestion1CurrentLanguageId(String languageId);

	/**
	 * Sets the localized question1s of this survey question from the map of locales and localized question1s.
	 *
	 * @param question1Map the locales and localized question1s of this survey question
	 */
	public void setQuestion1Map(Map<Locale, String> question1Map);

	/**
	 * Sets the localized question1s of this survey question from the map of locales and localized question1s, and sets the default locale.
	 *
	 * @param question1Map the locales and localized question1s of this survey question
	 * @param defaultLocale the default locale
	 */
	public void setQuestion1Map(Map<Locale, String> question1Map,
		Locale defaultLocale);

	/**
	 * Returns the question2 of this survey question.
	 *
	 * @return the question2 of this survey question
	 */
	public String getQuestion2();

	/**
	 * Returns the localized question2 of this survey question in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized question2 of this survey question
	 */
	@AutoEscape
	public String getQuestion2(Locale locale);

	/**
	 * Returns the localized question2 of this survey question in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized question2 of this survey question. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getQuestion2(Locale locale, boolean useDefault);

	/**
	 * Returns the localized question2 of this survey question in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized question2 of this survey question
	 */
	@AutoEscape
	public String getQuestion2(String languageId);

	/**
	 * Returns the localized question2 of this survey question in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized question2 of this survey question
	 */
	@AutoEscape
	public String getQuestion2(String languageId, boolean useDefault);

	@AutoEscape
	public String getQuestion2CurrentLanguageId();

	@AutoEscape
	public String getQuestion2CurrentValue();

	/**
	 * Returns a map of the locales and localized question2s of this survey question.
	 *
	 * @return the locales and localized question2s of this survey question
	 */
	public Map<Locale, String> getQuestion2Map();

	/**
	 * Sets the question2 of this survey question.
	 *
	 * @param question2 the question2 of this survey question
	 */
	public void setQuestion2(String question2);

	/**
	 * Sets the localized question2 of this survey question in the language.
	 *
	 * @param question2 the localized question2 of this survey question
	 * @param locale the locale of the language
	 */
	public void setQuestion2(String question2, Locale locale);

	/**
	 * Sets the localized question2 of this survey question in the language, and sets the default locale.
	 *
	 * @param question2 the localized question2 of this survey question
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setQuestion2(String question2, Locale locale,
		Locale defaultLocale);

	public void setQuestion2CurrentLanguageId(String languageId);

	/**
	 * Sets the localized question2s of this survey question from the map of locales and localized question2s.
	 *
	 * @param question2Map the locales and localized question2s of this survey question
	 */
	public void setQuestion2Map(Map<Locale, String> question2Map);

	/**
	 * Sets the localized question2s of this survey question from the map of locales and localized question2s, and sets the default locale.
	 *
	 * @param question2Map the locales and localized question2s of this survey question
	 * @param defaultLocale the default locale
	 */
	public void setQuestion2Map(Map<Locale, String> question2Map,
		Locale defaultLocale);

	/**
	 * Returns the question3 of this survey question.
	 *
	 * @return the question3 of this survey question
	 */
	public String getQuestion3();

	/**
	 * Returns the localized question3 of this survey question in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized question3 of this survey question
	 */
	@AutoEscape
	public String getQuestion3(Locale locale);

	/**
	 * Returns the localized question3 of this survey question in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized question3 of this survey question. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getQuestion3(Locale locale, boolean useDefault);

	/**
	 * Returns the localized question3 of this survey question in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized question3 of this survey question
	 */
	@AutoEscape
	public String getQuestion3(String languageId);

	/**
	 * Returns the localized question3 of this survey question in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized question3 of this survey question
	 */
	@AutoEscape
	public String getQuestion3(String languageId, boolean useDefault);

	@AutoEscape
	public String getQuestion3CurrentLanguageId();

	@AutoEscape
	public String getQuestion3CurrentValue();

	/**
	 * Returns a map of the locales and localized question3s of this survey question.
	 *
	 * @return the locales and localized question3s of this survey question
	 */
	public Map<Locale, String> getQuestion3Map();

	/**
	 * Sets the question3 of this survey question.
	 *
	 * @param question3 the question3 of this survey question
	 */
	public void setQuestion3(String question3);

	/**
	 * Sets the localized question3 of this survey question in the language.
	 *
	 * @param question3 the localized question3 of this survey question
	 * @param locale the locale of the language
	 */
	public void setQuestion3(String question3, Locale locale);

	/**
	 * Sets the localized question3 of this survey question in the language, and sets the default locale.
	 *
	 * @param question3 the localized question3 of this survey question
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setQuestion3(String question3, Locale locale,
		Locale defaultLocale);

	public void setQuestion3CurrentLanguageId(String languageId);

	/**
	 * Sets the localized question3s of this survey question from the map of locales and localized question3s.
	 *
	 * @param question3Map the locales and localized question3s of this survey question
	 */
	public void setQuestion3Map(Map<Locale, String> question3Map);

	/**
	 * Sets the localized question3s of this survey question from the map of locales and localized question3s, and sets the default locale.
	 *
	 * @param question3Map the locales and localized question3s of this survey question
	 * @param defaultLocale the default locale
	 */
	public void setQuestion3Map(Map<Locale, String> question3Map,
		Locale defaultLocale);

	/**
	 * Returns the question4 of this survey question.
	 *
	 * @return the question4 of this survey question
	 */
	public String getQuestion4();

	/**
	 * Returns the localized question4 of this survey question in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized question4 of this survey question
	 */
	@AutoEscape
	public String getQuestion4(Locale locale);

	/**
	 * Returns the localized question4 of this survey question in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized question4 of this survey question. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getQuestion4(Locale locale, boolean useDefault);

	/**
	 * Returns the localized question4 of this survey question in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized question4 of this survey question
	 */
	@AutoEscape
	public String getQuestion4(String languageId);

	/**
	 * Returns the localized question4 of this survey question in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized question4 of this survey question
	 */
	@AutoEscape
	public String getQuestion4(String languageId, boolean useDefault);

	@AutoEscape
	public String getQuestion4CurrentLanguageId();

	@AutoEscape
	public String getQuestion4CurrentValue();

	/**
	 * Returns a map of the locales and localized question4s of this survey question.
	 *
	 * @return the locales and localized question4s of this survey question
	 */
	public Map<Locale, String> getQuestion4Map();

	/**
	 * Sets the question4 of this survey question.
	 *
	 * @param question4 the question4 of this survey question
	 */
	public void setQuestion4(String question4);

	/**
	 * Sets the localized question4 of this survey question in the language.
	 *
	 * @param question4 the localized question4 of this survey question
	 * @param locale the locale of the language
	 */
	public void setQuestion4(String question4, Locale locale);

	/**
	 * Sets the localized question4 of this survey question in the language, and sets the default locale.
	 *
	 * @param question4 the localized question4 of this survey question
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setQuestion4(String question4, Locale locale,
		Locale defaultLocale);

	public void setQuestion4CurrentLanguageId(String languageId);

	/**
	 * Sets the localized question4s of this survey question from the map of locales and localized question4s.
	 *
	 * @param question4Map the locales and localized question4s of this survey question
	 */
	public void setQuestion4Map(Map<Locale, String> question4Map);

	/**
	 * Sets the localized question4s of this survey question from the map of locales and localized question4s, and sets the default locale.
	 *
	 * @param question4Map the locales and localized question4s of this survey question
	 * @param defaultLocale the default locale
	 */
	public void setQuestion4Map(Map<Locale, String> question4Map,
		Locale defaultLocale);

	/**
	 * Returns the question5 of this survey question.
	 *
	 * @return the question5 of this survey question
	 */
	public String getQuestion5();

	/**
	 * Returns the localized question5 of this survey question in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized question5 of this survey question
	 */
	@AutoEscape
	public String getQuestion5(Locale locale);

	/**
	 * Returns the localized question5 of this survey question in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized question5 of this survey question. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getQuestion5(Locale locale, boolean useDefault);

	/**
	 * Returns the localized question5 of this survey question in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized question5 of this survey question
	 */
	@AutoEscape
	public String getQuestion5(String languageId);

	/**
	 * Returns the localized question5 of this survey question in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized question5 of this survey question
	 */
	@AutoEscape
	public String getQuestion5(String languageId, boolean useDefault);

	@AutoEscape
	public String getQuestion5CurrentLanguageId();

	@AutoEscape
	public String getQuestion5CurrentValue();

	/**
	 * Returns a map of the locales and localized question5s of this survey question.
	 *
	 * @return the locales and localized question5s of this survey question
	 */
	public Map<Locale, String> getQuestion5Map();

	/**
	 * Sets the question5 of this survey question.
	 *
	 * @param question5 the question5 of this survey question
	 */
	public void setQuestion5(String question5);

	/**
	 * Sets the localized question5 of this survey question in the language.
	 *
	 * @param question5 the localized question5 of this survey question
	 * @param locale the locale of the language
	 */
	public void setQuestion5(String question5, Locale locale);

	/**
	 * Sets the localized question5 of this survey question in the language, and sets the default locale.
	 *
	 * @param question5 the localized question5 of this survey question
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setQuestion5(String question5, Locale locale,
		Locale defaultLocale);

	public void setQuestion5CurrentLanguageId(String languageId);

	/**
	 * Sets the localized question5s of this survey question from the map of locales and localized question5s.
	 *
	 * @param question5Map the locales and localized question5s of this survey question
	 */
	public void setQuestion5Map(Map<Locale, String> question5Map);

	/**
	 * Sets the localized question5s of this survey question from the map of locales and localized question5s, and sets the default locale.
	 *
	 * @param question5Map the locales and localized question5s of this survey question
	 * @param defaultLocale the default locale
	 */
	public void setQuestion5Map(Map<Locale, String> question5Map,
		Locale defaultLocale);

	/**
	 * Returns the question6 of this survey question.
	 *
	 * @return the question6 of this survey question
	 */
	public String getQuestion6();

	/**
	 * Returns the localized question6 of this survey question in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized question6 of this survey question
	 */
	@AutoEscape
	public String getQuestion6(Locale locale);

	/**
	 * Returns the localized question6 of this survey question in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized question6 of this survey question. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getQuestion6(Locale locale, boolean useDefault);

	/**
	 * Returns the localized question6 of this survey question in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized question6 of this survey question
	 */
	@AutoEscape
	public String getQuestion6(String languageId);

	/**
	 * Returns the localized question6 of this survey question in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized question6 of this survey question
	 */
	@AutoEscape
	public String getQuestion6(String languageId, boolean useDefault);

	@AutoEscape
	public String getQuestion6CurrentLanguageId();

	@AutoEscape
	public String getQuestion6CurrentValue();

	/**
	 * Returns a map of the locales and localized question6s of this survey question.
	 *
	 * @return the locales and localized question6s of this survey question
	 */
	public Map<Locale, String> getQuestion6Map();

	/**
	 * Sets the question6 of this survey question.
	 *
	 * @param question6 the question6 of this survey question
	 */
	public void setQuestion6(String question6);

	/**
	 * Sets the localized question6 of this survey question in the language.
	 *
	 * @param question6 the localized question6 of this survey question
	 * @param locale the locale of the language
	 */
	public void setQuestion6(String question6, Locale locale);

	/**
	 * Sets the localized question6 of this survey question in the language, and sets the default locale.
	 *
	 * @param question6 the localized question6 of this survey question
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setQuestion6(String question6, Locale locale,
		Locale defaultLocale);

	public void setQuestion6CurrentLanguageId(String languageId);

	/**
	 * Sets the localized question6s of this survey question from the map of locales and localized question6s.
	 *
	 * @param question6Map the locales and localized question6s of this survey question
	 */
	public void setQuestion6Map(Map<Locale, String> question6Map);

	/**
	 * Sets the localized question6s of this survey question from the map of locales and localized question6s, and sets the default locale.
	 *
	 * @param question6Map the locales and localized question6s of this survey question
	 * @param defaultLocale the default locale
	 */
	public void setQuestion6Map(Map<Locale, String> question6Map,
		Locale defaultLocale);

	/**
	 * Returns the question7 of this survey question.
	 *
	 * @return the question7 of this survey question
	 */
	public String getQuestion7();

	/**
	 * Returns the localized question7 of this survey question in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized question7 of this survey question
	 */
	@AutoEscape
	public String getQuestion7(Locale locale);

	/**
	 * Returns the localized question7 of this survey question in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized question7 of this survey question. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getQuestion7(Locale locale, boolean useDefault);

	/**
	 * Returns the localized question7 of this survey question in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized question7 of this survey question
	 */
	@AutoEscape
	public String getQuestion7(String languageId);

	/**
	 * Returns the localized question7 of this survey question in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized question7 of this survey question
	 */
	@AutoEscape
	public String getQuestion7(String languageId, boolean useDefault);

	@AutoEscape
	public String getQuestion7CurrentLanguageId();

	@AutoEscape
	public String getQuestion7CurrentValue();

	/**
	 * Returns a map of the locales and localized question7s of this survey question.
	 *
	 * @return the locales and localized question7s of this survey question
	 */
	public Map<Locale, String> getQuestion7Map();

	/**
	 * Sets the question7 of this survey question.
	 *
	 * @param question7 the question7 of this survey question
	 */
	public void setQuestion7(String question7);

	/**
	 * Sets the localized question7 of this survey question in the language.
	 *
	 * @param question7 the localized question7 of this survey question
	 * @param locale the locale of the language
	 */
	public void setQuestion7(String question7, Locale locale);

	/**
	 * Sets the localized question7 of this survey question in the language, and sets the default locale.
	 *
	 * @param question7 the localized question7 of this survey question
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setQuestion7(String question7, Locale locale,
		Locale defaultLocale);

	public void setQuestion7CurrentLanguageId(String languageId);

	/**
	 * Sets the localized question7s of this survey question from the map of locales and localized question7s.
	 *
	 * @param question7Map the locales and localized question7s of this survey question
	 */
	public void setQuestion7Map(Map<Locale, String> question7Map);

	/**
	 * Sets the localized question7s of this survey question from the map of locales and localized question7s, and sets the default locale.
	 *
	 * @param question7Map the locales and localized question7s of this survey question
	 * @param defaultLocale the default locale
	 */
	public void setQuestion7Map(Map<Locale, String> question7Map,
		Locale defaultLocale);

	/**
	 * Returns the question8 of this survey question.
	 *
	 * @return the question8 of this survey question
	 */
	public String getQuestion8();

	/**
	 * Returns the localized question8 of this survey question in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized question8 of this survey question
	 */
	@AutoEscape
	public String getQuestion8(Locale locale);

	/**
	 * Returns the localized question8 of this survey question in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized question8 of this survey question. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getQuestion8(Locale locale, boolean useDefault);

	/**
	 * Returns the localized question8 of this survey question in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized question8 of this survey question
	 */
	@AutoEscape
	public String getQuestion8(String languageId);

	/**
	 * Returns the localized question8 of this survey question in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized question8 of this survey question
	 */
	@AutoEscape
	public String getQuestion8(String languageId, boolean useDefault);

	@AutoEscape
	public String getQuestion8CurrentLanguageId();

	@AutoEscape
	public String getQuestion8CurrentValue();

	/**
	 * Returns a map of the locales and localized question8s of this survey question.
	 *
	 * @return the locales and localized question8s of this survey question
	 */
	public Map<Locale, String> getQuestion8Map();

	/**
	 * Sets the question8 of this survey question.
	 *
	 * @param question8 the question8 of this survey question
	 */
	public void setQuestion8(String question8);

	/**
	 * Sets the localized question8 of this survey question in the language.
	 *
	 * @param question8 the localized question8 of this survey question
	 * @param locale the locale of the language
	 */
	public void setQuestion8(String question8, Locale locale);

	/**
	 * Sets the localized question8 of this survey question in the language, and sets the default locale.
	 *
	 * @param question8 the localized question8 of this survey question
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setQuestion8(String question8, Locale locale,
		Locale defaultLocale);

	public void setQuestion8CurrentLanguageId(String languageId);

	/**
	 * Sets the localized question8s of this survey question from the map of locales and localized question8s.
	 *
	 * @param question8Map the locales and localized question8s of this survey question
	 */
	public void setQuestion8Map(Map<Locale, String> question8Map);

	/**
	 * Sets the localized question8s of this survey question from the map of locales and localized question8s, and sets the default locale.
	 *
	 * @param question8Map the locales and localized question8s of this survey question
	 * @param defaultLocale the default locale
	 */
	public void setQuestion8Map(Map<Locale, String> question8Map,
		Locale defaultLocale);

	/**
	 * Returns the question9 of this survey question.
	 *
	 * @return the question9 of this survey question
	 */
	public String getQuestion9();

	/**
	 * Returns the localized question9 of this survey question in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized question9 of this survey question
	 */
	@AutoEscape
	public String getQuestion9(Locale locale);

	/**
	 * Returns the localized question9 of this survey question in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized question9 of this survey question. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getQuestion9(Locale locale, boolean useDefault);

	/**
	 * Returns the localized question9 of this survey question in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized question9 of this survey question
	 */
	@AutoEscape
	public String getQuestion9(String languageId);

	/**
	 * Returns the localized question9 of this survey question in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized question9 of this survey question
	 */
	@AutoEscape
	public String getQuestion9(String languageId, boolean useDefault);

	@AutoEscape
	public String getQuestion9CurrentLanguageId();

	@AutoEscape
	public String getQuestion9CurrentValue();

	/**
	 * Returns a map of the locales and localized question9s of this survey question.
	 *
	 * @return the locales and localized question9s of this survey question
	 */
	public Map<Locale, String> getQuestion9Map();

	/**
	 * Sets the question9 of this survey question.
	 *
	 * @param question9 the question9 of this survey question
	 */
	public void setQuestion9(String question9);

	/**
	 * Sets the localized question9 of this survey question in the language.
	 *
	 * @param question9 the localized question9 of this survey question
	 * @param locale the locale of the language
	 */
	public void setQuestion9(String question9, Locale locale);

	/**
	 * Sets the localized question9 of this survey question in the language, and sets the default locale.
	 *
	 * @param question9 the localized question9 of this survey question
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setQuestion9(String question9, Locale locale,
		Locale defaultLocale);

	public void setQuestion9CurrentLanguageId(String languageId);

	/**
	 * Sets the localized question9s of this survey question from the map of locales and localized question9s.
	 *
	 * @param question9Map the locales and localized question9s of this survey question
	 */
	public void setQuestion9Map(Map<Locale, String> question9Map);

	/**
	 * Sets the localized question9s of this survey question from the map of locales and localized question9s, and sets the default locale.
	 *
	 * @param question9Map the locales and localized question9s of this survey question
	 * @param defaultLocale the default locale
	 */
	public void setQuestion9Map(Map<Locale, String> question9Map,
		Locale defaultLocale);

	/**
	 * Returns the question10 of this survey question.
	 *
	 * @return the question10 of this survey question
	 */
	public String getQuestion10();

	/**
	 * Returns the localized question10 of this survey question in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized question10 of this survey question
	 */
	@AutoEscape
	public String getQuestion10(Locale locale);

	/**
	 * Returns the localized question10 of this survey question in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized question10 of this survey question. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getQuestion10(Locale locale, boolean useDefault);

	/**
	 * Returns the localized question10 of this survey question in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized question10 of this survey question
	 */
	@AutoEscape
	public String getQuestion10(String languageId);

	/**
	 * Returns the localized question10 of this survey question in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized question10 of this survey question
	 */
	@AutoEscape
	public String getQuestion10(String languageId, boolean useDefault);

	@AutoEscape
	public String getQuestion10CurrentLanguageId();

	@AutoEscape
	public String getQuestion10CurrentValue();

	/**
	 * Returns a map of the locales and localized question10s of this survey question.
	 *
	 * @return the locales and localized question10s of this survey question
	 */
	public Map<Locale, String> getQuestion10Map();

	/**
	 * Sets the question10 of this survey question.
	 *
	 * @param question10 the question10 of this survey question
	 */
	public void setQuestion10(String question10);

	/**
	 * Sets the localized question10 of this survey question in the language.
	 *
	 * @param question10 the localized question10 of this survey question
	 * @param locale the locale of the language
	 */
	public void setQuestion10(String question10, Locale locale);

	/**
	 * Sets the localized question10 of this survey question in the language, and sets the default locale.
	 *
	 * @param question10 the localized question10 of this survey question
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setQuestion10(String question10, Locale locale,
		Locale defaultLocale);

	public void setQuestion10CurrentLanguageId(String languageId);

	/**
	 * Sets the localized question10s of this survey question from the map of locales and localized question10s.
	 *
	 * @param question10Map the locales and localized question10s of this survey question
	 */
	public void setQuestion10Map(Map<Locale, String> question10Map);

	/**
	 * Sets the localized question10s of this survey question from the map of locales and localized question10s, and sets the default locale.
	 *
	 * @param question10Map the locales and localized question10s of this survey question
	 * @param defaultLocale the default locale
	 */
	public void setQuestion10Map(Map<Locale, String> question10Map,
		Locale defaultLocale);

	@Override
	public boolean isNew();

	@Override
	public void setNew(boolean n);

	@Override
	public boolean isCachedModel();

	@Override
	public void setCachedModel(boolean cachedModel);

	@Override
	public boolean isEscapedModel();

	@Override
	public Serializable getPrimaryKeyObj();

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj);

	@Override
	public ExpandoBridge getExpandoBridge();

	@Override
	public void setExpandoBridgeAttributes(BaseModel<?> baseModel);

	@Override
	public void setExpandoBridgeAttributes(ExpandoBridge expandoBridge);

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext);

	public String[] getAvailableLanguageIds();

	public String getDefaultLanguageId();

	public void prepareLocalizedFieldsForImport() throws LocaleException;

	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException;

	@Override
	public Object clone();

	@Override
	public int compareTo(
		org.kisti.edison.virtuallaboratory.model.SurveyQuestion surveyQuestion);

	@Override
	public int hashCode();

	@Override
	public CacheModel<org.kisti.edison.virtuallaboratory.model.SurveyQuestion> toCacheModel();

	@Override
	public org.kisti.edison.virtuallaboratory.model.SurveyQuestion toEscapedModel();

	@Override
	public org.kisti.edison.virtuallaboratory.model.SurveyQuestion toUnescapedModel();

	@Override
	public String toString();

	@Override
	public String toXmlString();
}
/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.kisti.edison.virtuallaboratory.model;

import com.liferay.portal.LocaleException;
import com.liferay.portal.kernel.bean.AutoEscape;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.model.BaseModel;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;

import java.io.Serializable;

import java.util.Date;
import java.util.Locale;
import java.util.Map;

/**
 * The base model interface for the VirtualLab service. Represents a row in the &quot;EDVIR_VirtualLab&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This interface and its corresponding implementation {@link org.kisti.edison.virtuallaboratory.model.impl.VirtualLabModelImpl} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link org.kisti.edison.virtuallaboratory.model.impl.VirtualLabImpl}.
 * </p>
 *
 * @author EDISON
 * @see VirtualLab
 * @see org.kisti.edison.virtuallaboratory.model.impl.VirtualLabImpl
 * @see org.kisti.edison.virtuallaboratory.model.impl.VirtualLabModelImpl
 * @generated
 */
public interface VirtualLabModel extends BaseModel<VirtualLab> {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this interface directly. All methods that expect a virtual lab model instance should use the {@link VirtualLab} interface instead.
	 */

	/**
	 * Returns the primary key of this virtual lab.
	 *
	 * @return the primary key of this virtual lab
	 */
	public long getPrimaryKey();

	/**
	 * Sets the primary key of this virtual lab.
	 *
	 * @param primaryKey the primary key of this virtual lab
	 */
	public void setPrimaryKey(long primaryKey);

	/**
	 * Returns the virtual lab ID of this virtual lab.
	 *
	 * @return the virtual lab ID of this virtual lab
	 */
	public long getVirtualLabId();

	/**
	 * Sets the virtual lab ID of this virtual lab.
	 *
	 * @param virtualLabId the virtual lab ID of this virtual lab
	 */
	public void setVirtualLabId(long virtualLabId);

	/**
	 * Returns the group ID of this virtual lab.
	 *
	 * @return the group ID of this virtual lab
	 */
	public long getGroupId();

	/**
	 * Sets the group ID of this virtual lab.
	 *
	 * @param groupId the group ID of this virtual lab
	 */
	public void setGroupId(long groupId);

	/**
	 * Returns the user ID of this virtual lab.
	 *
	 * @return the user ID of this virtual lab
	 */
	public long getUserId();

	/**
	 * Sets the user ID of this virtual lab.
	 *
	 * @param userId the user ID of this virtual lab
	 */
	public void setUserId(long userId);

	/**
	 * Returns the user uuid of this virtual lab.
	 *
	 * @return the user uuid of this virtual lab
	 * @throws SystemException if a system exception occurred
	 */
	public String getUserUuid() throws SystemException;

	/**
	 * Sets the user uuid of this virtual lab.
	 *
	 * @param userUuid the user uuid of this virtual lab
	 */
	public void setUserUuid(String userUuid);

	/**
	 * Returns the virtual lab person name of this virtual lab.
	 *
	 * @return the virtual lab person name of this virtual lab
	 */
	public String getVirtualLabPersonName();

	/**
	 * Returns the localized virtual lab person name of this virtual lab in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized virtual lab person name of this virtual lab
	 */
	@AutoEscape
	public String getVirtualLabPersonName(Locale locale);

	/**
	 * Returns the localized virtual lab person name of this virtual lab in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized virtual lab person name of this virtual lab. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getVirtualLabPersonName(Locale locale, boolean useDefault);

	/**
	 * Returns the localized virtual lab person name of this virtual lab in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized virtual lab person name of this virtual lab
	 */
	@AutoEscape
	public String getVirtualLabPersonName(String languageId);

	/**
	 * Returns the localized virtual lab person name of this virtual lab in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized virtual lab person name of this virtual lab
	 */
	@AutoEscape
	public String getVirtualLabPersonName(String languageId, boolean useDefault);

	@AutoEscape
	public String getVirtualLabPersonNameCurrentLanguageId();

	@AutoEscape
	public String getVirtualLabPersonNameCurrentValue();

	/**
	 * Returns a map of the locales and localized virtual lab person names of this virtual lab.
	 *
	 * @return the locales and localized virtual lab person names of this virtual lab
	 */
	public Map<Locale, String> getVirtualLabPersonNameMap();

	/**
	 * Sets the virtual lab person name of this virtual lab.
	 *
	 * @param virtualLabPersonName the virtual lab person name of this virtual lab
	 */
	public void setVirtualLabPersonName(String virtualLabPersonName);

	/**
	 * Sets the localized virtual lab person name of this virtual lab in the language.
	 *
	 * @param virtualLabPersonName the localized virtual lab person name of this virtual lab
	 * @param locale the locale of the language
	 */
	public void setVirtualLabPersonName(String virtualLabPersonName,
		Locale locale);

	/**
	 * Sets the localized virtual lab person name of this virtual lab in the language, and sets the default locale.
	 *
	 * @param virtualLabPersonName the localized virtual lab person name of this virtual lab
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setVirtualLabPersonName(String virtualLabPersonName,
		Locale locale, Locale defaultLocale);

	public void setVirtualLabPersonNameCurrentLanguageId(String languageId);

	/**
	 * Sets the localized virtual lab person names of this virtual lab from the map of locales and localized virtual lab person names.
	 *
	 * @param virtualLabPersonNameMap the locales and localized virtual lab person names of this virtual lab
	 */
	public void setVirtualLabPersonNameMap(
		Map<Locale, String> virtualLabPersonNameMap);

	/**
	 * Sets the localized virtual lab person names of this virtual lab from the map of locales and localized virtual lab person names, and sets the default locale.
	 *
	 * @param virtualLabPersonNameMap the locales and localized virtual lab person names of this virtual lab
	 * @param defaultLocale the default locale
	 */
	public void setVirtualLabPersonNameMap(
		Map<Locale, String> virtualLabPersonNameMap, Locale defaultLocale);

	/**
	 * Returns the virtual lab request dt of this virtual lab.
	 *
	 * @return the virtual lab request dt of this virtual lab
	 */
	public Date getVirtualLabRequestDt();

	/**
	 * Sets the virtual lab request dt of this virtual lab.
	 *
	 * @param virtualLabRequestDt the virtual lab request dt of this virtual lab
	 */
	public void setVirtualLabRequestDt(Date virtualLabRequestDt);

	/**
	 * Returns the virtual lab confirm dt of this virtual lab.
	 *
	 * @return the virtual lab confirm dt of this virtual lab
	 */
	public Date getVirtualLabConfirmDt();

	/**
	 * Sets the virtual lab confirm dt of this virtual lab.
	 *
	 * @param virtualLabConfirmDt the virtual lab confirm dt of this virtual lab
	 */
	public void setVirtualLabConfirmDt(Date virtualLabConfirmDt);

	/**
	 * Returns the virtual lab confirm description of this virtual lab.
	 *
	 * @return the virtual lab confirm description of this virtual lab
	 */
	@AutoEscape
	public String getVirtualLabConfirmDescription();

	/**
	 * Sets the virtual lab confirm description of this virtual lab.
	 *
	 * @param virtualLabConfirmDescription the virtual lab confirm description of this virtual lab
	 */
	public void setVirtualLabConfirmDescription(
		String virtualLabConfirmDescription);

	/**
	 * Returns the virtual lab status of this virtual lab.
	 *
	 * @return the virtual lab status of this virtual lab
	 */
	@AutoEscape
	public String getVirtualLabStatus();

	/**
	 * Sets the virtual lab status of this virtual lab.
	 *
	 * @param virtualLabStatus the virtual lab status of this virtual lab
	 */
	public void setVirtualLabStatus(String virtualLabStatus);

	/**
	 * Returns the virtual lab title of this virtual lab.
	 *
	 * @return the virtual lab title of this virtual lab
	 */
	public String getVirtualLabTitle();

	/**
	 * Returns the localized virtual lab title of this virtual lab in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized virtual lab title of this virtual lab
	 */
	@AutoEscape
	public String getVirtualLabTitle(Locale locale);

	/**
	 * Returns the localized virtual lab title of this virtual lab in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized virtual lab title of this virtual lab. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getVirtualLabTitle(Locale locale, boolean useDefault);

	/**
	 * Returns the localized virtual lab title of this virtual lab in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized virtual lab title of this virtual lab
	 */
	@AutoEscape
	public String getVirtualLabTitle(String languageId);

	/**
	 * Returns the localized virtual lab title of this virtual lab in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized virtual lab title of this virtual lab
	 */
	@AutoEscape
	public String getVirtualLabTitle(String languageId, boolean useDefault);

	@AutoEscape
	public String getVirtualLabTitleCurrentLanguageId();

	@AutoEscape
	public String getVirtualLabTitleCurrentValue();

	/**
	 * Returns a map of the locales and localized virtual lab titles of this virtual lab.
	 *
	 * @return the locales and localized virtual lab titles of this virtual lab
	 */
	public Map<Locale, String> getVirtualLabTitleMap();

	/**
	 * Sets the virtual lab title of this virtual lab.
	 *
	 * @param virtualLabTitle the virtual lab title of this virtual lab
	 */
	public void setVirtualLabTitle(String virtualLabTitle);

	/**
	 * Sets the localized virtual lab title of this virtual lab in the language.
	 *
	 * @param virtualLabTitle the localized virtual lab title of this virtual lab
	 * @param locale the locale of the language
	 */
	public void setVirtualLabTitle(String virtualLabTitle, Locale locale);

	/**
	 * Sets the localized virtual lab title of this virtual lab in the language, and sets the default locale.
	 *
	 * @param virtualLabTitle the localized virtual lab title of this virtual lab
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setVirtualLabTitle(String virtualLabTitle, Locale locale,
		Locale defaultLocale);

	public void setVirtualLabTitleCurrentLanguageId(String languageId);

	/**
	 * Sets the localized virtual lab titles of this virtual lab from the map of locales and localized virtual lab titles.
	 *
	 * @param virtualLabTitleMap the locales and localized virtual lab titles of this virtual lab
	 */
	public void setVirtualLabTitleMap(Map<Locale, String> virtualLabTitleMap);

	/**
	 * Sets the localized virtual lab titles of this virtual lab from the map of locales and localized virtual lab titles, and sets the default locale.
	 *
	 * @param virtualLabTitleMap the locales and localized virtual lab titles of this virtual lab
	 * @param defaultLocale the default locale
	 */
	public void setVirtualLabTitleMap(Map<Locale, String> virtualLabTitleMap,
		Locale defaultLocale);

	/**
	 * Returns the virtual lab description of this virtual lab.
	 *
	 * @return the virtual lab description of this virtual lab
	 */
	public String getVirtualLabDescription();

	/**
	 * Returns the localized virtual lab description of this virtual lab in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized virtual lab description of this virtual lab
	 */
	@AutoEscape
	public String getVirtualLabDescription(Locale locale);

	/**
	 * Returns the localized virtual lab description of this virtual lab in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized virtual lab description of this virtual lab. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getVirtualLabDescription(Locale locale, boolean useDefault);

	/**
	 * Returns the localized virtual lab description of this virtual lab in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized virtual lab description of this virtual lab
	 */
	@AutoEscape
	public String getVirtualLabDescription(String languageId);

	/**
	 * Returns the localized virtual lab description of this virtual lab in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized virtual lab description of this virtual lab
	 */
	@AutoEscape
	public String getVirtualLabDescription(String languageId, boolean useDefault);

	@AutoEscape
	public String getVirtualLabDescriptionCurrentLanguageId();

	@AutoEscape
	public String getVirtualLabDescriptionCurrentValue();

	/**
	 * Returns a map of the locales and localized virtual lab descriptions of this virtual lab.
	 *
	 * @return the locales and localized virtual lab descriptions of this virtual lab
	 */
	public Map<Locale, String> getVirtualLabDescriptionMap();

	/**
	 * Sets the virtual lab description of this virtual lab.
	 *
	 * @param virtualLabDescription the virtual lab description of this virtual lab
	 */
	public void setVirtualLabDescription(String virtualLabDescription);

	/**
	 * Sets the localized virtual lab description of this virtual lab in the language.
	 *
	 * @param virtualLabDescription the localized virtual lab description of this virtual lab
	 * @param locale the locale of the language
	 */
	public void setVirtualLabDescription(String virtualLabDescription,
		Locale locale);

	/**
	 * Sets the localized virtual lab description of this virtual lab in the language, and sets the default locale.
	 *
	 * @param virtualLabDescription the localized virtual lab description of this virtual lab
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setVirtualLabDescription(String virtualLabDescription,
		Locale locale, Locale defaultLocale);

	public void setVirtualLabDescriptionCurrentLanguageId(String languageId);

	/**
	 * Sets the localized virtual lab descriptions of this virtual lab from the map of locales and localized virtual lab descriptions.
	 *
	 * @param virtualLabDescriptionMap the locales and localized virtual lab descriptions of this virtual lab
	 */
	public void setVirtualLabDescriptionMap(
		Map<Locale, String> virtualLabDescriptionMap);

	/**
	 * Sets the localized virtual lab descriptions of this virtual lab from the map of locales and localized virtual lab descriptions, and sets the default locale.
	 *
	 * @param virtualLabDescriptionMap the locales and localized virtual lab descriptions of this virtual lab
	 * @param defaultLocale the default locale
	 */
	public void setVirtualLabDescriptionMap(
		Map<Locale, String> virtualLabDescriptionMap, Locale defaultLocale);

	/**
	 * Returns the virtual lab use yn of this virtual lab.
	 *
	 * @return the virtual lab use yn of this virtual lab
	 */
	@AutoEscape
	public String getVirtualLabUseYn();

	/**
	 * Sets the virtual lab use yn of this virtual lab.
	 *
	 * @param virtualLabUseYn the virtual lab use yn of this virtual lab
	 */
	public void setVirtualLabUseYn(String virtualLabUseYn);

	/**
	 * Returns the virtual lab university field of this virtual lab.
	 *
	 * @return the virtual lab university field of this virtual lab
	 */
	@AutoEscape
	public String getVirtualLabUniversityField();

	/**
	 * Sets the virtual lab university field of this virtual lab.
	 *
	 * @param virtualLabUniversityField the virtual lab university field of this virtual lab
	 */
	public void setVirtualLabUniversityField(String virtualLabUniversityField);

	@Override
	public boolean isNew();

	@Override
	public void setNew(boolean n);

	@Override
	public boolean isCachedModel();

	@Override
	public void setCachedModel(boolean cachedModel);

	@Override
	public boolean isEscapedModel();

	@Override
	public Serializable getPrimaryKeyObj();

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj);

	@Override
	public ExpandoBridge getExpandoBridge();

	@Override
	public void setExpandoBridgeAttributes(BaseModel<?> baseModel);

	@Override
	public void setExpandoBridgeAttributes(ExpandoBridge expandoBridge);

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext);

	public String[] getAvailableLanguageIds();

	public String getDefaultLanguageId();

	public void prepareLocalizedFieldsForImport() throws LocaleException;

	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException;

	@Override
	public Object clone();

	@Override
	public int compareTo(
		org.kisti.edison.virtuallaboratory.model.VirtualLab virtualLab);

	@Override
	public int hashCode();

	@Override
	public CacheModel<org.kisti.edison.virtuallaboratory.model.VirtualLab> toCacheModel();

	@Override
	public org.kisti.edison.virtuallaboratory.model.VirtualLab toEscapedModel();

	@Override
	public org.kisti.edison.virtuallaboratory.model.VirtualLab toUnescapedModel();

	@Override
	public String toString();

	@Override
	public String toXmlString();
}
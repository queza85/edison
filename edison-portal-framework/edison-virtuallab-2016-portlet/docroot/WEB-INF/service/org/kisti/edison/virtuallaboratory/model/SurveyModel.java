/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.kisti.edison.virtuallaboratory.model;

import com.liferay.portal.LocaleException;
import com.liferay.portal.kernel.bean.AutoEscape;
import com.liferay.portal.model.BaseModel;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;

import java.io.Serializable;

import java.util.Date;
import java.util.Locale;
import java.util.Map;

/**
 * The base model interface for the Survey service. Represents a row in the &quot;EDVIR_Survey&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This interface and its corresponding implementation {@link org.kisti.edison.virtuallaboratory.model.impl.SurveyModelImpl} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link org.kisti.edison.virtuallaboratory.model.impl.SurveyImpl}.
 * </p>
 *
 * @author EDISON
 * @see Survey
 * @see org.kisti.edison.virtuallaboratory.model.impl.SurveyImpl
 * @see org.kisti.edison.virtuallaboratory.model.impl.SurveyModelImpl
 * @generated
 */
public interface SurveyModel extends BaseModel<Survey> {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this interface directly. All methods that expect a survey model instance should use the {@link Survey} interface instead.
	 */

	/**
	 * Returns the primary key of this survey.
	 *
	 * @return the primary key of this survey
	 */
	public long getPrimaryKey();

	/**
	 * Sets the primary key of this survey.
	 *
	 * @param primaryKey the primary key of this survey
	 */
	public void setPrimaryKey(long primaryKey);

	/**
	 * Returns the survey seq no of this survey.
	 *
	 * @return the survey seq no of this survey
	 */
	public long getSurveySeqNo();

	/**
	 * Sets the survey seq no of this survey.
	 *
	 * @param surveySeqNo the survey seq no of this survey
	 */
	public void setSurveySeqNo(long surveySeqNo);

	/**
	 * Returns the survey use yn of this survey.
	 *
	 * @return the survey use yn of this survey
	 */
	@AutoEscape
	public String getSurveyUseYn();

	/**
	 * Sets the survey use yn of this survey.
	 *
	 * @param surveyUseYn the survey use yn of this survey
	 */
	public void setSurveyUseYn(String surveyUseYn);

	/**
	 * Returns the survey title of this survey.
	 *
	 * @return the survey title of this survey
	 */
	public String getSurveyTitle();

	/**
	 * Returns the localized survey title of this survey in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized survey title of this survey
	 */
	@AutoEscape
	public String getSurveyTitle(Locale locale);

	/**
	 * Returns the localized survey title of this survey in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized survey title of this survey. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getSurveyTitle(Locale locale, boolean useDefault);

	/**
	 * Returns the localized survey title of this survey in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized survey title of this survey
	 */
	@AutoEscape
	public String getSurveyTitle(String languageId);

	/**
	 * Returns the localized survey title of this survey in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized survey title of this survey
	 */
	@AutoEscape
	public String getSurveyTitle(String languageId, boolean useDefault);

	@AutoEscape
	public String getSurveyTitleCurrentLanguageId();

	@AutoEscape
	public String getSurveyTitleCurrentValue();

	/**
	 * Returns a map of the locales and localized survey titles of this survey.
	 *
	 * @return the locales and localized survey titles of this survey
	 */
	public Map<Locale, String> getSurveyTitleMap();

	/**
	 * Sets the survey title of this survey.
	 *
	 * @param surveyTitle the survey title of this survey
	 */
	public void setSurveyTitle(String surveyTitle);

	/**
	 * Sets the localized survey title of this survey in the language.
	 *
	 * @param surveyTitle the localized survey title of this survey
	 * @param locale the locale of the language
	 */
	public void setSurveyTitle(String surveyTitle, Locale locale);

	/**
	 * Sets the localized survey title of this survey in the language, and sets the default locale.
	 *
	 * @param surveyTitle the localized survey title of this survey
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setSurveyTitle(String surveyTitle, Locale locale,
		Locale defaultLocale);

	public void setSurveyTitleCurrentLanguageId(String languageId);

	/**
	 * Sets the localized survey titles of this survey from the map of locales and localized survey titles.
	 *
	 * @param surveyTitleMap the locales and localized survey titles of this survey
	 */
	public void setSurveyTitleMap(Map<Locale, String> surveyTitleMap);

	/**
	 * Sets the localized survey titles of this survey from the map of locales and localized survey titles, and sets the default locale.
	 *
	 * @param surveyTitleMap the locales and localized survey titles of this survey
	 * @param defaultLocale the default locale
	 */
	public void setSurveyTitleMap(Map<Locale, String> surveyTitleMap,
		Locale defaultLocale);

	/**
	 * Returns the survey start date of this survey.
	 *
	 * @return the survey start date of this survey
	 */
	@AutoEscape
	public String getSurveyStartDate();

	/**
	 * Sets the survey start date of this survey.
	 *
	 * @param surveyStartDate the survey start date of this survey
	 */
	public void setSurveyStartDate(String surveyStartDate);

	/**
	 * Returns the survey end date of this survey.
	 *
	 * @return the survey end date of this survey
	 */
	@AutoEscape
	public String getSurveyEndDate();

	/**
	 * Sets the survey end date of this survey.
	 *
	 * @param surveyEndDate the survey end date of this survey
	 */
	public void setSurveyEndDate(String surveyEndDate);

	/**
	 * Returns the survey status of this survey.
	 *
	 * @return the survey status of this survey
	 */
	@AutoEscape
	public String getSurveyStatus();

	/**
	 * Sets the survey status of this survey.
	 *
	 * @param surveyStatus the survey status of this survey
	 */
	public void setSurveyStatus(String surveyStatus);

	/**
	 * Returns the survey create date of this survey.
	 *
	 * @return the survey create date of this survey
	 */
	public Date getSurveyCreateDate();

	/**
	 * Sets the survey create date of this survey.
	 *
	 * @param surveyCreateDate the survey create date of this survey
	 */
	public void setSurveyCreateDate(Date surveyCreateDate);

	@Override
	public boolean isNew();

	@Override
	public void setNew(boolean n);

	@Override
	public boolean isCachedModel();

	@Override
	public void setCachedModel(boolean cachedModel);

	@Override
	public boolean isEscapedModel();

	@Override
	public Serializable getPrimaryKeyObj();

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj);

	@Override
	public ExpandoBridge getExpandoBridge();

	@Override
	public void setExpandoBridgeAttributes(BaseModel<?> baseModel);

	@Override
	public void setExpandoBridgeAttributes(ExpandoBridge expandoBridge);

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext);

	public String[] getAvailableLanguageIds();

	public String getDefaultLanguageId();

	public void prepareLocalizedFieldsForImport() throws LocaleException;

	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException;

	@Override
	public Object clone();

	@Override
	public int compareTo(org.kisti.edison.virtuallaboratory.model.Survey survey);

	@Override
	public int hashCode();

	@Override
	public CacheModel<org.kisti.edison.virtuallaboratory.model.Survey> toCacheModel();

	@Override
	public org.kisti.edison.virtuallaboratory.model.Survey toEscapedModel();

	@Override
	public org.kisti.edison.virtuallaboratory.model.Survey toUnescapedModel();

	@Override
	public String toString();

	@Override
	public String toXmlString();
}
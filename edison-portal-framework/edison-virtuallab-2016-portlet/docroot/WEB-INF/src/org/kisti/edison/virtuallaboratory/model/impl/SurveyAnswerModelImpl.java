/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.kisti.edison.virtuallaboratory.model.impl;

import com.liferay.portal.LocaleException;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.LocaleUtil;
import com.liferay.portal.kernel.util.LocalizationUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.kernel.util.Validator;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import org.kisti.edison.virtuallaboratory.model.SurveyAnswer;
import org.kisti.edison.virtuallaboratory.model.SurveyAnswerModel;
import org.kisti.edison.virtuallaboratory.model.SurveyAnswerSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;

/**
 * The base model implementation for the SurveyAnswer service. Represents a row in the &quot;EDVIR_SurveyAnswer&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link org.kisti.edison.virtuallaboratory.model.SurveyAnswerModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link SurveyAnswerImpl}.
 * </p>
 *
 * @author EDISON
 * @see SurveyAnswerImpl
 * @see org.kisti.edison.virtuallaboratory.model.SurveyAnswer
 * @see org.kisti.edison.virtuallaboratory.model.SurveyAnswerModel
 * @generated
 */
@JSON(strict = true)
public class SurveyAnswerModelImpl extends BaseModelImpl<SurveyAnswer>
	implements SurveyAnswerModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a survey answer model instance should use the {@link org.kisti.edison.virtuallaboratory.model.SurveyAnswer} interface instead.
	 */
	public static final String TABLE_NAME = "EDVIR_SurveyAnswer";
	public static final Object[][] TABLE_COLUMNS = {
			{ "SurveyAnswerId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "virtualLabId", Types.BIGINT },
			{ "classId", Types.BIGINT },
			{ "subjectivityAnswer", Types.VARCHAR },
			{ "objecttivityAnswer", Types.VARCHAR },
			{ "answerDate", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table EDVIR_SurveyAnswer (SurveyAnswerId LONG not null primary key,userId LONG,virtualLabId LONG,classId LONG,subjectivityAnswer STRING null,objecttivityAnswer VARCHAR(75) null,answerDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table EDVIR_SurveyAnswer";
	public static final String ORDER_BY_JPQL = " ORDER BY surveyAnswer.SurveyAnswerId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY EDVIR_SurveyAnswer.SurveyAnswerId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.org.kisti.edison.virtuallaboratory.model.SurveyAnswer"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.org.kisti.edison.virtuallaboratory.model.SurveyAnswer"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static SurveyAnswer toModel(SurveyAnswerSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		SurveyAnswer model = new SurveyAnswerImpl();

		model.setSurveyAnswerId(soapModel.getSurveyAnswerId());
		model.setUserId(soapModel.getUserId());
		model.setVirtualLabId(soapModel.getVirtualLabId());
		model.setClassId(soapModel.getClassId());
		model.setSubjectivityAnswer(soapModel.getSubjectivityAnswer());
		model.setObjecttivityAnswer(soapModel.getObjecttivityAnswer());
		model.setAnswerDate(soapModel.getAnswerDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<SurveyAnswer> toModels(SurveyAnswerSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<SurveyAnswer> models = new ArrayList<SurveyAnswer>(soapModels.length);

		for (SurveyAnswerSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final String MAPPING_TABLE_EDVIR_SURVEYQUESTIONS_SURVEYANSWERS_NAME =
		"EDVIR_SurveyQuestions_SurveyAnswers";
	public static final Object[][] MAPPING_TABLE_EDVIR_SURVEYQUESTIONS_SURVEYANSWERS_COLUMNS =
		{
			{ "SurveyAnswerId", Types.BIGINT },
			{ "questionSeqNo", Types.BIGINT }
		};
	public static final String MAPPING_TABLE_EDVIR_SURVEYQUESTIONS_SURVEYANSWERS_SQL_CREATE =
		"create table EDVIR_SurveyQuestions_SurveyAnswers (SurveyAnswerId LONG not null,questionSeqNo LONG not null,primary key (SurveyAnswerId, questionSeqNo))";
	public static final boolean FINDER_CACHE_ENABLED_EDVIR_SURVEYQUESTIONS_SURVEYANSWERS =
		GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.EDVIR_SurveyQuestions_SurveyAnswers"),
			true);
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.org.kisti.edison.virtuallaboratory.model.SurveyAnswer"));

	public SurveyAnswerModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _SurveyAnswerId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setSurveyAnswerId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _SurveyAnswerId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return SurveyAnswer.class;
	}

	@Override
	public String getModelClassName() {
		return SurveyAnswer.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("SurveyAnswerId", getSurveyAnswerId());
		attributes.put("userId", getUserId());
		attributes.put("virtualLabId", getVirtualLabId());
		attributes.put("classId", getClassId());
		attributes.put("subjectivityAnswer", getSubjectivityAnswer());
		attributes.put("objecttivityAnswer", getObjecttivityAnswer());
		attributes.put("answerDate", getAnswerDate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long SurveyAnswerId = (Long)attributes.get("SurveyAnswerId");

		if (SurveyAnswerId != null) {
			setSurveyAnswerId(SurveyAnswerId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Long virtualLabId = (Long)attributes.get("virtualLabId");

		if (virtualLabId != null) {
			setVirtualLabId(virtualLabId);
		}

		Long classId = (Long)attributes.get("classId");

		if (classId != null) {
			setClassId(classId);
		}

		String subjectivityAnswer = (String)attributes.get("subjectivityAnswer");

		if (subjectivityAnswer != null) {
			setSubjectivityAnswer(subjectivityAnswer);
		}

		String objecttivityAnswer = (String)attributes.get("objecttivityAnswer");

		if (objecttivityAnswer != null) {
			setObjecttivityAnswer(objecttivityAnswer);
		}

		Date answerDate = (Date)attributes.get("answerDate");

		if (answerDate != null) {
			setAnswerDate(answerDate);
		}
	}

	@JSON
	@Override
	public long getSurveyAnswerId() {
		return _SurveyAnswerId;
	}

	@Override
	public void setSurveyAnswerId(long SurveyAnswerId) {
		_SurveyAnswerId = SurveyAnswerId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	@Override
	public long getVirtualLabId() {
		return _virtualLabId;
	}

	@Override
	public void setVirtualLabId(long virtualLabId) {
		_virtualLabId = virtualLabId;
	}

	@JSON
	@Override
	public long getClassId() {
		return _classId;
	}

	@Override
	public void setClassId(long classId) {
		_classId = classId;
	}

	@JSON
	@Override
	public String getSubjectivityAnswer() {
		if (_subjectivityAnswer == null) {
			return StringPool.BLANK;
		}
		else {
			return _subjectivityAnswer;
		}
	}

	@Override
	public String getSubjectivityAnswer(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getSubjectivityAnswer(languageId);
	}

	@Override
	public String getSubjectivityAnswer(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getSubjectivityAnswer(languageId, useDefault);
	}

	@Override
	public String getSubjectivityAnswer(String languageId) {
		return LocalizationUtil.getLocalization(getSubjectivityAnswer(),
			languageId);
	}

	@Override
	public String getSubjectivityAnswer(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(getSubjectivityAnswer(),
			languageId, useDefault);
	}

	@Override
	public String getSubjectivityAnswerCurrentLanguageId() {
		return _subjectivityAnswerCurrentLanguageId;
	}

	@JSON
	@Override
	public String getSubjectivityAnswerCurrentValue() {
		Locale locale = getLocale(_subjectivityAnswerCurrentLanguageId);

		return getSubjectivityAnswer(locale);
	}

	@Override
	public Map<Locale, String> getSubjectivityAnswerMap() {
		return LocalizationUtil.getLocalizationMap(getSubjectivityAnswer());
	}

	@Override
	public void setSubjectivityAnswer(String subjectivityAnswer) {
		_subjectivityAnswer = subjectivityAnswer;
	}

	@Override
	public void setSubjectivityAnswer(String subjectivityAnswer, Locale locale) {
		setSubjectivityAnswer(subjectivityAnswer, locale,
			LocaleUtil.getDefault());
	}

	@Override
	public void setSubjectivityAnswer(String subjectivityAnswer, Locale locale,
		Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(subjectivityAnswer)) {
			setSubjectivityAnswer(LocalizationUtil.updateLocalization(
					getSubjectivityAnswer(), "SubjectivityAnswer",
					subjectivityAnswer, languageId, defaultLanguageId));
		}
		else {
			setSubjectivityAnswer(LocalizationUtil.removeLocalization(
					getSubjectivityAnswer(), "SubjectivityAnswer", languageId));
		}
	}

	@Override
	public void setSubjectivityAnswerCurrentLanguageId(String languageId) {
		_subjectivityAnswerCurrentLanguageId = languageId;
	}

	@Override
	public void setSubjectivityAnswerMap(
		Map<Locale, String> subjectivityAnswerMap) {
		setSubjectivityAnswerMap(subjectivityAnswerMap, LocaleUtil.getDefault());
	}

	@Override
	public void setSubjectivityAnswerMap(
		Map<Locale, String> subjectivityAnswerMap, Locale defaultLocale) {
		if (subjectivityAnswerMap == null) {
			return;
		}

		setSubjectivityAnswer(LocalizationUtil.updateLocalization(
				subjectivityAnswerMap, getSubjectivityAnswer(),
				"SubjectivityAnswer", LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getObjecttivityAnswer() {
		if (_objecttivityAnswer == null) {
			return StringPool.BLANK;
		}
		else {
			return _objecttivityAnswer;
		}
	}

	@Override
	public void setObjecttivityAnswer(String objecttivityAnswer) {
		_objecttivityAnswer = objecttivityAnswer;
	}

	@JSON
	@Override
	public Date getAnswerDate() {
		return _answerDate;
	}

	@Override
	public void setAnswerDate(Date answerDate) {
		_answerDate = answerDate;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			SurveyAnswer.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public String[] getAvailableLanguageIds() {
		Set<String> availableLanguageIds = new TreeSet<String>();

		Map<Locale, String> subjectivityAnswerMap = getSubjectivityAnswerMap();

		for (Map.Entry<Locale, String> entry : subjectivityAnswerMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		return availableLanguageIds.toArray(new String[availableLanguageIds.size()]);
	}

	@Override
	public String getDefaultLanguageId() {
		String xml = getSubjectivityAnswer();

		if (xml == null) {
			return StringPool.BLANK;
		}

		Locale defaultLocale = LocaleUtil.getDefault();

		return LocalizationUtil.getDefaultLanguageId(xml, defaultLocale);
	}

	@Override
	public void prepareLocalizedFieldsForImport() throws LocaleException {
		prepareLocalizedFieldsForImport(null);
	}

	@Override
	@SuppressWarnings("unused")
	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException {
		Locale defaultLocale = LocaleUtil.getDefault();

		String modelDefaultLanguageId = getDefaultLanguageId();

		String subjectivityAnswer = getSubjectivityAnswer(defaultLocale);

		if (Validator.isNull(subjectivityAnswer)) {
			setSubjectivityAnswer(getSubjectivityAnswer(modelDefaultLanguageId),
				defaultLocale);
		}
		else {
			setSubjectivityAnswer(getSubjectivityAnswer(defaultLocale),
				defaultLocale, defaultLocale);
		}
	}

	@Override
	public SurveyAnswer toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (SurveyAnswer)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		SurveyAnswerImpl surveyAnswerImpl = new SurveyAnswerImpl();

		surveyAnswerImpl.setSurveyAnswerId(getSurveyAnswerId());
		surveyAnswerImpl.setUserId(getUserId());
		surveyAnswerImpl.setVirtualLabId(getVirtualLabId());
		surveyAnswerImpl.setClassId(getClassId());
		surveyAnswerImpl.setSubjectivityAnswer(getSubjectivityAnswer());
		surveyAnswerImpl.setObjecttivityAnswer(getObjecttivityAnswer());
		surveyAnswerImpl.setAnswerDate(getAnswerDate());

		surveyAnswerImpl.resetOriginalValues();

		return surveyAnswerImpl;
	}

	@Override
	public int compareTo(SurveyAnswer surveyAnswer) {
		long primaryKey = surveyAnswer.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof SurveyAnswer)) {
			return false;
		}

		SurveyAnswer surveyAnswer = (SurveyAnswer)obj;

		long primaryKey = surveyAnswer.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<SurveyAnswer> toCacheModel() {
		SurveyAnswerCacheModel surveyAnswerCacheModel = new SurveyAnswerCacheModel();

		surveyAnswerCacheModel.SurveyAnswerId = getSurveyAnswerId();

		surveyAnswerCacheModel.userId = getUserId();

		surveyAnswerCacheModel.virtualLabId = getVirtualLabId();

		surveyAnswerCacheModel.classId = getClassId();

		surveyAnswerCacheModel.subjectivityAnswer = getSubjectivityAnswer();

		String subjectivityAnswer = surveyAnswerCacheModel.subjectivityAnswer;

		if ((subjectivityAnswer != null) && (subjectivityAnswer.length() == 0)) {
			surveyAnswerCacheModel.subjectivityAnswer = null;
		}

		surveyAnswerCacheModel.objecttivityAnswer = getObjecttivityAnswer();

		String objecttivityAnswer = surveyAnswerCacheModel.objecttivityAnswer;

		if ((objecttivityAnswer != null) && (objecttivityAnswer.length() == 0)) {
			surveyAnswerCacheModel.objecttivityAnswer = null;
		}

		Date answerDate = getAnswerDate();

		if (answerDate != null) {
			surveyAnswerCacheModel.answerDate = answerDate.getTime();
		}
		else {
			surveyAnswerCacheModel.answerDate = Long.MIN_VALUE;
		}

		return surveyAnswerCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(15);

		sb.append("{SurveyAnswerId=");
		sb.append(getSurveyAnswerId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", virtualLabId=");
		sb.append(getVirtualLabId());
		sb.append(", classId=");
		sb.append(getClassId());
		sb.append(", subjectivityAnswer=");
		sb.append(getSubjectivityAnswer());
		sb.append(", objecttivityAnswer=");
		sb.append(getObjecttivityAnswer());
		sb.append(", answerDate=");
		sb.append(getAnswerDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(25);

		sb.append("<model><model-name>");
		sb.append("org.kisti.edison.virtuallaboratory.model.SurveyAnswer");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>SurveyAnswerId</column-name><column-value><![CDATA[");
		sb.append(getSurveyAnswerId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>virtualLabId</column-name><column-value><![CDATA[");
		sb.append(getVirtualLabId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>classId</column-name><column-value><![CDATA[");
		sb.append(getClassId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>subjectivityAnswer</column-name><column-value><![CDATA[");
		sb.append(getSubjectivityAnswer());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>objecttivityAnswer</column-name><column-value><![CDATA[");
		sb.append(getObjecttivityAnswer());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>answerDate</column-name><column-value><![CDATA[");
		sb.append(getAnswerDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = SurveyAnswer.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			SurveyAnswer.class
		};
	private long _SurveyAnswerId;
	private long _userId;
	private String _userUuid;
	private long _virtualLabId;
	private long _classId;
	private String _subjectivityAnswer;
	private String _subjectivityAnswerCurrentLanguageId;
	private String _objecttivityAnswer;
	private Date _answerDate;
	private SurveyAnswer _escapedModel;
}
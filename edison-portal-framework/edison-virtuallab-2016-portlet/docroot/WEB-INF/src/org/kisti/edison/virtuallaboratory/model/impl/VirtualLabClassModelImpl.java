/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.kisti.edison.virtuallaboratory.model.impl;

import com.liferay.portal.LocaleException;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.LocaleUtil;
import com.liferay.portal.kernel.util.LocalizationUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.kernel.util.Validator;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import org.kisti.edison.virtuallaboratory.model.VirtualLabClass;
import org.kisti.edison.virtuallaboratory.model.VirtualLabClassModel;
import org.kisti.edison.virtuallaboratory.model.VirtualLabClassSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;

/**
 * The base model implementation for the VirtualLabClass service. Represents a row in the &quot;EDVIR_VirtualLabClass&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link org.kisti.edison.virtuallaboratory.model.VirtualLabClassModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link VirtualLabClassImpl}.
 * </p>
 *
 * @author EDISON
 * @see VirtualLabClassImpl
 * @see org.kisti.edison.virtuallaboratory.model.VirtualLabClass
 * @see org.kisti.edison.virtuallaboratory.model.VirtualLabClassModel
 * @generated
 */
@JSON(strict = true)
public class VirtualLabClassModelImpl extends BaseModelImpl<VirtualLabClass>
	implements VirtualLabClassModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a virtual lab class model instance should use the {@link org.kisti.edison.virtuallaboratory.model.VirtualLabClass} interface instead.
	 */
	public static final String TABLE_NAME = "EDVIR_VirtualLabClass";
	public static final Object[][] TABLE_COLUMNS = {
			{ "classId", Types.BIGINT },
			{ "classTitle", Types.VARCHAR },
			{ "classStartDt", Types.VARCHAR },
			{ "classEndDt", Types.VARCHAR },
			{ "classUseYn", Types.VARCHAR },
			{ "classDescription", Types.VARCHAR },
			{ "classPersonnel", Types.INTEGER },
			{ "classCreateDt", Types.TIMESTAMP },
			{ "classUpdateDt", Types.TIMESTAMP },
			{ "virtualClassCd", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table EDVIR_VirtualLabClass (classId LONG not null primary key,classTitle STRING null,classStartDt VARCHAR(75) null,classEndDt VARCHAR(75) null,classUseYn VARCHAR(75) null,classDescription STRING null,classPersonnel INTEGER,classCreateDt DATE null,classUpdateDt DATE null,virtualClassCd VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table EDVIR_VirtualLabClass";
	public static final String ORDER_BY_JPQL = " ORDER BY virtualLabClass.classCreateDt DESC";
	public static final String ORDER_BY_SQL = " ORDER BY EDVIR_VirtualLabClass.classCreateDt DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.org.kisti.edison.virtuallaboratory.model.VirtualLabClass"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.org.kisti.edison.virtuallaboratory.model.VirtualLabClass"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static VirtualLabClass toModel(VirtualLabClassSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		VirtualLabClass model = new VirtualLabClassImpl();

		model.setClassId(soapModel.getClassId());
		model.setClassTitle(soapModel.getClassTitle());
		model.setClassStartDt(soapModel.getClassStartDt());
		model.setClassEndDt(soapModel.getClassEndDt());
		model.setClassUseYn(soapModel.getClassUseYn());
		model.setClassDescription(soapModel.getClassDescription());
		model.setClassPersonnel(soapModel.getClassPersonnel());
		model.setClassCreateDt(soapModel.getClassCreateDt());
		model.setClassUpdateDt(soapModel.getClassUpdateDt());
		model.setVirtualClassCd(soapModel.getVirtualClassCd());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<VirtualLabClass> toModels(
		VirtualLabClassSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<VirtualLabClass> models = new ArrayList<VirtualLabClass>(soapModels.length);

		for (VirtualLabClassSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final String MAPPING_TABLE_EDVIR_VIRTUALLABS_VIRTUALLABCLASSES_NAME =
		"EDVIR_VirtualLabs_VirtualLabClasses";
	public static final Object[][] MAPPING_TABLE_EDVIR_VIRTUALLABS_VIRTUALLABCLASSES_COLUMNS =
		{
			{ "virtualLabId", Types.BIGINT },
			{ "classId", Types.BIGINT }
		};
	public static final String MAPPING_TABLE_EDVIR_VIRTUALLABS_VIRTUALLABCLASSES_SQL_CREATE =
		"create table EDVIR_VirtualLabs_VirtualLabClasses (virtualLabId LONG not null,classId LONG not null,primary key (virtualLabId, classId))";
	public static final boolean FINDER_CACHE_ENABLED_EDVIR_VIRTUALLABS_VIRTUALLABCLASSES =
		GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.EDVIR_VirtualLabs_VirtualLabClasses"),
			true);
	public static final String MAPPING_TABLE_EDVIR_VIRTUALLABCLASSES_VIRTUALLABCLASSSCIENCEAPPS_NAME =
		"EDVIR_VirtualLabClasses_VirtualLabClassScienceApps";
	public static final Object[][] MAPPING_TABLE_EDVIR_VIRTUALLABCLASSES_VIRTUALLABCLASSSCIENCEAPPS_COLUMNS =
		{
			{ "classId", Types.BIGINT },
			{ "scienceAppSeqNo", Types.BIGINT }
		};
	public static final String MAPPING_TABLE_EDVIR_VIRTUALLABCLASSES_VIRTUALLABCLASSSCIENCEAPPS_SQL_CREATE =
		"create table EDVIR_VirtualLabClasses_VirtualLabClassScienceApps (classId LONG not null,scienceAppSeqNo LONG not null,primary key (classId, scienceAppSeqNo))";
	public static final boolean FINDER_CACHE_ENABLED_EDVIR_VIRTUALLABCLASSES_VIRTUALLABCLASSSCIENCEAPPS =
		GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.EDVIR_VirtualLabClasses_VirtualLabClassScienceApps"),
			true);
	public static final String MAPPING_TABLE_EDVIR_VIRTUALLABCLASSES_VIRTUALLABUSERS_NAME =
		"EDVIR_VirtualLabClasses_VirtualLabUsers";
	public static final Object[][] MAPPING_TABLE_EDVIR_VIRTUALLABCLASSES_VIRTUALLABUSERS_COLUMNS =
		{
			{ "classId", Types.BIGINT },
			{ "virtualLabUserId", Types.BIGINT }
		};
	public static final String MAPPING_TABLE_EDVIR_VIRTUALLABCLASSES_VIRTUALLABUSERS_SQL_CREATE =
		"create table EDVIR_VirtualLabClasses_VirtualLabUsers (classId LONG not null,virtualLabUserId LONG not null,primary key (classId, virtualLabUserId))";
	public static final boolean FINDER_CACHE_ENABLED_EDVIR_VIRTUALLABCLASSES_VIRTUALLABUSERS =
		GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.EDVIR_VirtualLabClasses_VirtualLabUsers"),
			true);
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.org.kisti.edison.virtuallaboratory.model.VirtualLabClass"));

	public VirtualLabClassModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _classId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setClassId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _classId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return VirtualLabClass.class;
	}

	@Override
	public String getModelClassName() {
		return VirtualLabClass.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("classId", getClassId());
		attributes.put("classTitle", getClassTitle());
		attributes.put("classStartDt", getClassStartDt());
		attributes.put("classEndDt", getClassEndDt());
		attributes.put("classUseYn", getClassUseYn());
		attributes.put("classDescription", getClassDescription());
		attributes.put("classPersonnel", getClassPersonnel());
		attributes.put("classCreateDt", getClassCreateDt());
		attributes.put("classUpdateDt", getClassUpdateDt());
		attributes.put("virtualClassCd", getVirtualClassCd());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long classId = (Long)attributes.get("classId");

		if (classId != null) {
			setClassId(classId);
		}

		String classTitle = (String)attributes.get("classTitle");

		if (classTitle != null) {
			setClassTitle(classTitle);
		}

		String classStartDt = (String)attributes.get("classStartDt");

		if (classStartDt != null) {
			setClassStartDt(classStartDt);
		}

		String classEndDt = (String)attributes.get("classEndDt");

		if (classEndDt != null) {
			setClassEndDt(classEndDt);
		}

		String classUseYn = (String)attributes.get("classUseYn");

		if (classUseYn != null) {
			setClassUseYn(classUseYn);
		}

		String classDescription = (String)attributes.get("classDescription");

		if (classDescription != null) {
			setClassDescription(classDescription);
		}

		Integer classPersonnel = (Integer)attributes.get("classPersonnel");

		if (classPersonnel != null) {
			setClassPersonnel(classPersonnel);
		}

		Date classCreateDt = (Date)attributes.get("classCreateDt");

		if (classCreateDt != null) {
			setClassCreateDt(classCreateDt);
		}

		Date classUpdateDt = (Date)attributes.get("classUpdateDt");

		if (classUpdateDt != null) {
			setClassUpdateDt(classUpdateDt);
		}

		String virtualClassCd = (String)attributes.get("virtualClassCd");

		if (virtualClassCd != null) {
			setVirtualClassCd(virtualClassCd);
		}
	}

	@JSON
	@Override
	public long getClassId() {
		return _classId;
	}

	@Override
	public void setClassId(long classId) {
		_classId = classId;
	}

	@JSON
	@Override
	public String getClassTitle() {
		if (_classTitle == null) {
			return StringPool.BLANK;
		}
		else {
			return _classTitle;
		}
	}

	@Override
	public String getClassTitle(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getClassTitle(languageId);
	}

	@Override
	public String getClassTitle(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getClassTitle(languageId, useDefault);
	}

	@Override
	public String getClassTitle(String languageId) {
		return LocalizationUtil.getLocalization(getClassTitle(), languageId);
	}

	@Override
	public String getClassTitle(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(getClassTitle(), languageId,
			useDefault);
	}

	@Override
	public String getClassTitleCurrentLanguageId() {
		return _classTitleCurrentLanguageId;
	}

	@JSON
	@Override
	public String getClassTitleCurrentValue() {
		Locale locale = getLocale(_classTitleCurrentLanguageId);

		return getClassTitle(locale);
	}

	@Override
	public Map<Locale, String> getClassTitleMap() {
		return LocalizationUtil.getLocalizationMap(getClassTitle());
	}

	@Override
	public void setClassTitle(String classTitle) {
		_classTitle = classTitle;
	}

	@Override
	public void setClassTitle(String classTitle, Locale locale) {
		setClassTitle(classTitle, locale, LocaleUtil.getDefault());
	}

	@Override
	public void setClassTitle(String classTitle, Locale locale,
		Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(classTitle)) {
			setClassTitle(LocalizationUtil.updateLocalization(getClassTitle(),
					"ClassTitle", classTitle, languageId, defaultLanguageId));
		}
		else {
			setClassTitle(LocalizationUtil.removeLocalization(getClassTitle(),
					"ClassTitle", languageId));
		}
	}

	@Override
	public void setClassTitleCurrentLanguageId(String languageId) {
		_classTitleCurrentLanguageId = languageId;
	}

	@Override
	public void setClassTitleMap(Map<Locale, String> classTitleMap) {
		setClassTitleMap(classTitleMap, LocaleUtil.getDefault());
	}

	@Override
	public void setClassTitleMap(Map<Locale, String> classTitleMap,
		Locale defaultLocale) {
		if (classTitleMap == null) {
			return;
		}

		setClassTitle(LocalizationUtil.updateLocalization(classTitleMap,
				getClassTitle(), "ClassTitle",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getClassStartDt() {
		if (_classStartDt == null) {
			return StringPool.BLANK;
		}
		else {
			return _classStartDt;
		}
	}

	@Override
	public void setClassStartDt(String classStartDt) {
		_classStartDt = classStartDt;
	}

	@JSON
	@Override
	public String getClassEndDt() {
		if (_classEndDt == null) {
			return StringPool.BLANK;
		}
		else {
			return _classEndDt;
		}
	}

	@Override
	public void setClassEndDt(String classEndDt) {
		_classEndDt = classEndDt;
	}

	@JSON
	@Override
	public String getClassUseYn() {
		if (_classUseYn == null) {
			return StringPool.BLANK;
		}
		else {
			return _classUseYn;
		}
	}

	@Override
	public void setClassUseYn(String classUseYn) {
		_classUseYn = classUseYn;
	}

	@JSON
	@Override
	public String getClassDescription() {
		if (_classDescription == null) {
			return StringPool.BLANK;
		}
		else {
			return _classDescription;
		}
	}

	@Override
	public String getClassDescription(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getClassDescription(languageId);
	}

	@Override
	public String getClassDescription(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getClassDescription(languageId, useDefault);
	}

	@Override
	public String getClassDescription(String languageId) {
		return LocalizationUtil.getLocalization(getClassDescription(),
			languageId);
	}

	@Override
	public String getClassDescription(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(getClassDescription(),
			languageId, useDefault);
	}

	@Override
	public String getClassDescriptionCurrentLanguageId() {
		return _classDescriptionCurrentLanguageId;
	}

	@JSON
	@Override
	public String getClassDescriptionCurrentValue() {
		Locale locale = getLocale(_classDescriptionCurrentLanguageId);

		return getClassDescription(locale);
	}

	@Override
	public Map<Locale, String> getClassDescriptionMap() {
		return LocalizationUtil.getLocalizationMap(getClassDescription());
	}

	@Override
	public void setClassDescription(String classDescription) {
		_classDescription = classDescription;
	}

	@Override
	public void setClassDescription(String classDescription, Locale locale) {
		setClassDescription(classDescription, locale, LocaleUtil.getDefault());
	}

	@Override
	public void setClassDescription(String classDescription, Locale locale,
		Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(classDescription)) {
			setClassDescription(LocalizationUtil.updateLocalization(
					getClassDescription(), "ClassDescription",
					classDescription, languageId, defaultLanguageId));
		}
		else {
			setClassDescription(LocalizationUtil.removeLocalization(
					getClassDescription(), "ClassDescription", languageId));
		}
	}

	@Override
	public void setClassDescriptionCurrentLanguageId(String languageId) {
		_classDescriptionCurrentLanguageId = languageId;
	}

	@Override
	public void setClassDescriptionMap(Map<Locale, String> classDescriptionMap) {
		setClassDescriptionMap(classDescriptionMap, LocaleUtil.getDefault());
	}

	@Override
	public void setClassDescriptionMap(
		Map<Locale, String> classDescriptionMap, Locale defaultLocale) {
		if (classDescriptionMap == null) {
			return;
		}

		setClassDescription(LocalizationUtil.updateLocalization(
				classDescriptionMap, getClassDescription(), "ClassDescription",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public int getClassPersonnel() {
		return _classPersonnel;
	}

	@Override
	public void setClassPersonnel(int classPersonnel) {
		_classPersonnel = classPersonnel;
	}

	@JSON
	@Override
	public Date getClassCreateDt() {
		return _classCreateDt;
	}

	@Override
	public void setClassCreateDt(Date classCreateDt) {
		_classCreateDt = classCreateDt;
	}

	@JSON
	@Override
	public Date getClassUpdateDt() {
		return _classUpdateDt;
	}

	@Override
	public void setClassUpdateDt(Date classUpdateDt) {
		_classUpdateDt = classUpdateDt;
	}

	@JSON
	@Override
	public String getVirtualClassCd() {
		if (_virtualClassCd == null) {
			return StringPool.BLANK;
		}
		else {
			return _virtualClassCd;
		}
	}

	@Override
	public void setVirtualClassCd(String virtualClassCd) {
		_virtualClassCd = virtualClassCd;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			VirtualLabClass.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public String[] getAvailableLanguageIds() {
		Set<String> availableLanguageIds = new TreeSet<String>();

		Map<Locale, String> classTitleMap = getClassTitleMap();

		for (Map.Entry<Locale, String> entry : classTitleMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> classDescriptionMap = getClassDescriptionMap();

		for (Map.Entry<Locale, String> entry : classDescriptionMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		return availableLanguageIds.toArray(new String[availableLanguageIds.size()]);
	}

	@Override
	public String getDefaultLanguageId() {
		String xml = getClassTitle();

		if (xml == null) {
			return StringPool.BLANK;
		}

		Locale defaultLocale = LocaleUtil.getDefault();

		return LocalizationUtil.getDefaultLanguageId(xml, defaultLocale);
	}

	@Override
	public void prepareLocalizedFieldsForImport() throws LocaleException {
		prepareLocalizedFieldsForImport(null);
	}

	@Override
	@SuppressWarnings("unused")
	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException {
		Locale defaultLocale = LocaleUtil.getDefault();

		String modelDefaultLanguageId = getDefaultLanguageId();

		String classTitle = getClassTitle(defaultLocale);

		if (Validator.isNull(classTitle)) {
			setClassTitle(getClassTitle(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setClassTitle(getClassTitle(defaultLocale), defaultLocale,
				defaultLocale);
		}

		String classDescription = getClassDescription(defaultLocale);

		if (Validator.isNull(classDescription)) {
			setClassDescription(getClassDescription(modelDefaultLanguageId),
				defaultLocale);
		}
		else {
			setClassDescription(getClassDescription(defaultLocale),
				defaultLocale, defaultLocale);
		}
	}

	@Override
	public VirtualLabClass toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (VirtualLabClass)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		VirtualLabClassImpl virtualLabClassImpl = new VirtualLabClassImpl();

		virtualLabClassImpl.setClassId(getClassId());
		virtualLabClassImpl.setClassTitle(getClassTitle());
		virtualLabClassImpl.setClassStartDt(getClassStartDt());
		virtualLabClassImpl.setClassEndDt(getClassEndDt());
		virtualLabClassImpl.setClassUseYn(getClassUseYn());
		virtualLabClassImpl.setClassDescription(getClassDescription());
		virtualLabClassImpl.setClassPersonnel(getClassPersonnel());
		virtualLabClassImpl.setClassCreateDt(getClassCreateDt());
		virtualLabClassImpl.setClassUpdateDt(getClassUpdateDt());
		virtualLabClassImpl.setVirtualClassCd(getVirtualClassCd());

		virtualLabClassImpl.resetOriginalValues();

		return virtualLabClassImpl;
	}

	@Override
	public int compareTo(VirtualLabClass virtualLabClass) {
		int value = 0;

		value = DateUtil.compareTo(getClassCreateDt(),
				virtualLabClass.getClassCreateDt());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof VirtualLabClass)) {
			return false;
		}

		VirtualLabClass virtualLabClass = (VirtualLabClass)obj;

		long primaryKey = virtualLabClass.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<VirtualLabClass> toCacheModel() {
		VirtualLabClassCacheModel virtualLabClassCacheModel = new VirtualLabClassCacheModel();

		virtualLabClassCacheModel.classId = getClassId();

		virtualLabClassCacheModel.classTitle = getClassTitle();

		String classTitle = virtualLabClassCacheModel.classTitle;

		if ((classTitle != null) && (classTitle.length() == 0)) {
			virtualLabClassCacheModel.classTitle = null;
		}

		virtualLabClassCacheModel.classStartDt = getClassStartDt();

		String classStartDt = virtualLabClassCacheModel.classStartDt;

		if ((classStartDt != null) && (classStartDt.length() == 0)) {
			virtualLabClassCacheModel.classStartDt = null;
		}

		virtualLabClassCacheModel.classEndDt = getClassEndDt();

		String classEndDt = virtualLabClassCacheModel.classEndDt;

		if ((classEndDt != null) && (classEndDt.length() == 0)) {
			virtualLabClassCacheModel.classEndDt = null;
		}

		virtualLabClassCacheModel.classUseYn = getClassUseYn();

		String classUseYn = virtualLabClassCacheModel.classUseYn;

		if ((classUseYn != null) && (classUseYn.length() == 0)) {
			virtualLabClassCacheModel.classUseYn = null;
		}

		virtualLabClassCacheModel.classDescription = getClassDescription();

		String classDescription = virtualLabClassCacheModel.classDescription;

		if ((classDescription != null) && (classDescription.length() == 0)) {
			virtualLabClassCacheModel.classDescription = null;
		}

		virtualLabClassCacheModel.classPersonnel = getClassPersonnel();

		Date classCreateDt = getClassCreateDt();

		if (classCreateDt != null) {
			virtualLabClassCacheModel.classCreateDt = classCreateDt.getTime();
		}
		else {
			virtualLabClassCacheModel.classCreateDt = Long.MIN_VALUE;
		}

		Date classUpdateDt = getClassUpdateDt();

		if (classUpdateDt != null) {
			virtualLabClassCacheModel.classUpdateDt = classUpdateDt.getTime();
		}
		else {
			virtualLabClassCacheModel.classUpdateDt = Long.MIN_VALUE;
		}

		virtualLabClassCacheModel.virtualClassCd = getVirtualClassCd();

		String virtualClassCd = virtualLabClassCacheModel.virtualClassCd;

		if ((virtualClassCd != null) && (virtualClassCd.length() == 0)) {
			virtualLabClassCacheModel.virtualClassCd = null;
		}

		return virtualLabClassCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(21);

		sb.append("{classId=");
		sb.append(getClassId());
		sb.append(", classTitle=");
		sb.append(getClassTitle());
		sb.append(", classStartDt=");
		sb.append(getClassStartDt());
		sb.append(", classEndDt=");
		sb.append(getClassEndDt());
		sb.append(", classUseYn=");
		sb.append(getClassUseYn());
		sb.append(", classDescription=");
		sb.append(getClassDescription());
		sb.append(", classPersonnel=");
		sb.append(getClassPersonnel());
		sb.append(", classCreateDt=");
		sb.append(getClassCreateDt());
		sb.append(", classUpdateDt=");
		sb.append(getClassUpdateDt());
		sb.append(", virtualClassCd=");
		sb.append(getVirtualClassCd());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(34);

		sb.append("<model><model-name>");
		sb.append("org.kisti.edison.virtuallaboratory.model.VirtualLabClass");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>classId</column-name><column-value><![CDATA[");
		sb.append(getClassId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>classTitle</column-name><column-value><![CDATA[");
		sb.append(getClassTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>classStartDt</column-name><column-value><![CDATA[");
		sb.append(getClassStartDt());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>classEndDt</column-name><column-value><![CDATA[");
		sb.append(getClassEndDt());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>classUseYn</column-name><column-value><![CDATA[");
		sb.append(getClassUseYn());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>classDescription</column-name><column-value><![CDATA[");
		sb.append(getClassDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>classPersonnel</column-name><column-value><![CDATA[");
		sb.append(getClassPersonnel());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>classCreateDt</column-name><column-value><![CDATA[");
		sb.append(getClassCreateDt());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>classUpdateDt</column-name><column-value><![CDATA[");
		sb.append(getClassUpdateDt());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>virtualClassCd</column-name><column-value><![CDATA[");
		sb.append(getVirtualClassCd());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = VirtualLabClass.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			VirtualLabClass.class
		};
	private long _classId;
	private String _classTitle;
	private String _classTitleCurrentLanguageId;
	private String _classStartDt;
	private String _classEndDt;
	private String _classUseYn;
	private String _classDescription;
	private String _classDescriptionCurrentLanguageId;
	private int _classPersonnel;
	private Date _classCreateDt;
	private Date _classUpdateDt;
	private String _virtualClassCd;
	private VirtualLabClass _escapedModel;
}
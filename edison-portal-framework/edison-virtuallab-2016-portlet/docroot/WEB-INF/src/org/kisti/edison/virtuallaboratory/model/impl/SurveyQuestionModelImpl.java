/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.kisti.edison.virtuallaboratory.model.impl;

import com.liferay.portal.LocaleException;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.LocaleUtil;
import com.liferay.portal.kernel.util.LocalizationUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.kernel.util.Validator;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import org.kisti.edison.virtuallaboratory.model.SurveyQuestion;
import org.kisti.edison.virtuallaboratory.model.SurveyQuestionModel;
import org.kisti.edison.virtuallaboratory.model.SurveyQuestionSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;

/**
 * The base model implementation for the SurveyQuestion service. Represents a row in the &quot;EDVIR_SurveyQuestion&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link org.kisti.edison.virtuallaboratory.model.SurveyQuestionModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link SurveyQuestionImpl}.
 * </p>
 *
 * @author EDISON
 * @see SurveyQuestionImpl
 * @see org.kisti.edison.virtuallaboratory.model.SurveyQuestion
 * @see org.kisti.edison.virtuallaboratory.model.SurveyQuestionModel
 * @generated
 */
@JSON(strict = true)
public class SurveyQuestionModelImpl extends BaseModelImpl<SurveyQuestion>
	implements SurveyQuestionModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a survey question model instance should use the {@link org.kisti.edison.virtuallaboratory.model.SurveyQuestion} interface instead.
	 */
	public static final String TABLE_NAME = "EDVIR_SurveyQuestion";
	public static final Object[][] TABLE_COLUMNS = {
			{ "questionSeqNo", Types.BIGINT },
			{ "questionDivCd", Types.VARCHAR },
			{ "questionTitle", Types.VARCHAR },
			{ "question1", Types.VARCHAR },
			{ "question2", Types.VARCHAR },
			{ "question3", Types.VARCHAR },
			{ "question4", Types.VARCHAR },
			{ "question5", Types.VARCHAR },
			{ "question6", Types.VARCHAR },
			{ "question7", Types.VARCHAR },
			{ "question8", Types.VARCHAR },
			{ "question9", Types.VARCHAR },
			{ "question10", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table EDVIR_SurveyQuestion (questionSeqNo LONG not null primary key,questionDivCd VARCHAR(75) null,questionTitle STRING null,question1 STRING null,question2 STRING null,question3 STRING null,question4 STRING null,question5 STRING null,question6 STRING null,question7 STRING null,question8 STRING null,question9 STRING null,question10 STRING null)";
	public static final String TABLE_SQL_DROP = "drop table EDVIR_SurveyQuestion";
	public static final String ORDER_BY_JPQL = " ORDER BY surveyQuestion.questionSeqNo DESC";
	public static final String ORDER_BY_SQL = " ORDER BY EDVIR_SurveyQuestion.questionSeqNo DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.org.kisti.edison.virtuallaboratory.model.SurveyQuestion"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.org.kisti.edison.virtuallaboratory.model.SurveyQuestion"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static SurveyQuestion toModel(SurveyQuestionSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		SurveyQuestion model = new SurveyQuestionImpl();

		model.setQuestionSeqNo(soapModel.getQuestionSeqNo());
		model.setQuestionDivCd(soapModel.getQuestionDivCd());
		model.setQuestionTitle(soapModel.getQuestionTitle());
		model.setQuestion1(soapModel.getQuestion1());
		model.setQuestion2(soapModel.getQuestion2());
		model.setQuestion3(soapModel.getQuestion3());
		model.setQuestion4(soapModel.getQuestion4());
		model.setQuestion5(soapModel.getQuestion5());
		model.setQuestion6(soapModel.getQuestion6());
		model.setQuestion7(soapModel.getQuestion7());
		model.setQuestion8(soapModel.getQuestion8());
		model.setQuestion9(soapModel.getQuestion9());
		model.setQuestion10(soapModel.getQuestion10());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<SurveyQuestion> toModels(SurveyQuestionSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<SurveyQuestion> models = new ArrayList<SurveyQuestion>(soapModels.length);

		for (SurveyQuestionSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final String MAPPING_TABLE_EDVIR_SURVEYS_SURVEYQUESTIONS_NAME = "EDVIR_Surveys_SurveyQuestions";
	public static final Object[][] MAPPING_TABLE_EDVIR_SURVEYS_SURVEYQUESTIONS_COLUMNS =
		{
			{ "surveySeqNo", Types.BIGINT },
			{ "questionSeqNo", Types.BIGINT }
		};
	public static final String MAPPING_TABLE_EDVIR_SURVEYS_SURVEYQUESTIONS_SQL_CREATE =
		"create table EDVIR_Surveys_SurveyQuestions (surveySeqNo LONG not null,questionSeqNo LONG not null,primary key (surveySeqNo, questionSeqNo))";
	public static final boolean FINDER_CACHE_ENABLED_EDVIR_SURVEYS_SURVEYQUESTIONS =
		GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.EDVIR_Surveys_SurveyQuestions"),
			true);
	public static final String MAPPING_TABLE_EDVIR_SURVEYQUESTIONS_SURVEYANSWERS_NAME =
		"EDVIR_SurveyQuestions_SurveyAnswers";
	public static final Object[][] MAPPING_TABLE_EDVIR_SURVEYQUESTIONS_SURVEYANSWERS_COLUMNS =
		{
			{ "SurveyAnswerId", Types.BIGINT },
			{ "questionSeqNo", Types.BIGINT }
		};
	public static final String MAPPING_TABLE_EDVIR_SURVEYQUESTIONS_SURVEYANSWERS_SQL_CREATE =
		"create table EDVIR_SurveyQuestions_SurveyAnswers (SurveyAnswerId LONG not null,questionSeqNo LONG not null,primary key (SurveyAnswerId, questionSeqNo))";
	public static final boolean FINDER_CACHE_ENABLED_EDVIR_SURVEYQUESTIONS_SURVEYANSWERS =
		GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.EDVIR_SurveyQuestions_SurveyAnswers"),
			true);
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.org.kisti.edison.virtuallaboratory.model.SurveyQuestion"));

	public SurveyQuestionModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _questionSeqNo;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setQuestionSeqNo(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _questionSeqNo;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return SurveyQuestion.class;
	}

	@Override
	public String getModelClassName() {
		return SurveyQuestion.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("questionSeqNo", getQuestionSeqNo());
		attributes.put("questionDivCd", getQuestionDivCd());
		attributes.put("questionTitle", getQuestionTitle());
		attributes.put("question1", getQuestion1());
		attributes.put("question2", getQuestion2());
		attributes.put("question3", getQuestion3());
		attributes.put("question4", getQuestion4());
		attributes.put("question5", getQuestion5());
		attributes.put("question6", getQuestion6());
		attributes.put("question7", getQuestion7());
		attributes.put("question8", getQuestion8());
		attributes.put("question9", getQuestion9());
		attributes.put("question10", getQuestion10());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long questionSeqNo = (Long)attributes.get("questionSeqNo");

		if (questionSeqNo != null) {
			setQuestionSeqNo(questionSeqNo);
		}

		String questionDivCd = (String)attributes.get("questionDivCd");

		if (questionDivCd != null) {
			setQuestionDivCd(questionDivCd);
		}

		String questionTitle = (String)attributes.get("questionTitle");

		if (questionTitle != null) {
			setQuestionTitle(questionTitle);
		}

		String question1 = (String)attributes.get("question1");

		if (question1 != null) {
			setQuestion1(question1);
		}

		String question2 = (String)attributes.get("question2");

		if (question2 != null) {
			setQuestion2(question2);
		}

		String question3 = (String)attributes.get("question3");

		if (question3 != null) {
			setQuestion3(question3);
		}

		String question4 = (String)attributes.get("question4");

		if (question4 != null) {
			setQuestion4(question4);
		}

		String question5 = (String)attributes.get("question5");

		if (question5 != null) {
			setQuestion5(question5);
		}

		String question6 = (String)attributes.get("question6");

		if (question6 != null) {
			setQuestion6(question6);
		}

		String question7 = (String)attributes.get("question7");

		if (question7 != null) {
			setQuestion7(question7);
		}

		String question8 = (String)attributes.get("question8");

		if (question8 != null) {
			setQuestion8(question8);
		}

		String question9 = (String)attributes.get("question9");

		if (question9 != null) {
			setQuestion9(question9);
		}

		String question10 = (String)attributes.get("question10");

		if (question10 != null) {
			setQuestion10(question10);
		}
	}

	@JSON
	@Override
	public long getQuestionSeqNo() {
		return _questionSeqNo;
	}

	@Override
	public void setQuestionSeqNo(long questionSeqNo) {
		_questionSeqNo = questionSeqNo;
	}

	@JSON
	@Override
	public String getQuestionDivCd() {
		if (_questionDivCd == null) {
			return StringPool.BLANK;
		}
		else {
			return _questionDivCd;
		}
	}

	@Override
	public void setQuestionDivCd(String questionDivCd) {
		_questionDivCd = questionDivCd;
	}

	@JSON
	@Override
	public String getQuestionTitle() {
		if (_questionTitle == null) {
			return StringPool.BLANK;
		}
		else {
			return _questionTitle;
		}
	}

	@Override
	public String getQuestionTitle(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getQuestionTitle(languageId);
	}

	@Override
	public String getQuestionTitle(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getQuestionTitle(languageId, useDefault);
	}

	@Override
	public String getQuestionTitle(String languageId) {
		return LocalizationUtil.getLocalization(getQuestionTitle(), languageId);
	}

	@Override
	public String getQuestionTitle(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(getQuestionTitle(), languageId,
			useDefault);
	}

	@Override
	public String getQuestionTitleCurrentLanguageId() {
		return _questionTitleCurrentLanguageId;
	}

	@JSON
	@Override
	public String getQuestionTitleCurrentValue() {
		Locale locale = getLocale(_questionTitleCurrentLanguageId);

		return getQuestionTitle(locale);
	}

	@Override
	public Map<Locale, String> getQuestionTitleMap() {
		return LocalizationUtil.getLocalizationMap(getQuestionTitle());
	}

	@Override
	public void setQuestionTitle(String questionTitle) {
		_questionTitle = questionTitle;
	}

	@Override
	public void setQuestionTitle(String questionTitle, Locale locale) {
		setQuestionTitle(questionTitle, locale, LocaleUtil.getDefault());
	}

	@Override
	public void setQuestionTitle(String questionTitle, Locale locale,
		Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(questionTitle)) {
			setQuestionTitle(LocalizationUtil.updateLocalization(
					getQuestionTitle(), "QuestionTitle", questionTitle,
					languageId, defaultLanguageId));
		}
		else {
			setQuestionTitle(LocalizationUtil.removeLocalization(
					getQuestionTitle(), "QuestionTitle", languageId));
		}
	}

	@Override
	public void setQuestionTitleCurrentLanguageId(String languageId) {
		_questionTitleCurrentLanguageId = languageId;
	}

	@Override
	public void setQuestionTitleMap(Map<Locale, String> questionTitleMap) {
		setQuestionTitleMap(questionTitleMap, LocaleUtil.getDefault());
	}

	@Override
	public void setQuestionTitleMap(Map<Locale, String> questionTitleMap,
		Locale defaultLocale) {
		if (questionTitleMap == null) {
			return;
		}

		setQuestionTitle(LocalizationUtil.updateLocalization(questionTitleMap,
				getQuestionTitle(), "QuestionTitle",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getQuestion1() {
		if (_question1 == null) {
			return StringPool.BLANK;
		}
		else {
			return _question1;
		}
	}

	@Override
	public String getQuestion1(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getQuestion1(languageId);
	}

	@Override
	public String getQuestion1(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getQuestion1(languageId, useDefault);
	}

	@Override
	public String getQuestion1(String languageId) {
		return LocalizationUtil.getLocalization(getQuestion1(), languageId);
	}

	@Override
	public String getQuestion1(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(getQuestion1(), languageId,
			useDefault);
	}

	@Override
	public String getQuestion1CurrentLanguageId() {
		return _question1CurrentLanguageId;
	}

	@JSON
	@Override
	public String getQuestion1CurrentValue() {
		Locale locale = getLocale(_question1CurrentLanguageId);

		return getQuestion1(locale);
	}

	@Override
	public Map<Locale, String> getQuestion1Map() {
		return LocalizationUtil.getLocalizationMap(getQuestion1());
	}

	@Override
	public void setQuestion1(String question1) {
		_question1 = question1;
	}

	@Override
	public void setQuestion1(String question1, Locale locale) {
		setQuestion1(question1, locale, LocaleUtil.getDefault());
	}

	@Override
	public void setQuestion1(String question1, Locale locale,
		Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(question1)) {
			setQuestion1(LocalizationUtil.updateLocalization(getQuestion1(),
					"Question1", question1, languageId, defaultLanguageId));
		}
		else {
			setQuestion1(LocalizationUtil.removeLocalization(getQuestion1(),
					"Question1", languageId));
		}
	}

	@Override
	public void setQuestion1CurrentLanguageId(String languageId) {
		_question1CurrentLanguageId = languageId;
	}

	@Override
	public void setQuestion1Map(Map<Locale, String> question1Map) {
		setQuestion1Map(question1Map, LocaleUtil.getDefault());
	}

	@Override
	public void setQuestion1Map(Map<Locale, String> question1Map,
		Locale defaultLocale) {
		if (question1Map == null) {
			return;
		}

		setQuestion1(LocalizationUtil.updateLocalization(question1Map,
				getQuestion1(), "Question1",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getQuestion2() {
		if (_question2 == null) {
			return StringPool.BLANK;
		}
		else {
			return _question2;
		}
	}

	@Override
	public String getQuestion2(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getQuestion2(languageId);
	}

	@Override
	public String getQuestion2(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getQuestion2(languageId, useDefault);
	}

	@Override
	public String getQuestion2(String languageId) {
		return LocalizationUtil.getLocalization(getQuestion2(), languageId);
	}

	@Override
	public String getQuestion2(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(getQuestion2(), languageId,
			useDefault);
	}

	@Override
	public String getQuestion2CurrentLanguageId() {
		return _question2CurrentLanguageId;
	}

	@JSON
	@Override
	public String getQuestion2CurrentValue() {
		Locale locale = getLocale(_question2CurrentLanguageId);

		return getQuestion2(locale);
	}

	@Override
	public Map<Locale, String> getQuestion2Map() {
		return LocalizationUtil.getLocalizationMap(getQuestion2());
	}

	@Override
	public void setQuestion2(String question2) {
		_question2 = question2;
	}

	@Override
	public void setQuestion2(String question2, Locale locale) {
		setQuestion2(question2, locale, LocaleUtil.getDefault());
	}

	@Override
	public void setQuestion2(String question2, Locale locale,
		Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(question2)) {
			setQuestion2(LocalizationUtil.updateLocalization(getQuestion2(),
					"Question2", question2, languageId, defaultLanguageId));
		}
		else {
			setQuestion2(LocalizationUtil.removeLocalization(getQuestion2(),
					"Question2", languageId));
		}
	}

	@Override
	public void setQuestion2CurrentLanguageId(String languageId) {
		_question2CurrentLanguageId = languageId;
	}

	@Override
	public void setQuestion2Map(Map<Locale, String> question2Map) {
		setQuestion2Map(question2Map, LocaleUtil.getDefault());
	}

	@Override
	public void setQuestion2Map(Map<Locale, String> question2Map,
		Locale defaultLocale) {
		if (question2Map == null) {
			return;
		}

		setQuestion2(LocalizationUtil.updateLocalization(question2Map,
				getQuestion2(), "Question2",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getQuestion3() {
		if (_question3 == null) {
			return StringPool.BLANK;
		}
		else {
			return _question3;
		}
	}

	@Override
	public String getQuestion3(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getQuestion3(languageId);
	}

	@Override
	public String getQuestion3(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getQuestion3(languageId, useDefault);
	}

	@Override
	public String getQuestion3(String languageId) {
		return LocalizationUtil.getLocalization(getQuestion3(), languageId);
	}

	@Override
	public String getQuestion3(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(getQuestion3(), languageId,
			useDefault);
	}

	@Override
	public String getQuestion3CurrentLanguageId() {
		return _question3CurrentLanguageId;
	}

	@JSON
	@Override
	public String getQuestion3CurrentValue() {
		Locale locale = getLocale(_question3CurrentLanguageId);

		return getQuestion3(locale);
	}

	@Override
	public Map<Locale, String> getQuestion3Map() {
		return LocalizationUtil.getLocalizationMap(getQuestion3());
	}

	@Override
	public void setQuestion3(String question3) {
		_question3 = question3;
	}

	@Override
	public void setQuestion3(String question3, Locale locale) {
		setQuestion3(question3, locale, LocaleUtil.getDefault());
	}

	@Override
	public void setQuestion3(String question3, Locale locale,
		Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(question3)) {
			setQuestion3(LocalizationUtil.updateLocalization(getQuestion3(),
					"Question3", question3, languageId, defaultLanguageId));
		}
		else {
			setQuestion3(LocalizationUtil.removeLocalization(getQuestion3(),
					"Question3", languageId));
		}
	}

	@Override
	public void setQuestion3CurrentLanguageId(String languageId) {
		_question3CurrentLanguageId = languageId;
	}

	@Override
	public void setQuestion3Map(Map<Locale, String> question3Map) {
		setQuestion3Map(question3Map, LocaleUtil.getDefault());
	}

	@Override
	public void setQuestion3Map(Map<Locale, String> question3Map,
		Locale defaultLocale) {
		if (question3Map == null) {
			return;
		}

		setQuestion3(LocalizationUtil.updateLocalization(question3Map,
				getQuestion3(), "Question3",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getQuestion4() {
		if (_question4 == null) {
			return StringPool.BLANK;
		}
		else {
			return _question4;
		}
	}

	@Override
	public String getQuestion4(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getQuestion4(languageId);
	}

	@Override
	public String getQuestion4(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getQuestion4(languageId, useDefault);
	}

	@Override
	public String getQuestion4(String languageId) {
		return LocalizationUtil.getLocalization(getQuestion4(), languageId);
	}

	@Override
	public String getQuestion4(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(getQuestion4(), languageId,
			useDefault);
	}

	@Override
	public String getQuestion4CurrentLanguageId() {
		return _question4CurrentLanguageId;
	}

	@JSON
	@Override
	public String getQuestion4CurrentValue() {
		Locale locale = getLocale(_question4CurrentLanguageId);

		return getQuestion4(locale);
	}

	@Override
	public Map<Locale, String> getQuestion4Map() {
		return LocalizationUtil.getLocalizationMap(getQuestion4());
	}

	@Override
	public void setQuestion4(String question4) {
		_question4 = question4;
	}

	@Override
	public void setQuestion4(String question4, Locale locale) {
		setQuestion4(question4, locale, LocaleUtil.getDefault());
	}

	@Override
	public void setQuestion4(String question4, Locale locale,
		Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(question4)) {
			setQuestion4(LocalizationUtil.updateLocalization(getQuestion4(),
					"Question4", question4, languageId, defaultLanguageId));
		}
		else {
			setQuestion4(LocalizationUtil.removeLocalization(getQuestion4(),
					"Question4", languageId));
		}
	}

	@Override
	public void setQuestion4CurrentLanguageId(String languageId) {
		_question4CurrentLanguageId = languageId;
	}

	@Override
	public void setQuestion4Map(Map<Locale, String> question4Map) {
		setQuestion4Map(question4Map, LocaleUtil.getDefault());
	}

	@Override
	public void setQuestion4Map(Map<Locale, String> question4Map,
		Locale defaultLocale) {
		if (question4Map == null) {
			return;
		}

		setQuestion4(LocalizationUtil.updateLocalization(question4Map,
				getQuestion4(), "Question4",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getQuestion5() {
		if (_question5 == null) {
			return StringPool.BLANK;
		}
		else {
			return _question5;
		}
	}

	@Override
	public String getQuestion5(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getQuestion5(languageId);
	}

	@Override
	public String getQuestion5(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getQuestion5(languageId, useDefault);
	}

	@Override
	public String getQuestion5(String languageId) {
		return LocalizationUtil.getLocalization(getQuestion5(), languageId);
	}

	@Override
	public String getQuestion5(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(getQuestion5(), languageId,
			useDefault);
	}

	@Override
	public String getQuestion5CurrentLanguageId() {
		return _question5CurrentLanguageId;
	}

	@JSON
	@Override
	public String getQuestion5CurrentValue() {
		Locale locale = getLocale(_question5CurrentLanguageId);

		return getQuestion5(locale);
	}

	@Override
	public Map<Locale, String> getQuestion5Map() {
		return LocalizationUtil.getLocalizationMap(getQuestion5());
	}

	@Override
	public void setQuestion5(String question5) {
		_question5 = question5;
	}

	@Override
	public void setQuestion5(String question5, Locale locale) {
		setQuestion5(question5, locale, LocaleUtil.getDefault());
	}

	@Override
	public void setQuestion5(String question5, Locale locale,
		Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(question5)) {
			setQuestion5(LocalizationUtil.updateLocalization(getQuestion5(),
					"Question5", question5, languageId, defaultLanguageId));
		}
		else {
			setQuestion5(LocalizationUtil.removeLocalization(getQuestion5(),
					"Question5", languageId));
		}
	}

	@Override
	public void setQuestion5CurrentLanguageId(String languageId) {
		_question5CurrentLanguageId = languageId;
	}

	@Override
	public void setQuestion5Map(Map<Locale, String> question5Map) {
		setQuestion5Map(question5Map, LocaleUtil.getDefault());
	}

	@Override
	public void setQuestion5Map(Map<Locale, String> question5Map,
		Locale defaultLocale) {
		if (question5Map == null) {
			return;
		}

		setQuestion5(LocalizationUtil.updateLocalization(question5Map,
				getQuestion5(), "Question5",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getQuestion6() {
		if (_question6 == null) {
			return StringPool.BLANK;
		}
		else {
			return _question6;
		}
	}

	@Override
	public String getQuestion6(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getQuestion6(languageId);
	}

	@Override
	public String getQuestion6(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getQuestion6(languageId, useDefault);
	}

	@Override
	public String getQuestion6(String languageId) {
		return LocalizationUtil.getLocalization(getQuestion6(), languageId);
	}

	@Override
	public String getQuestion6(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(getQuestion6(), languageId,
			useDefault);
	}

	@Override
	public String getQuestion6CurrentLanguageId() {
		return _question6CurrentLanguageId;
	}

	@JSON
	@Override
	public String getQuestion6CurrentValue() {
		Locale locale = getLocale(_question6CurrentLanguageId);

		return getQuestion6(locale);
	}

	@Override
	public Map<Locale, String> getQuestion6Map() {
		return LocalizationUtil.getLocalizationMap(getQuestion6());
	}

	@Override
	public void setQuestion6(String question6) {
		_question6 = question6;
	}

	@Override
	public void setQuestion6(String question6, Locale locale) {
		setQuestion6(question6, locale, LocaleUtil.getDefault());
	}

	@Override
	public void setQuestion6(String question6, Locale locale,
		Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(question6)) {
			setQuestion6(LocalizationUtil.updateLocalization(getQuestion6(),
					"Question6", question6, languageId, defaultLanguageId));
		}
		else {
			setQuestion6(LocalizationUtil.removeLocalization(getQuestion6(),
					"Question6", languageId));
		}
	}

	@Override
	public void setQuestion6CurrentLanguageId(String languageId) {
		_question6CurrentLanguageId = languageId;
	}

	@Override
	public void setQuestion6Map(Map<Locale, String> question6Map) {
		setQuestion6Map(question6Map, LocaleUtil.getDefault());
	}

	@Override
	public void setQuestion6Map(Map<Locale, String> question6Map,
		Locale defaultLocale) {
		if (question6Map == null) {
			return;
		}

		setQuestion6(LocalizationUtil.updateLocalization(question6Map,
				getQuestion6(), "Question6",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getQuestion7() {
		if (_question7 == null) {
			return StringPool.BLANK;
		}
		else {
			return _question7;
		}
	}

	@Override
	public String getQuestion7(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getQuestion7(languageId);
	}

	@Override
	public String getQuestion7(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getQuestion7(languageId, useDefault);
	}

	@Override
	public String getQuestion7(String languageId) {
		return LocalizationUtil.getLocalization(getQuestion7(), languageId);
	}

	@Override
	public String getQuestion7(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(getQuestion7(), languageId,
			useDefault);
	}

	@Override
	public String getQuestion7CurrentLanguageId() {
		return _question7CurrentLanguageId;
	}

	@JSON
	@Override
	public String getQuestion7CurrentValue() {
		Locale locale = getLocale(_question7CurrentLanguageId);

		return getQuestion7(locale);
	}

	@Override
	public Map<Locale, String> getQuestion7Map() {
		return LocalizationUtil.getLocalizationMap(getQuestion7());
	}

	@Override
	public void setQuestion7(String question7) {
		_question7 = question7;
	}

	@Override
	public void setQuestion7(String question7, Locale locale) {
		setQuestion7(question7, locale, LocaleUtil.getDefault());
	}

	@Override
	public void setQuestion7(String question7, Locale locale,
		Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(question7)) {
			setQuestion7(LocalizationUtil.updateLocalization(getQuestion7(),
					"Question7", question7, languageId, defaultLanguageId));
		}
		else {
			setQuestion7(LocalizationUtil.removeLocalization(getQuestion7(),
					"Question7", languageId));
		}
	}

	@Override
	public void setQuestion7CurrentLanguageId(String languageId) {
		_question7CurrentLanguageId = languageId;
	}

	@Override
	public void setQuestion7Map(Map<Locale, String> question7Map) {
		setQuestion7Map(question7Map, LocaleUtil.getDefault());
	}

	@Override
	public void setQuestion7Map(Map<Locale, String> question7Map,
		Locale defaultLocale) {
		if (question7Map == null) {
			return;
		}

		setQuestion7(LocalizationUtil.updateLocalization(question7Map,
				getQuestion7(), "Question7",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getQuestion8() {
		if (_question8 == null) {
			return StringPool.BLANK;
		}
		else {
			return _question8;
		}
	}

	@Override
	public String getQuestion8(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getQuestion8(languageId);
	}

	@Override
	public String getQuestion8(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getQuestion8(languageId, useDefault);
	}

	@Override
	public String getQuestion8(String languageId) {
		return LocalizationUtil.getLocalization(getQuestion8(), languageId);
	}

	@Override
	public String getQuestion8(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(getQuestion8(), languageId,
			useDefault);
	}

	@Override
	public String getQuestion8CurrentLanguageId() {
		return _question8CurrentLanguageId;
	}

	@JSON
	@Override
	public String getQuestion8CurrentValue() {
		Locale locale = getLocale(_question8CurrentLanguageId);

		return getQuestion8(locale);
	}

	@Override
	public Map<Locale, String> getQuestion8Map() {
		return LocalizationUtil.getLocalizationMap(getQuestion8());
	}

	@Override
	public void setQuestion8(String question8) {
		_question8 = question8;
	}

	@Override
	public void setQuestion8(String question8, Locale locale) {
		setQuestion8(question8, locale, LocaleUtil.getDefault());
	}

	@Override
	public void setQuestion8(String question8, Locale locale,
		Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(question8)) {
			setQuestion8(LocalizationUtil.updateLocalization(getQuestion8(),
					"Question8", question8, languageId, defaultLanguageId));
		}
		else {
			setQuestion8(LocalizationUtil.removeLocalization(getQuestion8(),
					"Question8", languageId));
		}
	}

	@Override
	public void setQuestion8CurrentLanguageId(String languageId) {
		_question8CurrentLanguageId = languageId;
	}

	@Override
	public void setQuestion8Map(Map<Locale, String> question8Map) {
		setQuestion8Map(question8Map, LocaleUtil.getDefault());
	}

	@Override
	public void setQuestion8Map(Map<Locale, String> question8Map,
		Locale defaultLocale) {
		if (question8Map == null) {
			return;
		}

		setQuestion8(LocalizationUtil.updateLocalization(question8Map,
				getQuestion8(), "Question8",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getQuestion9() {
		if (_question9 == null) {
			return StringPool.BLANK;
		}
		else {
			return _question9;
		}
	}

	@Override
	public String getQuestion9(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getQuestion9(languageId);
	}

	@Override
	public String getQuestion9(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getQuestion9(languageId, useDefault);
	}

	@Override
	public String getQuestion9(String languageId) {
		return LocalizationUtil.getLocalization(getQuestion9(), languageId);
	}

	@Override
	public String getQuestion9(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(getQuestion9(), languageId,
			useDefault);
	}

	@Override
	public String getQuestion9CurrentLanguageId() {
		return _question9CurrentLanguageId;
	}

	@JSON
	@Override
	public String getQuestion9CurrentValue() {
		Locale locale = getLocale(_question9CurrentLanguageId);

		return getQuestion9(locale);
	}

	@Override
	public Map<Locale, String> getQuestion9Map() {
		return LocalizationUtil.getLocalizationMap(getQuestion9());
	}

	@Override
	public void setQuestion9(String question9) {
		_question9 = question9;
	}

	@Override
	public void setQuestion9(String question9, Locale locale) {
		setQuestion9(question9, locale, LocaleUtil.getDefault());
	}

	@Override
	public void setQuestion9(String question9, Locale locale,
		Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(question9)) {
			setQuestion9(LocalizationUtil.updateLocalization(getQuestion9(),
					"Question9", question9, languageId, defaultLanguageId));
		}
		else {
			setQuestion9(LocalizationUtil.removeLocalization(getQuestion9(),
					"Question9", languageId));
		}
	}

	@Override
	public void setQuestion9CurrentLanguageId(String languageId) {
		_question9CurrentLanguageId = languageId;
	}

	@Override
	public void setQuestion9Map(Map<Locale, String> question9Map) {
		setQuestion9Map(question9Map, LocaleUtil.getDefault());
	}

	@Override
	public void setQuestion9Map(Map<Locale, String> question9Map,
		Locale defaultLocale) {
		if (question9Map == null) {
			return;
		}

		setQuestion9(LocalizationUtil.updateLocalization(question9Map,
				getQuestion9(), "Question9",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getQuestion10() {
		if (_question10 == null) {
			return StringPool.BLANK;
		}
		else {
			return _question10;
		}
	}

	@Override
	public String getQuestion10(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getQuestion10(languageId);
	}

	@Override
	public String getQuestion10(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getQuestion10(languageId, useDefault);
	}

	@Override
	public String getQuestion10(String languageId) {
		return LocalizationUtil.getLocalization(getQuestion10(), languageId);
	}

	@Override
	public String getQuestion10(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(getQuestion10(), languageId,
			useDefault);
	}

	@Override
	public String getQuestion10CurrentLanguageId() {
		return _question10CurrentLanguageId;
	}

	@JSON
	@Override
	public String getQuestion10CurrentValue() {
		Locale locale = getLocale(_question10CurrentLanguageId);

		return getQuestion10(locale);
	}

	@Override
	public Map<Locale, String> getQuestion10Map() {
		return LocalizationUtil.getLocalizationMap(getQuestion10());
	}

	@Override
	public void setQuestion10(String question10) {
		_question10 = question10;
	}

	@Override
	public void setQuestion10(String question10, Locale locale) {
		setQuestion10(question10, locale, LocaleUtil.getDefault());
	}

	@Override
	public void setQuestion10(String question10, Locale locale,
		Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(question10)) {
			setQuestion10(LocalizationUtil.updateLocalization(getQuestion10(),
					"Question10", question10, languageId, defaultLanguageId));
		}
		else {
			setQuestion10(LocalizationUtil.removeLocalization(getQuestion10(),
					"Question10", languageId));
		}
	}

	@Override
	public void setQuestion10CurrentLanguageId(String languageId) {
		_question10CurrentLanguageId = languageId;
	}

	@Override
	public void setQuestion10Map(Map<Locale, String> question10Map) {
		setQuestion10Map(question10Map, LocaleUtil.getDefault());
	}

	@Override
	public void setQuestion10Map(Map<Locale, String> question10Map,
		Locale defaultLocale) {
		if (question10Map == null) {
			return;
		}

		setQuestion10(LocalizationUtil.updateLocalization(question10Map,
				getQuestion10(), "Question10",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			SurveyQuestion.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public String[] getAvailableLanguageIds() {
		Set<String> availableLanguageIds = new TreeSet<String>();

		Map<Locale, String> questionTitleMap = getQuestionTitleMap();

		for (Map.Entry<Locale, String> entry : questionTitleMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> question1Map = getQuestion1Map();

		for (Map.Entry<Locale, String> entry : question1Map.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> question2Map = getQuestion2Map();

		for (Map.Entry<Locale, String> entry : question2Map.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> question3Map = getQuestion3Map();

		for (Map.Entry<Locale, String> entry : question3Map.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> question4Map = getQuestion4Map();

		for (Map.Entry<Locale, String> entry : question4Map.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> question5Map = getQuestion5Map();

		for (Map.Entry<Locale, String> entry : question5Map.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> question6Map = getQuestion6Map();

		for (Map.Entry<Locale, String> entry : question6Map.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> question7Map = getQuestion7Map();

		for (Map.Entry<Locale, String> entry : question7Map.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> question8Map = getQuestion8Map();

		for (Map.Entry<Locale, String> entry : question8Map.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> question9Map = getQuestion9Map();

		for (Map.Entry<Locale, String> entry : question9Map.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> question10Map = getQuestion10Map();

		for (Map.Entry<Locale, String> entry : question10Map.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		return availableLanguageIds.toArray(new String[availableLanguageIds.size()]);
	}

	@Override
	public String getDefaultLanguageId() {
		String xml = getQuestionTitle();

		if (xml == null) {
			return StringPool.BLANK;
		}

		Locale defaultLocale = LocaleUtil.getDefault();

		return LocalizationUtil.getDefaultLanguageId(xml, defaultLocale);
	}

	@Override
	public void prepareLocalizedFieldsForImport() throws LocaleException {
		prepareLocalizedFieldsForImport(null);
	}

	@Override
	@SuppressWarnings("unused")
	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException {
		Locale defaultLocale = LocaleUtil.getDefault();

		String modelDefaultLanguageId = getDefaultLanguageId();

		String questionTitle = getQuestionTitle(defaultLocale);

		if (Validator.isNull(questionTitle)) {
			setQuestionTitle(getQuestionTitle(modelDefaultLanguageId),
				defaultLocale);
		}
		else {
			setQuestionTitle(getQuestionTitle(defaultLocale), defaultLocale,
				defaultLocale);
		}

		String question1 = getQuestion1(defaultLocale);

		if (Validator.isNull(question1)) {
			setQuestion1(getQuestion1(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setQuestion1(getQuestion1(defaultLocale), defaultLocale,
				defaultLocale);
		}

		String question2 = getQuestion2(defaultLocale);

		if (Validator.isNull(question2)) {
			setQuestion2(getQuestion2(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setQuestion2(getQuestion2(defaultLocale), defaultLocale,
				defaultLocale);
		}

		String question3 = getQuestion3(defaultLocale);

		if (Validator.isNull(question3)) {
			setQuestion3(getQuestion3(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setQuestion3(getQuestion3(defaultLocale), defaultLocale,
				defaultLocale);
		}

		String question4 = getQuestion4(defaultLocale);

		if (Validator.isNull(question4)) {
			setQuestion4(getQuestion4(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setQuestion4(getQuestion4(defaultLocale), defaultLocale,
				defaultLocale);
		}

		String question5 = getQuestion5(defaultLocale);

		if (Validator.isNull(question5)) {
			setQuestion5(getQuestion5(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setQuestion5(getQuestion5(defaultLocale), defaultLocale,
				defaultLocale);
		}

		String question6 = getQuestion6(defaultLocale);

		if (Validator.isNull(question6)) {
			setQuestion6(getQuestion6(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setQuestion6(getQuestion6(defaultLocale), defaultLocale,
				defaultLocale);
		}

		String question7 = getQuestion7(defaultLocale);

		if (Validator.isNull(question7)) {
			setQuestion7(getQuestion7(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setQuestion7(getQuestion7(defaultLocale), defaultLocale,
				defaultLocale);
		}

		String question8 = getQuestion8(defaultLocale);

		if (Validator.isNull(question8)) {
			setQuestion8(getQuestion8(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setQuestion8(getQuestion8(defaultLocale), defaultLocale,
				defaultLocale);
		}

		String question9 = getQuestion9(defaultLocale);

		if (Validator.isNull(question9)) {
			setQuestion9(getQuestion9(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setQuestion9(getQuestion9(defaultLocale), defaultLocale,
				defaultLocale);
		}

		String question10 = getQuestion10(defaultLocale);

		if (Validator.isNull(question10)) {
			setQuestion10(getQuestion10(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setQuestion10(getQuestion10(defaultLocale), defaultLocale,
				defaultLocale);
		}
	}

	@Override
	public SurveyQuestion toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (SurveyQuestion)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		SurveyQuestionImpl surveyQuestionImpl = new SurveyQuestionImpl();

		surveyQuestionImpl.setQuestionSeqNo(getQuestionSeqNo());
		surveyQuestionImpl.setQuestionDivCd(getQuestionDivCd());
		surveyQuestionImpl.setQuestionTitle(getQuestionTitle());
		surveyQuestionImpl.setQuestion1(getQuestion1());
		surveyQuestionImpl.setQuestion2(getQuestion2());
		surveyQuestionImpl.setQuestion3(getQuestion3());
		surveyQuestionImpl.setQuestion4(getQuestion4());
		surveyQuestionImpl.setQuestion5(getQuestion5());
		surveyQuestionImpl.setQuestion6(getQuestion6());
		surveyQuestionImpl.setQuestion7(getQuestion7());
		surveyQuestionImpl.setQuestion8(getQuestion8());
		surveyQuestionImpl.setQuestion9(getQuestion9());
		surveyQuestionImpl.setQuestion10(getQuestion10());

		surveyQuestionImpl.resetOriginalValues();

		return surveyQuestionImpl;
	}

	@Override
	public int compareTo(SurveyQuestion surveyQuestion) {
		int value = 0;

		if (getQuestionSeqNo() < surveyQuestion.getQuestionSeqNo()) {
			value = -1;
		}
		else if (getQuestionSeqNo() > surveyQuestion.getQuestionSeqNo()) {
			value = 1;
		}
		else {
			value = 0;
		}

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof SurveyQuestion)) {
			return false;
		}

		SurveyQuestion surveyQuestion = (SurveyQuestion)obj;

		long primaryKey = surveyQuestion.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<SurveyQuestion> toCacheModel() {
		SurveyQuestionCacheModel surveyQuestionCacheModel = new SurveyQuestionCacheModel();

		surveyQuestionCacheModel.questionSeqNo = getQuestionSeqNo();

		surveyQuestionCacheModel.questionDivCd = getQuestionDivCd();

		String questionDivCd = surveyQuestionCacheModel.questionDivCd;

		if ((questionDivCd != null) && (questionDivCd.length() == 0)) {
			surveyQuestionCacheModel.questionDivCd = null;
		}

		surveyQuestionCacheModel.questionTitle = getQuestionTitle();

		String questionTitle = surveyQuestionCacheModel.questionTitle;

		if ((questionTitle != null) && (questionTitle.length() == 0)) {
			surveyQuestionCacheModel.questionTitle = null;
		}

		surveyQuestionCacheModel.question1 = getQuestion1();

		String question1 = surveyQuestionCacheModel.question1;

		if ((question1 != null) && (question1.length() == 0)) {
			surveyQuestionCacheModel.question1 = null;
		}

		surveyQuestionCacheModel.question2 = getQuestion2();

		String question2 = surveyQuestionCacheModel.question2;

		if ((question2 != null) && (question2.length() == 0)) {
			surveyQuestionCacheModel.question2 = null;
		}

		surveyQuestionCacheModel.question3 = getQuestion3();

		String question3 = surveyQuestionCacheModel.question3;

		if ((question3 != null) && (question3.length() == 0)) {
			surveyQuestionCacheModel.question3 = null;
		}

		surveyQuestionCacheModel.question4 = getQuestion4();

		String question4 = surveyQuestionCacheModel.question4;

		if ((question4 != null) && (question4.length() == 0)) {
			surveyQuestionCacheModel.question4 = null;
		}

		surveyQuestionCacheModel.question5 = getQuestion5();

		String question5 = surveyQuestionCacheModel.question5;

		if ((question5 != null) && (question5.length() == 0)) {
			surveyQuestionCacheModel.question5 = null;
		}

		surveyQuestionCacheModel.question6 = getQuestion6();

		String question6 = surveyQuestionCacheModel.question6;

		if ((question6 != null) && (question6.length() == 0)) {
			surveyQuestionCacheModel.question6 = null;
		}

		surveyQuestionCacheModel.question7 = getQuestion7();

		String question7 = surveyQuestionCacheModel.question7;

		if ((question7 != null) && (question7.length() == 0)) {
			surveyQuestionCacheModel.question7 = null;
		}

		surveyQuestionCacheModel.question8 = getQuestion8();

		String question8 = surveyQuestionCacheModel.question8;

		if ((question8 != null) && (question8.length() == 0)) {
			surveyQuestionCacheModel.question8 = null;
		}

		surveyQuestionCacheModel.question9 = getQuestion9();

		String question9 = surveyQuestionCacheModel.question9;

		if ((question9 != null) && (question9.length() == 0)) {
			surveyQuestionCacheModel.question9 = null;
		}

		surveyQuestionCacheModel.question10 = getQuestion10();

		String question10 = surveyQuestionCacheModel.question10;

		if ((question10 != null) && (question10.length() == 0)) {
			surveyQuestionCacheModel.question10 = null;
		}

		return surveyQuestionCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(27);

		sb.append("{questionSeqNo=");
		sb.append(getQuestionSeqNo());
		sb.append(", questionDivCd=");
		sb.append(getQuestionDivCd());
		sb.append(", questionTitle=");
		sb.append(getQuestionTitle());
		sb.append(", question1=");
		sb.append(getQuestion1());
		sb.append(", question2=");
		sb.append(getQuestion2());
		sb.append(", question3=");
		sb.append(getQuestion3());
		sb.append(", question4=");
		sb.append(getQuestion4());
		sb.append(", question5=");
		sb.append(getQuestion5());
		sb.append(", question6=");
		sb.append(getQuestion6());
		sb.append(", question7=");
		sb.append(getQuestion7());
		sb.append(", question8=");
		sb.append(getQuestion8());
		sb.append(", question9=");
		sb.append(getQuestion9());
		sb.append(", question10=");
		sb.append(getQuestion10());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(43);

		sb.append("<model><model-name>");
		sb.append("org.kisti.edison.virtuallaboratory.model.SurveyQuestion");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>questionSeqNo</column-name><column-value><![CDATA[");
		sb.append(getQuestionSeqNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>questionDivCd</column-name><column-value><![CDATA[");
		sb.append(getQuestionDivCd());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>questionTitle</column-name><column-value><![CDATA[");
		sb.append(getQuestionTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>question1</column-name><column-value><![CDATA[");
		sb.append(getQuestion1());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>question2</column-name><column-value><![CDATA[");
		sb.append(getQuestion2());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>question3</column-name><column-value><![CDATA[");
		sb.append(getQuestion3());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>question4</column-name><column-value><![CDATA[");
		sb.append(getQuestion4());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>question5</column-name><column-value><![CDATA[");
		sb.append(getQuestion5());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>question6</column-name><column-value><![CDATA[");
		sb.append(getQuestion6());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>question7</column-name><column-value><![CDATA[");
		sb.append(getQuestion7());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>question8</column-name><column-value><![CDATA[");
		sb.append(getQuestion8());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>question9</column-name><column-value><![CDATA[");
		sb.append(getQuestion9());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>question10</column-name><column-value><![CDATA[");
		sb.append(getQuestion10());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = SurveyQuestion.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			SurveyQuestion.class
		};
	private long _questionSeqNo;
	private String _questionDivCd;
	private String _questionTitle;
	private String _questionTitleCurrentLanguageId;
	private String _question1;
	private String _question1CurrentLanguageId;
	private String _question2;
	private String _question2CurrentLanguageId;
	private String _question3;
	private String _question3CurrentLanguageId;
	private String _question4;
	private String _question4CurrentLanguageId;
	private String _question5;
	private String _question5CurrentLanguageId;
	private String _question6;
	private String _question6CurrentLanguageId;
	private String _question7;
	private String _question7CurrentLanguageId;
	private String _question8;
	private String _question8CurrentLanguageId;
	private String _question9;
	private String _question9CurrentLanguageId;
	private String _question10;
	private String _question10CurrentLanguageId;
	private SurveyQuestion _escapedModel;
}
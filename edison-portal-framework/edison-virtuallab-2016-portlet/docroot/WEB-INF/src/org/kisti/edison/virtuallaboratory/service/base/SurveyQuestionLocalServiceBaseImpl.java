/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.kisti.edison.virtuallaboratory.service.base;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.persistence.UserPersistence;

import org.kisti.edison.virtuallaboratory.model.SurveyQuestion;
import org.kisti.edison.virtuallaboratory.service.SurveyQuestionLocalService;
import org.kisti.edison.virtuallaboratory.service.persistence.SurveyAnswerPersistence;
import org.kisti.edison.virtuallaboratory.service.persistence.SurveyFinder;
import org.kisti.edison.virtuallaboratory.service.persistence.SurveyPersistence;
import org.kisti.edison.virtuallaboratory.service.persistence.SurveyQuestionPersistence;
import org.kisti.edison.virtuallaboratory.service.persistence.VirtualLabClassFinder;
import org.kisti.edison.virtuallaboratory.service.persistence.VirtualLabClassPersistence;
import org.kisti.edison.virtuallaboratory.service.persistence.VirtualLabClassScienceAppFinder;
import org.kisti.edison.virtuallaboratory.service.persistence.VirtualLabClassScienceAppPersistence;
import org.kisti.edison.virtuallaboratory.service.persistence.VirtualLabFinder;
import org.kisti.edison.virtuallaboratory.service.persistence.VirtualLabPersistence;
import org.kisti.edison.virtuallaboratory.service.persistence.VirtualLabUserFinder;
import org.kisti.edison.virtuallaboratory.service.persistence.VirtualLabUserPersistence;
import org.kisti.edison.virtuallaboratory.service.persistence.VirtualLabUserTempPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the survey question local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link org.kisti.edison.virtuallaboratory.service.impl.SurveyQuestionLocalServiceImpl}.
 * </p>
 *
 * @author EDISON
 * @see org.kisti.edison.virtuallaboratory.service.impl.SurveyQuestionLocalServiceImpl
 * @see org.kisti.edison.virtuallaboratory.service.SurveyQuestionLocalServiceUtil
 * @generated
 */
public abstract class SurveyQuestionLocalServiceBaseImpl
	extends BaseLocalServiceImpl implements SurveyQuestionLocalService,
		IdentifiableBean {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link org.kisti.edison.virtuallaboratory.service.SurveyQuestionLocalServiceUtil} to access the survey question local service.
	 */

	/**
	 * Adds the survey question to the database. Also notifies the appropriate model listeners.
	 *
	 * @param surveyQuestion the survey question
	 * @return the survey question that was added
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public SurveyQuestion addSurveyQuestion(SurveyQuestion surveyQuestion)
		throws SystemException {
		surveyQuestion.setNew(true);

		return surveyQuestionPersistence.update(surveyQuestion);
	}

	/**
	 * Creates a new survey question with the primary key. Does not add the survey question to the database.
	 *
	 * @param questionSeqNo the primary key for the new survey question
	 * @return the new survey question
	 */
	@Override
	public SurveyQuestion createSurveyQuestion(long questionSeqNo) {
		return surveyQuestionPersistence.create(questionSeqNo);
	}

	/**
	 * Deletes the survey question with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param questionSeqNo the primary key of the survey question
	 * @return the survey question that was removed
	 * @throws PortalException if a survey question with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public SurveyQuestion deleteSurveyQuestion(long questionSeqNo)
		throws PortalException, SystemException {
		return surveyQuestionPersistence.remove(questionSeqNo);
	}

	/**
	 * Deletes the survey question from the database. Also notifies the appropriate model listeners.
	 *
	 * @param surveyQuestion the survey question
	 * @return the survey question that was removed
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public SurveyQuestion deleteSurveyQuestion(SurveyQuestion surveyQuestion)
		throws SystemException {
		return surveyQuestionPersistence.remove(surveyQuestion);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(SurveyQuestion.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery)
		throws SystemException {
		return surveyQuestionPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link org.kisti.edison.virtuallaboratory.model.impl.SurveyQuestionModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
		throws SystemException {
		return surveyQuestionPersistence.findWithDynamicQuery(dynamicQuery,
			start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link org.kisti.edison.virtuallaboratory.model.impl.SurveyQuestionModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator orderByComparator) throws SystemException {
		return surveyQuestionPersistence.findWithDynamicQuery(dynamicQuery,
			start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery)
		throws SystemException {
		return surveyQuestionPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) throws SystemException {
		return surveyQuestionPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public SurveyQuestion fetchSurveyQuestion(long questionSeqNo)
		throws SystemException {
		return surveyQuestionPersistence.fetchByPrimaryKey(questionSeqNo);
	}

	/**
	 * Returns the survey question with the primary key.
	 *
	 * @param questionSeqNo the primary key of the survey question
	 * @return the survey question
	 * @throws PortalException if a survey question with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public SurveyQuestion getSurveyQuestion(long questionSeqNo)
		throws PortalException, SystemException {
		return surveyQuestionPersistence.findByPrimaryKey(questionSeqNo);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException, SystemException {
		return surveyQuestionPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the survey questions.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link org.kisti.edison.virtuallaboratory.model.impl.SurveyQuestionModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of survey questions
	 * @param end the upper bound of the range of survey questions (not inclusive)
	 * @return the range of survey questions
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public List<SurveyQuestion> getSurveyQuestions(int start, int end)
		throws SystemException {
		return surveyQuestionPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of survey questions.
	 *
	 * @return the number of survey questions
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public int getSurveyQuestionsCount() throws SystemException {
		return surveyQuestionPersistence.countAll();
	}

	/**
	 * Updates the survey question in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param surveyQuestion the survey question
	 * @return the survey question that was updated
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public SurveyQuestion updateSurveyQuestion(SurveyQuestion surveyQuestion)
		throws SystemException {
		return surveyQuestionPersistence.update(surveyQuestion);
	}

	/**
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public void addSurveySurveyQuestion(long surveySeqNo, long questionSeqNo)
		throws SystemException {
		surveyPersistence.addSurveyQuestion(surveySeqNo, questionSeqNo);
	}

	/**
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public void addSurveySurveyQuestion(long surveySeqNo,
		SurveyQuestion surveyQuestion) throws SystemException {
		surveyPersistence.addSurveyQuestion(surveySeqNo, surveyQuestion);
	}

	/**
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public void addSurveySurveyQuestions(long surveySeqNo, long[] questionSeqNos)
		throws SystemException {
		surveyPersistence.addSurveyQuestions(surveySeqNo, questionSeqNos);
	}

	/**
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public void addSurveySurveyQuestions(long surveySeqNo,
		List<SurveyQuestion> SurveyQuestions) throws SystemException {
		surveyPersistence.addSurveyQuestions(surveySeqNo, SurveyQuestions);
	}

	/**
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public void clearSurveySurveyQuestions(long surveySeqNo)
		throws SystemException {
		surveyPersistence.clearSurveyQuestions(surveySeqNo);
	}

	/**
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public void deleteSurveySurveyQuestion(long surveySeqNo, long questionSeqNo)
		throws SystemException {
		surveyPersistence.removeSurveyQuestion(surveySeqNo, questionSeqNo);
	}

	/**
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public void deleteSurveySurveyQuestion(long surveySeqNo,
		SurveyQuestion surveyQuestion) throws SystemException {
		surveyPersistence.removeSurveyQuestion(surveySeqNo, surveyQuestion);
	}

	/**
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public void deleteSurveySurveyQuestions(long surveySeqNo,
		long[] questionSeqNos) throws SystemException {
		surveyPersistence.removeSurveyQuestions(surveySeqNo, questionSeqNos);
	}

	/**
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public void deleteSurveySurveyQuestions(long surveySeqNo,
		List<SurveyQuestion> SurveyQuestions) throws SystemException {
		surveyPersistence.removeSurveyQuestions(surveySeqNo, SurveyQuestions);
	}

	/**
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public List<SurveyQuestion> getSurveySurveyQuestions(long surveySeqNo)
		throws SystemException {
		return surveyPersistence.getSurveyQuestions(surveySeqNo);
	}

	/**
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public List<SurveyQuestion> getSurveySurveyQuestions(long surveySeqNo,
		int start, int end) throws SystemException {
		return surveyPersistence.getSurveyQuestions(surveySeqNo, start, end);
	}

	/**
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public List<SurveyQuestion> getSurveySurveyQuestions(long surveySeqNo,
		int start, int end, OrderByComparator orderByComparator)
		throws SystemException {
		return surveyPersistence.getSurveyQuestions(surveySeqNo, start, end,
			orderByComparator);
	}

	/**
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public int getSurveySurveyQuestionsCount(long surveySeqNo)
		throws SystemException {
		return surveyPersistence.getSurveyQuestionsSize(surveySeqNo);
	}

	/**
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public boolean hasSurveySurveyQuestion(long surveySeqNo, long questionSeqNo)
		throws SystemException {
		return surveyPersistence.containsSurveyQuestion(surveySeqNo,
			questionSeqNo);
	}

	/**
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public boolean hasSurveySurveyQuestions(long surveySeqNo)
		throws SystemException {
		return surveyPersistence.containsSurveyQuestions(surveySeqNo);
	}

	/**
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public void setSurveySurveyQuestions(long surveySeqNo, long[] questionSeqNos)
		throws SystemException {
		surveyPersistence.setSurveyQuestions(surveySeqNo, questionSeqNos);
	}

	/**
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public void addSurveyAnswerSurveyQuestion(long SurveyAnswerId,
		long questionSeqNo) throws SystemException {
		surveyAnswerPersistence.addSurveyQuestion(SurveyAnswerId, questionSeqNo);
	}

	/**
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public void addSurveyAnswerSurveyQuestion(long SurveyAnswerId,
		SurveyQuestion surveyQuestion) throws SystemException {
		surveyAnswerPersistence.addSurveyQuestion(SurveyAnswerId, surveyQuestion);
	}

	/**
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public void addSurveyAnswerSurveyQuestions(long SurveyAnswerId,
		long[] questionSeqNos) throws SystemException {
		surveyAnswerPersistence.addSurveyQuestions(SurveyAnswerId,
			questionSeqNos);
	}

	/**
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public void addSurveyAnswerSurveyQuestions(long SurveyAnswerId,
		List<SurveyQuestion> SurveyQuestions) throws SystemException {
		surveyAnswerPersistence.addSurveyQuestions(SurveyAnswerId,
			SurveyQuestions);
	}

	/**
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public void clearSurveyAnswerSurveyQuestions(long SurveyAnswerId)
		throws SystemException {
		surveyAnswerPersistence.clearSurveyQuestions(SurveyAnswerId);
	}

	/**
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public void deleteSurveyAnswerSurveyQuestion(long SurveyAnswerId,
		long questionSeqNo) throws SystemException {
		surveyAnswerPersistence.removeSurveyQuestion(SurveyAnswerId,
			questionSeqNo);
	}

	/**
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public void deleteSurveyAnswerSurveyQuestion(long SurveyAnswerId,
		SurveyQuestion surveyQuestion) throws SystemException {
		surveyAnswerPersistence.removeSurveyQuestion(SurveyAnswerId,
			surveyQuestion);
	}

	/**
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public void deleteSurveyAnswerSurveyQuestions(long SurveyAnswerId,
		long[] questionSeqNos) throws SystemException {
		surveyAnswerPersistence.removeSurveyQuestions(SurveyAnswerId,
			questionSeqNos);
	}

	/**
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public void deleteSurveyAnswerSurveyQuestions(long SurveyAnswerId,
		List<SurveyQuestion> SurveyQuestions) throws SystemException {
		surveyAnswerPersistence.removeSurveyQuestions(SurveyAnswerId,
			SurveyQuestions);
	}

	/**
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public List<SurveyQuestion> getSurveyAnswerSurveyQuestions(
		long SurveyAnswerId) throws SystemException {
		return surveyAnswerPersistence.getSurveyQuestions(SurveyAnswerId);
	}

	/**
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public List<SurveyQuestion> getSurveyAnswerSurveyQuestions(
		long SurveyAnswerId, int start, int end) throws SystemException {
		return surveyAnswerPersistence.getSurveyQuestions(SurveyAnswerId,
			start, end);
	}

	/**
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public List<SurveyQuestion> getSurveyAnswerSurveyQuestions(
		long SurveyAnswerId, int start, int end,
		OrderByComparator orderByComparator) throws SystemException {
		return surveyAnswerPersistence.getSurveyQuestions(SurveyAnswerId,
			start, end, orderByComparator);
	}

	/**
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public int getSurveyAnswerSurveyQuestionsCount(long SurveyAnswerId)
		throws SystemException {
		return surveyAnswerPersistence.getSurveyQuestionsSize(SurveyAnswerId);
	}

	/**
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public boolean hasSurveyAnswerSurveyQuestion(long SurveyAnswerId,
		long questionSeqNo) throws SystemException {
		return surveyAnswerPersistence.containsSurveyQuestion(SurveyAnswerId,
			questionSeqNo);
	}

	/**
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public boolean hasSurveyAnswerSurveyQuestions(long SurveyAnswerId)
		throws SystemException {
		return surveyAnswerPersistence.containsSurveyQuestions(SurveyAnswerId);
	}

	/**
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public void setSurveyAnswerSurveyQuestions(long SurveyAnswerId,
		long[] questionSeqNos) throws SystemException {
		surveyAnswerPersistence.setSurveyQuestions(SurveyAnswerId,
			questionSeqNos);
	}

	/**
	 * Returns the survey local service.
	 *
	 * @return the survey local service
	 */
	public org.kisti.edison.virtuallaboratory.service.SurveyLocalService getSurveyLocalService() {
		return surveyLocalService;
	}

	/**
	 * Sets the survey local service.
	 *
	 * @param surveyLocalService the survey local service
	 */
	public void setSurveyLocalService(
		org.kisti.edison.virtuallaboratory.service.SurveyLocalService surveyLocalService) {
		this.surveyLocalService = surveyLocalService;
	}

	/**
	 * Returns the survey remote service.
	 *
	 * @return the survey remote service
	 */
	public org.kisti.edison.virtuallaboratory.service.SurveyService getSurveyService() {
		return surveyService;
	}

	/**
	 * Sets the survey remote service.
	 *
	 * @param surveyService the survey remote service
	 */
	public void setSurveyService(
		org.kisti.edison.virtuallaboratory.service.SurveyService surveyService) {
		this.surveyService = surveyService;
	}

	/**
	 * Returns the survey persistence.
	 *
	 * @return the survey persistence
	 */
	public SurveyPersistence getSurveyPersistence() {
		return surveyPersistence;
	}

	/**
	 * Sets the survey persistence.
	 *
	 * @param surveyPersistence the survey persistence
	 */
	public void setSurveyPersistence(SurveyPersistence surveyPersistence) {
		this.surveyPersistence = surveyPersistence;
	}

	/**
	 * Returns the survey finder.
	 *
	 * @return the survey finder
	 */
	public SurveyFinder getSurveyFinder() {
		return surveyFinder;
	}

	/**
	 * Sets the survey finder.
	 *
	 * @param surveyFinder the survey finder
	 */
	public void setSurveyFinder(SurveyFinder surveyFinder) {
		this.surveyFinder = surveyFinder;
	}

	/**
	 * Returns the survey answer local service.
	 *
	 * @return the survey answer local service
	 */
	public org.kisti.edison.virtuallaboratory.service.SurveyAnswerLocalService getSurveyAnswerLocalService() {
		return surveyAnswerLocalService;
	}

	/**
	 * Sets the survey answer local service.
	 *
	 * @param surveyAnswerLocalService the survey answer local service
	 */
	public void setSurveyAnswerLocalService(
		org.kisti.edison.virtuallaboratory.service.SurveyAnswerLocalService surveyAnswerLocalService) {
		this.surveyAnswerLocalService = surveyAnswerLocalService;
	}

	/**
	 * Returns the survey answer remote service.
	 *
	 * @return the survey answer remote service
	 */
	public org.kisti.edison.virtuallaboratory.service.SurveyAnswerService getSurveyAnswerService() {
		return surveyAnswerService;
	}

	/**
	 * Sets the survey answer remote service.
	 *
	 * @param surveyAnswerService the survey answer remote service
	 */
	public void setSurveyAnswerService(
		org.kisti.edison.virtuallaboratory.service.SurveyAnswerService surveyAnswerService) {
		this.surveyAnswerService = surveyAnswerService;
	}

	/**
	 * Returns the survey answer persistence.
	 *
	 * @return the survey answer persistence
	 */
	public SurveyAnswerPersistence getSurveyAnswerPersistence() {
		return surveyAnswerPersistence;
	}

	/**
	 * Sets the survey answer persistence.
	 *
	 * @param surveyAnswerPersistence the survey answer persistence
	 */
	public void setSurveyAnswerPersistence(
		SurveyAnswerPersistence surveyAnswerPersistence) {
		this.surveyAnswerPersistence = surveyAnswerPersistence;
	}

	/**
	 * Returns the survey question local service.
	 *
	 * @return the survey question local service
	 */
	public org.kisti.edison.virtuallaboratory.service.SurveyQuestionLocalService getSurveyQuestionLocalService() {
		return surveyQuestionLocalService;
	}

	/**
	 * Sets the survey question local service.
	 *
	 * @param surveyQuestionLocalService the survey question local service
	 */
	public void setSurveyQuestionLocalService(
		org.kisti.edison.virtuallaboratory.service.SurveyQuestionLocalService surveyQuestionLocalService) {
		this.surveyQuestionLocalService = surveyQuestionLocalService;
	}

	/**
	 * Returns the survey question remote service.
	 *
	 * @return the survey question remote service
	 */
	public org.kisti.edison.virtuallaboratory.service.SurveyQuestionService getSurveyQuestionService() {
		return surveyQuestionService;
	}

	/**
	 * Sets the survey question remote service.
	 *
	 * @param surveyQuestionService the survey question remote service
	 */
	public void setSurveyQuestionService(
		org.kisti.edison.virtuallaboratory.service.SurveyQuestionService surveyQuestionService) {
		this.surveyQuestionService = surveyQuestionService;
	}

	/**
	 * Returns the survey question persistence.
	 *
	 * @return the survey question persistence
	 */
	public SurveyQuestionPersistence getSurveyQuestionPersistence() {
		return surveyQuestionPersistence;
	}

	/**
	 * Sets the survey question persistence.
	 *
	 * @param surveyQuestionPersistence the survey question persistence
	 */
	public void setSurveyQuestionPersistence(
		SurveyQuestionPersistence surveyQuestionPersistence) {
		this.surveyQuestionPersistence = surveyQuestionPersistence;
	}

	/**
	 * Returns the virtual lab local service.
	 *
	 * @return the virtual lab local service
	 */
	public org.kisti.edison.virtuallaboratory.service.VirtualLabLocalService getVirtualLabLocalService() {
		return virtualLabLocalService;
	}

	/**
	 * Sets the virtual lab local service.
	 *
	 * @param virtualLabLocalService the virtual lab local service
	 */
	public void setVirtualLabLocalService(
		org.kisti.edison.virtuallaboratory.service.VirtualLabLocalService virtualLabLocalService) {
		this.virtualLabLocalService = virtualLabLocalService;
	}

	/**
	 * Returns the virtual lab remote service.
	 *
	 * @return the virtual lab remote service
	 */
	public org.kisti.edison.virtuallaboratory.service.VirtualLabService getVirtualLabService() {
		return virtualLabService;
	}

	/**
	 * Sets the virtual lab remote service.
	 *
	 * @param virtualLabService the virtual lab remote service
	 */
	public void setVirtualLabService(
		org.kisti.edison.virtuallaboratory.service.VirtualLabService virtualLabService) {
		this.virtualLabService = virtualLabService;
	}

	/**
	 * Returns the virtual lab persistence.
	 *
	 * @return the virtual lab persistence
	 */
	public VirtualLabPersistence getVirtualLabPersistence() {
		return virtualLabPersistence;
	}

	/**
	 * Sets the virtual lab persistence.
	 *
	 * @param virtualLabPersistence the virtual lab persistence
	 */
	public void setVirtualLabPersistence(
		VirtualLabPersistence virtualLabPersistence) {
		this.virtualLabPersistence = virtualLabPersistence;
	}

	/**
	 * Returns the virtual lab finder.
	 *
	 * @return the virtual lab finder
	 */
	public VirtualLabFinder getVirtualLabFinder() {
		return virtualLabFinder;
	}

	/**
	 * Sets the virtual lab finder.
	 *
	 * @param virtualLabFinder the virtual lab finder
	 */
	public void setVirtualLabFinder(VirtualLabFinder virtualLabFinder) {
		this.virtualLabFinder = virtualLabFinder;
	}

	/**
	 * Returns the virtual lab class local service.
	 *
	 * @return the virtual lab class local service
	 */
	public org.kisti.edison.virtuallaboratory.service.VirtualLabClassLocalService getVirtualLabClassLocalService() {
		return virtualLabClassLocalService;
	}

	/**
	 * Sets the virtual lab class local service.
	 *
	 * @param virtualLabClassLocalService the virtual lab class local service
	 */
	public void setVirtualLabClassLocalService(
		org.kisti.edison.virtuallaboratory.service.VirtualLabClassLocalService virtualLabClassLocalService) {
		this.virtualLabClassLocalService = virtualLabClassLocalService;
	}

	/**
	 * Returns the virtual lab class remote service.
	 *
	 * @return the virtual lab class remote service
	 */
	public org.kisti.edison.virtuallaboratory.service.VirtualLabClassService getVirtualLabClassService() {
		return virtualLabClassService;
	}

	/**
	 * Sets the virtual lab class remote service.
	 *
	 * @param virtualLabClassService the virtual lab class remote service
	 */
	public void setVirtualLabClassService(
		org.kisti.edison.virtuallaboratory.service.VirtualLabClassService virtualLabClassService) {
		this.virtualLabClassService = virtualLabClassService;
	}

	/**
	 * Returns the virtual lab class persistence.
	 *
	 * @return the virtual lab class persistence
	 */
	public VirtualLabClassPersistence getVirtualLabClassPersistence() {
		return virtualLabClassPersistence;
	}

	/**
	 * Sets the virtual lab class persistence.
	 *
	 * @param virtualLabClassPersistence the virtual lab class persistence
	 */
	public void setVirtualLabClassPersistence(
		VirtualLabClassPersistence virtualLabClassPersistence) {
		this.virtualLabClassPersistence = virtualLabClassPersistence;
	}

	/**
	 * Returns the virtual lab class finder.
	 *
	 * @return the virtual lab class finder
	 */
	public VirtualLabClassFinder getVirtualLabClassFinder() {
		return virtualLabClassFinder;
	}

	/**
	 * Sets the virtual lab class finder.
	 *
	 * @param virtualLabClassFinder the virtual lab class finder
	 */
	public void setVirtualLabClassFinder(
		VirtualLabClassFinder virtualLabClassFinder) {
		this.virtualLabClassFinder = virtualLabClassFinder;
	}

	/**
	 * Returns the virtual lab class science app local service.
	 *
	 * @return the virtual lab class science app local service
	 */
	public org.kisti.edison.virtuallaboratory.service.VirtualLabClassScienceAppLocalService getVirtualLabClassScienceAppLocalService() {
		return virtualLabClassScienceAppLocalService;
	}

	/**
	 * Sets the virtual lab class science app local service.
	 *
	 * @param virtualLabClassScienceAppLocalService the virtual lab class science app local service
	 */
	public void setVirtualLabClassScienceAppLocalService(
		org.kisti.edison.virtuallaboratory.service.VirtualLabClassScienceAppLocalService virtualLabClassScienceAppLocalService) {
		this.virtualLabClassScienceAppLocalService = virtualLabClassScienceAppLocalService;
	}

	/**
	 * Returns the virtual lab class science app remote service.
	 *
	 * @return the virtual lab class science app remote service
	 */
	public org.kisti.edison.virtuallaboratory.service.VirtualLabClassScienceAppService getVirtualLabClassScienceAppService() {
		return virtualLabClassScienceAppService;
	}

	/**
	 * Sets the virtual lab class science app remote service.
	 *
	 * @param virtualLabClassScienceAppService the virtual lab class science app remote service
	 */
	public void setVirtualLabClassScienceAppService(
		org.kisti.edison.virtuallaboratory.service.VirtualLabClassScienceAppService virtualLabClassScienceAppService) {
		this.virtualLabClassScienceAppService = virtualLabClassScienceAppService;
	}

	/**
	 * Returns the virtual lab class science app persistence.
	 *
	 * @return the virtual lab class science app persistence
	 */
	public VirtualLabClassScienceAppPersistence getVirtualLabClassScienceAppPersistence() {
		return virtualLabClassScienceAppPersistence;
	}

	/**
	 * Sets the virtual lab class science app persistence.
	 *
	 * @param virtualLabClassScienceAppPersistence the virtual lab class science app persistence
	 */
	public void setVirtualLabClassScienceAppPersistence(
		VirtualLabClassScienceAppPersistence virtualLabClassScienceAppPersistence) {
		this.virtualLabClassScienceAppPersistence = virtualLabClassScienceAppPersistence;
	}

	/**
	 * Returns the virtual lab class science app finder.
	 *
	 * @return the virtual lab class science app finder
	 */
	public VirtualLabClassScienceAppFinder getVirtualLabClassScienceAppFinder() {
		return virtualLabClassScienceAppFinder;
	}

	/**
	 * Sets the virtual lab class science app finder.
	 *
	 * @param virtualLabClassScienceAppFinder the virtual lab class science app finder
	 */
	public void setVirtualLabClassScienceAppFinder(
		VirtualLabClassScienceAppFinder virtualLabClassScienceAppFinder) {
		this.virtualLabClassScienceAppFinder = virtualLabClassScienceAppFinder;
	}

	/**
	 * Returns the virtual lab user local service.
	 *
	 * @return the virtual lab user local service
	 */
	public org.kisti.edison.virtuallaboratory.service.VirtualLabUserLocalService getVirtualLabUserLocalService() {
		return virtualLabUserLocalService;
	}

	/**
	 * Sets the virtual lab user local service.
	 *
	 * @param virtualLabUserLocalService the virtual lab user local service
	 */
	public void setVirtualLabUserLocalService(
		org.kisti.edison.virtuallaboratory.service.VirtualLabUserLocalService virtualLabUserLocalService) {
		this.virtualLabUserLocalService = virtualLabUserLocalService;
	}

	/**
	 * Returns the virtual lab user remote service.
	 *
	 * @return the virtual lab user remote service
	 */
	public org.kisti.edison.virtuallaboratory.service.VirtualLabUserService getVirtualLabUserService() {
		return virtualLabUserService;
	}

	/**
	 * Sets the virtual lab user remote service.
	 *
	 * @param virtualLabUserService the virtual lab user remote service
	 */
	public void setVirtualLabUserService(
		org.kisti.edison.virtuallaboratory.service.VirtualLabUserService virtualLabUserService) {
		this.virtualLabUserService = virtualLabUserService;
	}

	/**
	 * Returns the virtual lab user persistence.
	 *
	 * @return the virtual lab user persistence
	 */
	public VirtualLabUserPersistence getVirtualLabUserPersistence() {
		return virtualLabUserPersistence;
	}

	/**
	 * Sets the virtual lab user persistence.
	 *
	 * @param virtualLabUserPersistence the virtual lab user persistence
	 */
	public void setVirtualLabUserPersistence(
		VirtualLabUserPersistence virtualLabUserPersistence) {
		this.virtualLabUserPersistence = virtualLabUserPersistence;
	}

	/**
	 * Returns the virtual lab user finder.
	 *
	 * @return the virtual lab user finder
	 */
	public VirtualLabUserFinder getVirtualLabUserFinder() {
		return virtualLabUserFinder;
	}

	/**
	 * Sets the virtual lab user finder.
	 *
	 * @param virtualLabUserFinder the virtual lab user finder
	 */
	public void setVirtualLabUserFinder(
		VirtualLabUserFinder virtualLabUserFinder) {
		this.virtualLabUserFinder = virtualLabUserFinder;
	}

	/**
	 * Returns the virtual lab user temp local service.
	 *
	 * @return the virtual lab user temp local service
	 */
	public org.kisti.edison.virtuallaboratory.service.VirtualLabUserTempLocalService getVirtualLabUserTempLocalService() {
		return virtualLabUserTempLocalService;
	}

	/**
	 * Sets the virtual lab user temp local service.
	 *
	 * @param virtualLabUserTempLocalService the virtual lab user temp local service
	 */
	public void setVirtualLabUserTempLocalService(
		org.kisti.edison.virtuallaboratory.service.VirtualLabUserTempLocalService virtualLabUserTempLocalService) {
		this.virtualLabUserTempLocalService = virtualLabUserTempLocalService;
	}

	/**
	 * Returns the virtual lab user temp remote service.
	 *
	 * @return the virtual lab user temp remote service
	 */
	public org.kisti.edison.virtuallaboratory.service.VirtualLabUserTempService getVirtualLabUserTempService() {
		return virtualLabUserTempService;
	}

	/**
	 * Sets the virtual lab user temp remote service.
	 *
	 * @param virtualLabUserTempService the virtual lab user temp remote service
	 */
	public void setVirtualLabUserTempService(
		org.kisti.edison.virtuallaboratory.service.VirtualLabUserTempService virtualLabUserTempService) {
		this.virtualLabUserTempService = virtualLabUserTempService;
	}

	/**
	 * Returns the virtual lab user temp persistence.
	 *
	 * @return the virtual lab user temp persistence
	 */
	public VirtualLabUserTempPersistence getVirtualLabUserTempPersistence() {
		return virtualLabUserTempPersistence;
	}

	/**
	 * Sets the virtual lab user temp persistence.
	 *
	 * @param virtualLabUserTempPersistence the virtual lab user temp persistence
	 */
	public void setVirtualLabUserTempPersistence(
		VirtualLabUserTempPersistence virtualLabUserTempPersistence) {
		this.virtualLabUserTempPersistence = virtualLabUserTempPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user remote service.
	 *
	 * @return the user remote service
	 */
	public com.liferay.portal.service.UserService getUserService() {
		return userService;
	}

	/**
	 * Sets the user remote service.
	 *
	 * @param userService the user remote service
	 */
	public void setUserService(
		com.liferay.portal.service.UserService userService) {
		this.userService = userService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		Class<?> clazz = getClass();

		_classLoader = clazz.getClassLoader();

		PersistedModelLocalServiceRegistryUtil.register("org.kisti.edison.virtuallaboratory.model.SurveyQuestion",
			surveyQuestionLocalService);
	}

	public void destroy() {
		PersistedModelLocalServiceRegistryUtil.unregister(
			"org.kisti.edison.virtuallaboratory.model.SurveyQuestion");
	}

	/**
	 * Returns the Spring bean ID for this bean.
	 *
	 * @return the Spring bean ID for this bean
	 */
	@Override
	public String getBeanIdentifier() {
		return _beanIdentifier;
	}

	/**
	 * Sets the Spring bean ID for this bean.
	 *
	 * @param beanIdentifier the Spring bean ID for this bean
	 */
	@Override
	public void setBeanIdentifier(String beanIdentifier) {
		_beanIdentifier = beanIdentifier;
	}

	@Override
	public Object invokeMethod(String name, String[] parameterTypes,
		Object[] arguments) throws Throwable {
		Thread currentThread = Thread.currentThread();

		ClassLoader contextClassLoader = currentThread.getContextClassLoader();

		if (contextClassLoader != _classLoader) {
			currentThread.setContextClassLoader(_classLoader);
		}

		try {
			return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
		}
		finally {
			if (contextClassLoader != _classLoader) {
				currentThread.setContextClassLoader(contextClassLoader);
			}
		}
	}

	protected Class<?> getModelClass() {
		return SurveyQuestion.class;
	}

	protected String getModelClassName() {
		return SurveyQuestion.class.getName();
	}

	/**
	 * Performs an SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) throws SystemException {
		try {
			DataSource dataSource = surveyQuestionPersistence.getDataSource();

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql, new int[0]);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = org.kisti.edison.virtuallaboratory.service.SurveyLocalService.class)
	protected org.kisti.edison.virtuallaboratory.service.SurveyLocalService surveyLocalService;
	@BeanReference(type = org.kisti.edison.virtuallaboratory.service.SurveyService.class)
	protected org.kisti.edison.virtuallaboratory.service.SurveyService surveyService;
	@BeanReference(type = SurveyPersistence.class)
	protected SurveyPersistence surveyPersistence;
	@BeanReference(type = SurveyFinder.class)
	protected SurveyFinder surveyFinder;
	@BeanReference(type = org.kisti.edison.virtuallaboratory.service.SurveyAnswerLocalService.class)
	protected org.kisti.edison.virtuallaboratory.service.SurveyAnswerLocalService surveyAnswerLocalService;
	@BeanReference(type = org.kisti.edison.virtuallaboratory.service.SurveyAnswerService.class)
	protected org.kisti.edison.virtuallaboratory.service.SurveyAnswerService surveyAnswerService;
	@BeanReference(type = SurveyAnswerPersistence.class)
	protected SurveyAnswerPersistence surveyAnswerPersistence;
	@BeanReference(type = org.kisti.edison.virtuallaboratory.service.SurveyQuestionLocalService.class)
	protected org.kisti.edison.virtuallaboratory.service.SurveyQuestionLocalService surveyQuestionLocalService;
	@BeanReference(type = org.kisti.edison.virtuallaboratory.service.SurveyQuestionService.class)
	protected org.kisti.edison.virtuallaboratory.service.SurveyQuestionService surveyQuestionService;
	@BeanReference(type = SurveyQuestionPersistence.class)
	protected SurveyQuestionPersistence surveyQuestionPersistence;
	@BeanReference(type = org.kisti.edison.virtuallaboratory.service.VirtualLabLocalService.class)
	protected org.kisti.edison.virtuallaboratory.service.VirtualLabLocalService virtualLabLocalService;
	@BeanReference(type = org.kisti.edison.virtuallaboratory.service.VirtualLabService.class)
	protected org.kisti.edison.virtuallaboratory.service.VirtualLabService virtualLabService;
	@BeanReference(type = VirtualLabPersistence.class)
	protected VirtualLabPersistence virtualLabPersistence;
	@BeanReference(type = VirtualLabFinder.class)
	protected VirtualLabFinder virtualLabFinder;
	@BeanReference(type = org.kisti.edison.virtuallaboratory.service.VirtualLabClassLocalService.class)
	protected org.kisti.edison.virtuallaboratory.service.VirtualLabClassLocalService virtualLabClassLocalService;
	@BeanReference(type = org.kisti.edison.virtuallaboratory.service.VirtualLabClassService.class)
	protected org.kisti.edison.virtuallaboratory.service.VirtualLabClassService virtualLabClassService;
	@BeanReference(type = VirtualLabClassPersistence.class)
	protected VirtualLabClassPersistence virtualLabClassPersistence;
	@BeanReference(type = VirtualLabClassFinder.class)
	protected VirtualLabClassFinder virtualLabClassFinder;
	@BeanReference(type = org.kisti.edison.virtuallaboratory.service.VirtualLabClassScienceAppLocalService.class)
	protected org.kisti.edison.virtuallaboratory.service.VirtualLabClassScienceAppLocalService virtualLabClassScienceAppLocalService;
	@BeanReference(type = org.kisti.edison.virtuallaboratory.service.VirtualLabClassScienceAppService.class)
	protected org.kisti.edison.virtuallaboratory.service.VirtualLabClassScienceAppService virtualLabClassScienceAppService;
	@BeanReference(type = VirtualLabClassScienceAppPersistence.class)
	protected VirtualLabClassScienceAppPersistence virtualLabClassScienceAppPersistence;
	@BeanReference(type = VirtualLabClassScienceAppFinder.class)
	protected VirtualLabClassScienceAppFinder virtualLabClassScienceAppFinder;
	@BeanReference(type = org.kisti.edison.virtuallaboratory.service.VirtualLabUserLocalService.class)
	protected org.kisti.edison.virtuallaboratory.service.VirtualLabUserLocalService virtualLabUserLocalService;
	@BeanReference(type = org.kisti.edison.virtuallaboratory.service.VirtualLabUserService.class)
	protected org.kisti.edison.virtuallaboratory.service.VirtualLabUserService virtualLabUserService;
	@BeanReference(type = VirtualLabUserPersistence.class)
	protected VirtualLabUserPersistence virtualLabUserPersistence;
	@BeanReference(type = VirtualLabUserFinder.class)
	protected VirtualLabUserFinder virtualLabUserFinder;
	@BeanReference(type = org.kisti.edison.virtuallaboratory.service.VirtualLabUserTempLocalService.class)
	protected org.kisti.edison.virtuallaboratory.service.VirtualLabUserTempLocalService virtualLabUserTempLocalService;
	@BeanReference(type = org.kisti.edison.virtuallaboratory.service.VirtualLabUserTempService.class)
	protected org.kisti.edison.virtuallaboratory.service.VirtualLabUserTempService virtualLabUserTempService;
	@BeanReference(type = VirtualLabUserTempPersistence.class)
	protected VirtualLabUserTempPersistence virtualLabUserTempPersistence;
	@BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
	protected com.liferay.counter.service.CounterLocalService counterLocalService;
	@BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
	protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
	@BeanReference(type = com.liferay.portal.service.UserLocalService.class)
	protected com.liferay.portal.service.UserLocalService userLocalService;
	@BeanReference(type = com.liferay.portal.service.UserService.class)
	protected com.liferay.portal.service.UserService userService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	private String _beanIdentifier;
	private ClassLoader _classLoader;
	private SurveyQuestionLocalServiceClpInvoker _clpInvoker = new SurveyQuestionLocalServiceClpInvoker();
}
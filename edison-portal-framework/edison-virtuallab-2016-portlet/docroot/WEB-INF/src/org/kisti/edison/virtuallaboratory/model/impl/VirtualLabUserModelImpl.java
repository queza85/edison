/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.kisti.edison.virtuallaboratory.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import org.kisti.edison.virtuallaboratory.model.VirtualLabUser;
import org.kisti.edison.virtuallaboratory.model.VirtualLabUserModel;
import org.kisti.edison.virtuallaboratory.model.VirtualLabUserSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the VirtualLabUser service. Represents a row in the &quot;EDVIR_VirtualLabUser&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link org.kisti.edison.virtuallaboratory.model.VirtualLabUserModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link VirtualLabUserImpl}.
 * </p>
 *
 * @author EDISON
 * @see VirtualLabUserImpl
 * @see org.kisti.edison.virtuallaboratory.model.VirtualLabUser
 * @see org.kisti.edison.virtuallaboratory.model.VirtualLabUserModel
 * @generated
 */
@JSON(strict = true)
public class VirtualLabUserModelImpl extends BaseModelImpl<VirtualLabUser>
	implements VirtualLabUserModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a virtual lab user model instance should use the {@link org.kisti.edison.virtuallaboratory.model.VirtualLabUser} interface instead.
	 */
	public static final String TABLE_NAME = "EDVIR_VirtualLabUser";
	public static final Object[][] TABLE_COLUMNS = {
			{ "virtualLabUserId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userStudentNumber", Types.VARCHAR },
			{ "authRole", Types.VARCHAR },
			{ "userUseYn", Types.VARCHAR },
			{ "requestSort", Types.VARCHAR },
			{ "processNote", Types.VARCHAR },
			{ "processDate", Types.TIMESTAMP },
			{ "createDt", Types.TIMESTAMP },
			{ "updateDt", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table EDVIR_VirtualLabUser (virtualLabUserId LONG not null primary key,userId LONG,userStudentNumber VARCHAR(75) null,authRole VARCHAR(75) null,userUseYn VARCHAR(75) null,requestSort VARCHAR(75) null,processNote VARCHAR(75) null,processDate DATE null,createDt DATE null,updateDt DATE null)";
	public static final String TABLE_SQL_DROP = "drop table EDVIR_VirtualLabUser";
	public static final String ORDER_BY_JPQL = " ORDER BY virtualLabUser.createDt DESC";
	public static final String ORDER_BY_SQL = " ORDER BY EDVIR_VirtualLabUser.createDt DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.org.kisti.edison.virtuallaboratory.model.VirtualLabUser"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.org.kisti.edison.virtuallaboratory.model.VirtualLabUser"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static VirtualLabUser toModel(VirtualLabUserSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		VirtualLabUser model = new VirtualLabUserImpl();

		model.setVirtualLabUserId(soapModel.getVirtualLabUserId());
		model.setUserId(soapModel.getUserId());
		model.setUserStudentNumber(soapModel.getUserStudentNumber());
		model.setAuthRole(soapModel.getAuthRole());
		model.setUserUseYn(soapModel.getUserUseYn());
		model.setRequestSort(soapModel.getRequestSort());
		model.setProcessNote(soapModel.getProcessNote());
		model.setProcessDate(soapModel.getProcessDate());
		model.setCreateDt(soapModel.getCreateDt());
		model.setUpdateDt(soapModel.getUpdateDt());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<VirtualLabUser> toModels(VirtualLabUserSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<VirtualLabUser> models = new ArrayList<VirtualLabUser>(soapModels.length);

		for (VirtualLabUserSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final String MAPPING_TABLE_EDVIR_VIRTUALLABCLASSES_VIRTUALLABUSERS_NAME =
		"EDVIR_VirtualLabClasses_VirtualLabUsers";
	public static final Object[][] MAPPING_TABLE_EDVIR_VIRTUALLABCLASSES_VIRTUALLABUSERS_COLUMNS =
		{
			{ "classId", Types.BIGINT },
			{ "virtualLabUserId", Types.BIGINT }
		};
	public static final String MAPPING_TABLE_EDVIR_VIRTUALLABCLASSES_VIRTUALLABUSERS_SQL_CREATE =
		"create table EDVIR_VirtualLabClasses_VirtualLabUsers (classId LONG not null,virtualLabUserId LONG not null,primary key (classId, virtualLabUserId))";
	public static final boolean FINDER_CACHE_ENABLED_EDVIR_VIRTUALLABCLASSES_VIRTUALLABUSERS =
		GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.EDVIR_VirtualLabClasses_VirtualLabUsers"),
			true);
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.org.kisti.edison.virtuallaboratory.model.VirtualLabUser"));

	public VirtualLabUserModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _virtualLabUserId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setVirtualLabUserId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _virtualLabUserId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return VirtualLabUser.class;
	}

	@Override
	public String getModelClassName() {
		return VirtualLabUser.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("virtualLabUserId", getVirtualLabUserId());
		attributes.put("userId", getUserId());
		attributes.put("userStudentNumber", getUserStudentNumber());
		attributes.put("authRole", getAuthRole());
		attributes.put("userUseYn", getUserUseYn());
		attributes.put("requestSort", getRequestSort());
		attributes.put("processNote", getProcessNote());
		attributes.put("processDate", getProcessDate());
		attributes.put("createDt", getCreateDt());
		attributes.put("updateDt", getUpdateDt());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long virtualLabUserId = (Long)attributes.get("virtualLabUserId");

		if (virtualLabUserId != null) {
			setVirtualLabUserId(virtualLabUserId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userStudentNumber = (String)attributes.get("userStudentNumber");

		if (userStudentNumber != null) {
			setUserStudentNumber(userStudentNumber);
		}

		String authRole = (String)attributes.get("authRole");

		if (authRole != null) {
			setAuthRole(authRole);
		}

		String userUseYn = (String)attributes.get("userUseYn");

		if (userUseYn != null) {
			setUserUseYn(userUseYn);
		}

		String requestSort = (String)attributes.get("requestSort");

		if (requestSort != null) {
			setRequestSort(requestSort);
		}

		String processNote = (String)attributes.get("processNote");

		if (processNote != null) {
			setProcessNote(processNote);
		}

		Date processDate = (Date)attributes.get("processDate");

		if (processDate != null) {
			setProcessDate(processDate);
		}

		Date createDt = (Date)attributes.get("createDt");

		if (createDt != null) {
			setCreateDt(createDt);
		}

		Date updateDt = (Date)attributes.get("updateDt");

		if (updateDt != null) {
			setUpdateDt(updateDt);
		}
	}

	@JSON
	@Override
	public long getVirtualLabUserId() {
		return _virtualLabUserId;
	}

	@Override
	public void setVirtualLabUserId(long virtualLabUserId) {
		_virtualLabUserId = virtualLabUserId;
	}

	@Override
	public String getVirtualLabUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getVirtualLabUserId(), "uuid",
			_virtualLabUserUuid);
	}

	@Override
	public void setVirtualLabUserUuid(String virtualLabUserUuid) {
		_virtualLabUserUuid = virtualLabUserUuid;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	@Override
	public String getUserStudentNumber() {
		if (_userStudentNumber == null) {
			return StringPool.BLANK;
		}
		else {
			return _userStudentNumber;
		}
	}

	@Override
	public void setUserStudentNumber(String userStudentNumber) {
		_userStudentNumber = userStudentNumber;
	}

	@JSON
	@Override
	public String getAuthRole() {
		if (_authRole == null) {
			return StringPool.BLANK;
		}
		else {
			return _authRole;
		}
	}

	@Override
	public void setAuthRole(String authRole) {
		_authRole = authRole;
	}

	@JSON
	@Override
	public String getUserUseYn() {
		if (_userUseYn == null) {
			return StringPool.BLANK;
		}
		else {
			return _userUseYn;
		}
	}

	@Override
	public void setUserUseYn(String userUseYn) {
		_userUseYn = userUseYn;
	}

	@JSON
	@Override
	public String getRequestSort() {
		if (_requestSort == null) {
			return StringPool.BLANK;
		}
		else {
			return _requestSort;
		}
	}

	@Override
	public void setRequestSort(String requestSort) {
		_requestSort = requestSort;
	}

	@JSON
	@Override
	public String getProcessNote() {
		if (_processNote == null) {
			return StringPool.BLANK;
		}
		else {
			return _processNote;
		}
	}

	@Override
	public void setProcessNote(String processNote) {
		_processNote = processNote;
	}

	@JSON
	@Override
	public Date getProcessDate() {
		return _processDate;
	}

	@Override
	public void setProcessDate(Date processDate) {
		_processDate = processDate;
	}

	@JSON
	@Override
	public Date getCreateDt() {
		return _createDt;
	}

	@Override
	public void setCreateDt(Date createDt) {
		_createDt = createDt;
	}

	@JSON
	@Override
	public Date getUpdateDt() {
		return _updateDt;
	}

	@Override
	public void setUpdateDt(Date updateDt) {
		_updateDt = updateDt;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			VirtualLabUser.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public VirtualLabUser toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (VirtualLabUser)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		VirtualLabUserImpl virtualLabUserImpl = new VirtualLabUserImpl();

		virtualLabUserImpl.setVirtualLabUserId(getVirtualLabUserId());
		virtualLabUserImpl.setUserId(getUserId());
		virtualLabUserImpl.setUserStudentNumber(getUserStudentNumber());
		virtualLabUserImpl.setAuthRole(getAuthRole());
		virtualLabUserImpl.setUserUseYn(getUserUseYn());
		virtualLabUserImpl.setRequestSort(getRequestSort());
		virtualLabUserImpl.setProcessNote(getProcessNote());
		virtualLabUserImpl.setProcessDate(getProcessDate());
		virtualLabUserImpl.setCreateDt(getCreateDt());
		virtualLabUserImpl.setUpdateDt(getUpdateDt());

		virtualLabUserImpl.resetOriginalValues();

		return virtualLabUserImpl;
	}

	@Override
	public int compareTo(VirtualLabUser virtualLabUser) {
		int value = 0;

		value = DateUtil.compareTo(getCreateDt(), virtualLabUser.getCreateDt());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof VirtualLabUser)) {
			return false;
		}

		VirtualLabUser virtualLabUser = (VirtualLabUser)obj;

		long primaryKey = virtualLabUser.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<VirtualLabUser> toCacheModel() {
		VirtualLabUserCacheModel virtualLabUserCacheModel = new VirtualLabUserCacheModel();

		virtualLabUserCacheModel.virtualLabUserId = getVirtualLabUserId();

		virtualLabUserCacheModel.userId = getUserId();

		virtualLabUserCacheModel.userStudentNumber = getUserStudentNumber();

		String userStudentNumber = virtualLabUserCacheModel.userStudentNumber;

		if ((userStudentNumber != null) && (userStudentNumber.length() == 0)) {
			virtualLabUserCacheModel.userStudentNumber = null;
		}

		virtualLabUserCacheModel.authRole = getAuthRole();

		String authRole = virtualLabUserCacheModel.authRole;

		if ((authRole != null) && (authRole.length() == 0)) {
			virtualLabUserCacheModel.authRole = null;
		}

		virtualLabUserCacheModel.userUseYn = getUserUseYn();

		String userUseYn = virtualLabUserCacheModel.userUseYn;

		if ((userUseYn != null) && (userUseYn.length() == 0)) {
			virtualLabUserCacheModel.userUseYn = null;
		}

		virtualLabUserCacheModel.requestSort = getRequestSort();

		String requestSort = virtualLabUserCacheModel.requestSort;

		if ((requestSort != null) && (requestSort.length() == 0)) {
			virtualLabUserCacheModel.requestSort = null;
		}

		virtualLabUserCacheModel.processNote = getProcessNote();

		String processNote = virtualLabUserCacheModel.processNote;

		if ((processNote != null) && (processNote.length() == 0)) {
			virtualLabUserCacheModel.processNote = null;
		}

		Date processDate = getProcessDate();

		if (processDate != null) {
			virtualLabUserCacheModel.processDate = processDate.getTime();
		}
		else {
			virtualLabUserCacheModel.processDate = Long.MIN_VALUE;
		}

		Date createDt = getCreateDt();

		if (createDt != null) {
			virtualLabUserCacheModel.createDt = createDt.getTime();
		}
		else {
			virtualLabUserCacheModel.createDt = Long.MIN_VALUE;
		}

		Date updateDt = getUpdateDt();

		if (updateDt != null) {
			virtualLabUserCacheModel.updateDt = updateDt.getTime();
		}
		else {
			virtualLabUserCacheModel.updateDt = Long.MIN_VALUE;
		}

		return virtualLabUserCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(21);

		sb.append("{virtualLabUserId=");
		sb.append(getVirtualLabUserId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userStudentNumber=");
		sb.append(getUserStudentNumber());
		sb.append(", authRole=");
		sb.append(getAuthRole());
		sb.append(", userUseYn=");
		sb.append(getUserUseYn());
		sb.append(", requestSort=");
		sb.append(getRequestSort());
		sb.append(", processNote=");
		sb.append(getProcessNote());
		sb.append(", processDate=");
		sb.append(getProcessDate());
		sb.append(", createDt=");
		sb.append(getCreateDt());
		sb.append(", updateDt=");
		sb.append(getUpdateDt());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(34);

		sb.append("<model><model-name>");
		sb.append("org.kisti.edison.virtuallaboratory.model.VirtualLabUser");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>virtualLabUserId</column-name><column-value><![CDATA[");
		sb.append(getVirtualLabUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userStudentNumber</column-name><column-value><![CDATA[");
		sb.append(getUserStudentNumber());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>authRole</column-name><column-value><![CDATA[");
		sb.append(getAuthRole());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userUseYn</column-name><column-value><![CDATA[");
		sb.append(getUserUseYn());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>requestSort</column-name><column-value><![CDATA[");
		sb.append(getRequestSort());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>processNote</column-name><column-value><![CDATA[");
		sb.append(getProcessNote());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>processDate</column-name><column-value><![CDATA[");
		sb.append(getProcessDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDt</column-name><column-value><![CDATA[");
		sb.append(getCreateDt());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>updateDt</column-name><column-value><![CDATA[");
		sb.append(getUpdateDt());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = VirtualLabUser.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			VirtualLabUser.class
		};
	private long _virtualLabUserId;
	private String _virtualLabUserUuid;
	private long _userId;
	private String _userUuid;
	private String _userStudentNumber;
	private String _authRole;
	private String _userUseYn;
	private String _requestSort;
	private String _processNote;
	private Date _processDate;
	private Date _createDt;
	private Date _updateDt;
	private VirtualLabUser _escapedModel;
}
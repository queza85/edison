/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.kisti.edison.virtuallaboratory.model.impl;

import com.liferay.portal.LocaleException;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.LocaleUtil;
import com.liferay.portal.kernel.util.LocalizationUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.kernel.util.Validator;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import org.kisti.edison.virtuallaboratory.model.VirtualLab;
import org.kisti.edison.virtuallaboratory.model.VirtualLabModel;
import org.kisti.edison.virtuallaboratory.model.VirtualLabSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;

/**
 * The base model implementation for the VirtualLab service. Represents a row in the &quot;EDVIR_VirtualLab&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link org.kisti.edison.virtuallaboratory.model.VirtualLabModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link VirtualLabImpl}.
 * </p>
 *
 * @author EDISON
 * @see VirtualLabImpl
 * @see org.kisti.edison.virtuallaboratory.model.VirtualLab
 * @see org.kisti.edison.virtuallaboratory.model.VirtualLabModel
 * @generated
 */
@JSON(strict = true)
public class VirtualLabModelImpl extends BaseModelImpl<VirtualLab>
	implements VirtualLabModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a virtual lab model instance should use the {@link org.kisti.edison.virtuallaboratory.model.VirtualLab} interface instead.
	 */
	public static final String TABLE_NAME = "EDVIR_VirtualLab";
	public static final Object[][] TABLE_COLUMNS = {
			{ "virtualLabId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "virtualLabPersonName", Types.VARCHAR },
			{ "virtualLabRequestDt", Types.TIMESTAMP },
			{ "virtualLabConfirmDt", Types.TIMESTAMP },
			{ "virtualLabConfirmDescription", Types.VARCHAR },
			{ "virtualLabStatus", Types.VARCHAR },
			{ "virtualLabTitle", Types.VARCHAR },
			{ "virtualLabDescription", Types.VARCHAR },
			{ "virtualLabUseYn", Types.VARCHAR },
			{ "virtualLabUniversityField", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table EDVIR_VirtualLab (virtualLabId LONG not null primary key,groupId LONG,userId LONG,virtualLabPersonName STRING null,virtualLabRequestDt DATE null,virtualLabConfirmDt DATE null,virtualLabConfirmDescription VARCHAR(75) null,virtualLabStatus VARCHAR(75) null,virtualLabTitle STRING null,virtualLabDescription STRING null,virtualLabUseYn VARCHAR(75) null,virtualLabUniversityField VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table EDVIR_VirtualLab";
	public static final String ORDER_BY_JPQL = " ORDER BY virtualLab.virtualLabConfirmDt DESC";
	public static final String ORDER_BY_SQL = " ORDER BY EDVIR_VirtualLab.virtualLabConfirmDt DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.org.kisti.edison.virtuallaboratory.model.VirtualLab"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.org.kisti.edison.virtuallaboratory.model.VirtualLab"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static VirtualLab toModel(VirtualLabSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		VirtualLab model = new VirtualLabImpl();

		model.setVirtualLabId(soapModel.getVirtualLabId());
		model.setGroupId(soapModel.getGroupId());
		model.setUserId(soapModel.getUserId());
		model.setVirtualLabPersonName(soapModel.getVirtualLabPersonName());
		model.setVirtualLabRequestDt(soapModel.getVirtualLabRequestDt());
		model.setVirtualLabConfirmDt(soapModel.getVirtualLabConfirmDt());
		model.setVirtualLabConfirmDescription(soapModel.getVirtualLabConfirmDescription());
		model.setVirtualLabStatus(soapModel.getVirtualLabStatus());
		model.setVirtualLabTitle(soapModel.getVirtualLabTitle());
		model.setVirtualLabDescription(soapModel.getVirtualLabDescription());
		model.setVirtualLabUseYn(soapModel.getVirtualLabUseYn());
		model.setVirtualLabUniversityField(soapModel.getVirtualLabUniversityField());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<VirtualLab> toModels(VirtualLabSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<VirtualLab> models = new ArrayList<VirtualLab>(soapModels.length);

		for (VirtualLabSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final String MAPPING_TABLE_EDVIR_VIRTUALLABS_VIRTUALLABCLASSES_NAME =
		"EDVIR_VirtualLabs_VirtualLabClasses";
	public static final Object[][] MAPPING_TABLE_EDVIR_VIRTUALLABS_VIRTUALLABCLASSES_COLUMNS =
		{
			{ "virtualLabId", Types.BIGINT },
			{ "classId", Types.BIGINT }
		};
	public static final String MAPPING_TABLE_EDVIR_VIRTUALLABS_VIRTUALLABCLASSES_SQL_CREATE =
		"create table EDVIR_VirtualLabs_VirtualLabClasses (virtualLabId LONG not null,classId LONG not null,primary key (virtualLabId, classId))";
	public static final boolean FINDER_CACHE_ENABLED_EDVIR_VIRTUALLABS_VIRTUALLABCLASSES =
		GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.EDVIR_VirtualLabs_VirtualLabClasses"),
			true);
	public static final String MAPPING_TABLE_EDVIR_VIRTUALLABS_SURVEYS_NAME = "EDVIR_VirtualLabs_Surveys";
	public static final Object[][] MAPPING_TABLE_EDVIR_VIRTUALLABS_SURVEYS_COLUMNS =
		{
			{ "surveySeqNo", Types.BIGINT },
			{ "virtualLabId", Types.BIGINT }
		};
	public static final String MAPPING_TABLE_EDVIR_VIRTUALLABS_SURVEYS_SQL_CREATE =
		"create table EDVIR_VirtualLabs_Surveys (surveySeqNo LONG not null,virtualLabId LONG not null,primary key (surveySeqNo, virtualLabId))";
	public static final boolean FINDER_CACHE_ENABLED_EDVIR_VIRTUALLABS_SURVEYS = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.EDVIR_VirtualLabs_Surveys"),
			true);
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.org.kisti.edison.virtuallaboratory.model.VirtualLab"));

	public VirtualLabModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _virtualLabId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setVirtualLabId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _virtualLabId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return VirtualLab.class;
	}

	@Override
	public String getModelClassName() {
		return VirtualLab.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("virtualLabId", getVirtualLabId());
		attributes.put("groupId", getGroupId());
		attributes.put("userId", getUserId());
		attributes.put("virtualLabPersonName", getVirtualLabPersonName());
		attributes.put("virtualLabRequestDt", getVirtualLabRequestDt());
		attributes.put("virtualLabConfirmDt", getVirtualLabConfirmDt());
		attributes.put("virtualLabConfirmDescription",
			getVirtualLabConfirmDescription());
		attributes.put("virtualLabStatus", getVirtualLabStatus());
		attributes.put("virtualLabTitle", getVirtualLabTitle());
		attributes.put("virtualLabDescription", getVirtualLabDescription());
		attributes.put("virtualLabUseYn", getVirtualLabUseYn());
		attributes.put("virtualLabUniversityField",
			getVirtualLabUniversityField());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long virtualLabId = (Long)attributes.get("virtualLabId");

		if (virtualLabId != null) {
			setVirtualLabId(virtualLabId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String virtualLabPersonName = (String)attributes.get(
				"virtualLabPersonName");

		if (virtualLabPersonName != null) {
			setVirtualLabPersonName(virtualLabPersonName);
		}

		Date virtualLabRequestDt = (Date)attributes.get("virtualLabRequestDt");

		if (virtualLabRequestDt != null) {
			setVirtualLabRequestDt(virtualLabRequestDt);
		}

		Date virtualLabConfirmDt = (Date)attributes.get("virtualLabConfirmDt");

		if (virtualLabConfirmDt != null) {
			setVirtualLabConfirmDt(virtualLabConfirmDt);
		}

		String virtualLabConfirmDescription = (String)attributes.get(
				"virtualLabConfirmDescription");

		if (virtualLabConfirmDescription != null) {
			setVirtualLabConfirmDescription(virtualLabConfirmDescription);
		}

		String virtualLabStatus = (String)attributes.get("virtualLabStatus");

		if (virtualLabStatus != null) {
			setVirtualLabStatus(virtualLabStatus);
		}

		String virtualLabTitle = (String)attributes.get("virtualLabTitle");

		if (virtualLabTitle != null) {
			setVirtualLabTitle(virtualLabTitle);
		}

		String virtualLabDescription = (String)attributes.get(
				"virtualLabDescription");

		if (virtualLabDescription != null) {
			setVirtualLabDescription(virtualLabDescription);
		}

		String virtualLabUseYn = (String)attributes.get("virtualLabUseYn");

		if (virtualLabUseYn != null) {
			setVirtualLabUseYn(virtualLabUseYn);
		}

		String virtualLabUniversityField = (String)attributes.get(
				"virtualLabUniversityField");

		if (virtualLabUniversityField != null) {
			setVirtualLabUniversityField(virtualLabUniversityField);
		}
	}

	@JSON
	@Override
	public long getVirtualLabId() {
		return _virtualLabId;
	}

	@Override
	public void setVirtualLabId(long virtualLabId) {
		_virtualLabId = virtualLabId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	@Override
	public String getVirtualLabPersonName() {
		if (_virtualLabPersonName == null) {
			return StringPool.BLANK;
		}
		else {
			return _virtualLabPersonName;
		}
	}

	@Override
	public String getVirtualLabPersonName(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getVirtualLabPersonName(languageId);
	}

	@Override
	public String getVirtualLabPersonName(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getVirtualLabPersonName(languageId, useDefault);
	}

	@Override
	public String getVirtualLabPersonName(String languageId) {
		return LocalizationUtil.getLocalization(getVirtualLabPersonName(),
			languageId);
	}

	@Override
	public String getVirtualLabPersonName(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(getVirtualLabPersonName(),
			languageId, useDefault);
	}

	@Override
	public String getVirtualLabPersonNameCurrentLanguageId() {
		return _virtualLabPersonNameCurrentLanguageId;
	}

	@JSON
	@Override
	public String getVirtualLabPersonNameCurrentValue() {
		Locale locale = getLocale(_virtualLabPersonNameCurrentLanguageId);

		return getVirtualLabPersonName(locale);
	}

	@Override
	public Map<Locale, String> getVirtualLabPersonNameMap() {
		return LocalizationUtil.getLocalizationMap(getVirtualLabPersonName());
	}

	@Override
	public void setVirtualLabPersonName(String virtualLabPersonName) {
		_virtualLabPersonName = virtualLabPersonName;
	}

	@Override
	public void setVirtualLabPersonName(String virtualLabPersonName,
		Locale locale) {
		setVirtualLabPersonName(virtualLabPersonName, locale,
			LocaleUtil.getDefault());
	}

	@Override
	public void setVirtualLabPersonName(String virtualLabPersonName,
		Locale locale, Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(virtualLabPersonName)) {
			setVirtualLabPersonName(LocalizationUtil.updateLocalization(
					getVirtualLabPersonName(), "VirtualLabPersonName",
					virtualLabPersonName, languageId, defaultLanguageId));
		}
		else {
			setVirtualLabPersonName(LocalizationUtil.removeLocalization(
					getVirtualLabPersonName(), "VirtualLabPersonName",
					languageId));
		}
	}

	@Override
	public void setVirtualLabPersonNameCurrentLanguageId(String languageId) {
		_virtualLabPersonNameCurrentLanguageId = languageId;
	}

	@Override
	public void setVirtualLabPersonNameMap(
		Map<Locale, String> virtualLabPersonNameMap) {
		setVirtualLabPersonNameMap(virtualLabPersonNameMap,
			LocaleUtil.getDefault());
	}

	@Override
	public void setVirtualLabPersonNameMap(
		Map<Locale, String> virtualLabPersonNameMap, Locale defaultLocale) {
		if (virtualLabPersonNameMap == null) {
			return;
		}

		setVirtualLabPersonName(LocalizationUtil.updateLocalization(
				virtualLabPersonNameMap, getVirtualLabPersonName(),
				"VirtualLabPersonName", LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public Date getVirtualLabRequestDt() {
		return _virtualLabRequestDt;
	}

	@Override
	public void setVirtualLabRequestDt(Date virtualLabRequestDt) {
		_virtualLabRequestDt = virtualLabRequestDt;
	}

	@JSON
	@Override
	public Date getVirtualLabConfirmDt() {
		return _virtualLabConfirmDt;
	}

	@Override
	public void setVirtualLabConfirmDt(Date virtualLabConfirmDt) {
		_virtualLabConfirmDt = virtualLabConfirmDt;
	}

	@JSON
	@Override
	public String getVirtualLabConfirmDescription() {
		if (_virtualLabConfirmDescription == null) {
			return StringPool.BLANK;
		}
		else {
			return _virtualLabConfirmDescription;
		}
	}

	@Override
	public void setVirtualLabConfirmDescription(
		String virtualLabConfirmDescription) {
		_virtualLabConfirmDescription = virtualLabConfirmDescription;
	}

	@JSON
	@Override
	public String getVirtualLabStatus() {
		if (_virtualLabStatus == null) {
			return StringPool.BLANK;
		}
		else {
			return _virtualLabStatus;
		}
	}

	@Override
	public void setVirtualLabStatus(String virtualLabStatus) {
		_virtualLabStatus = virtualLabStatus;
	}

	@JSON
	@Override
	public String getVirtualLabTitle() {
		if (_virtualLabTitle == null) {
			return StringPool.BLANK;
		}
		else {
			return _virtualLabTitle;
		}
	}

	@Override
	public String getVirtualLabTitle(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getVirtualLabTitle(languageId);
	}

	@Override
	public String getVirtualLabTitle(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getVirtualLabTitle(languageId, useDefault);
	}

	@Override
	public String getVirtualLabTitle(String languageId) {
		return LocalizationUtil.getLocalization(getVirtualLabTitle(), languageId);
	}

	@Override
	public String getVirtualLabTitle(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(getVirtualLabTitle(),
			languageId, useDefault);
	}

	@Override
	public String getVirtualLabTitleCurrentLanguageId() {
		return _virtualLabTitleCurrentLanguageId;
	}

	@JSON
	@Override
	public String getVirtualLabTitleCurrentValue() {
		Locale locale = getLocale(_virtualLabTitleCurrentLanguageId);

		return getVirtualLabTitle(locale);
	}

	@Override
	public Map<Locale, String> getVirtualLabTitleMap() {
		return LocalizationUtil.getLocalizationMap(getVirtualLabTitle());
	}

	@Override
	public void setVirtualLabTitle(String virtualLabTitle) {
		_virtualLabTitle = virtualLabTitle;
	}

	@Override
	public void setVirtualLabTitle(String virtualLabTitle, Locale locale) {
		setVirtualLabTitle(virtualLabTitle, locale, LocaleUtil.getDefault());
	}

	@Override
	public void setVirtualLabTitle(String virtualLabTitle, Locale locale,
		Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(virtualLabTitle)) {
			setVirtualLabTitle(LocalizationUtil.updateLocalization(
					getVirtualLabTitle(), "VirtualLabTitle", virtualLabTitle,
					languageId, defaultLanguageId));
		}
		else {
			setVirtualLabTitle(LocalizationUtil.removeLocalization(
					getVirtualLabTitle(), "VirtualLabTitle", languageId));
		}
	}

	@Override
	public void setVirtualLabTitleCurrentLanguageId(String languageId) {
		_virtualLabTitleCurrentLanguageId = languageId;
	}

	@Override
	public void setVirtualLabTitleMap(Map<Locale, String> virtualLabTitleMap) {
		setVirtualLabTitleMap(virtualLabTitleMap, LocaleUtil.getDefault());
	}

	@Override
	public void setVirtualLabTitleMap(Map<Locale, String> virtualLabTitleMap,
		Locale defaultLocale) {
		if (virtualLabTitleMap == null) {
			return;
		}

		setVirtualLabTitle(LocalizationUtil.updateLocalization(
				virtualLabTitleMap, getVirtualLabTitle(), "VirtualLabTitle",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getVirtualLabDescription() {
		if (_virtualLabDescription == null) {
			return StringPool.BLANK;
		}
		else {
			return _virtualLabDescription;
		}
	}

	@Override
	public String getVirtualLabDescription(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getVirtualLabDescription(languageId);
	}

	@Override
	public String getVirtualLabDescription(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getVirtualLabDescription(languageId, useDefault);
	}

	@Override
	public String getVirtualLabDescription(String languageId) {
		return LocalizationUtil.getLocalization(getVirtualLabDescription(),
			languageId);
	}

	@Override
	public String getVirtualLabDescription(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(getVirtualLabDescription(),
			languageId, useDefault);
	}

	@Override
	public String getVirtualLabDescriptionCurrentLanguageId() {
		return _virtualLabDescriptionCurrentLanguageId;
	}

	@JSON
	@Override
	public String getVirtualLabDescriptionCurrentValue() {
		Locale locale = getLocale(_virtualLabDescriptionCurrentLanguageId);

		return getVirtualLabDescription(locale);
	}

	@Override
	public Map<Locale, String> getVirtualLabDescriptionMap() {
		return LocalizationUtil.getLocalizationMap(getVirtualLabDescription());
	}

	@Override
	public void setVirtualLabDescription(String virtualLabDescription) {
		_virtualLabDescription = virtualLabDescription;
	}

	@Override
	public void setVirtualLabDescription(String virtualLabDescription,
		Locale locale) {
		setVirtualLabDescription(virtualLabDescription, locale,
			LocaleUtil.getDefault());
	}

	@Override
	public void setVirtualLabDescription(String virtualLabDescription,
		Locale locale, Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(virtualLabDescription)) {
			setVirtualLabDescription(LocalizationUtil.updateLocalization(
					getVirtualLabDescription(), "VirtualLabDescription",
					virtualLabDescription, languageId, defaultLanguageId));
		}
		else {
			setVirtualLabDescription(LocalizationUtil.removeLocalization(
					getVirtualLabDescription(), "VirtualLabDescription",
					languageId));
		}
	}

	@Override
	public void setVirtualLabDescriptionCurrentLanguageId(String languageId) {
		_virtualLabDescriptionCurrentLanguageId = languageId;
	}

	@Override
	public void setVirtualLabDescriptionMap(
		Map<Locale, String> virtualLabDescriptionMap) {
		setVirtualLabDescriptionMap(virtualLabDescriptionMap,
			LocaleUtil.getDefault());
	}

	@Override
	public void setVirtualLabDescriptionMap(
		Map<Locale, String> virtualLabDescriptionMap, Locale defaultLocale) {
		if (virtualLabDescriptionMap == null) {
			return;
		}

		setVirtualLabDescription(LocalizationUtil.updateLocalization(
				virtualLabDescriptionMap, getVirtualLabDescription(),
				"VirtualLabDescription", LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getVirtualLabUseYn() {
		if (_virtualLabUseYn == null) {
			return StringPool.BLANK;
		}
		else {
			return _virtualLabUseYn;
		}
	}

	@Override
	public void setVirtualLabUseYn(String virtualLabUseYn) {
		_virtualLabUseYn = virtualLabUseYn;
	}

	@JSON
	@Override
	public String getVirtualLabUniversityField() {
		if (_virtualLabUniversityField == null) {
			return StringPool.BLANK;
		}
		else {
			return _virtualLabUniversityField;
		}
	}

	@Override
	public void setVirtualLabUniversityField(String virtualLabUniversityField) {
		_virtualLabUniversityField = virtualLabUniversityField;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			VirtualLab.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public String[] getAvailableLanguageIds() {
		Set<String> availableLanguageIds = new TreeSet<String>();

		Map<Locale, String> virtualLabPersonNameMap = getVirtualLabPersonNameMap();

		for (Map.Entry<Locale, String> entry : virtualLabPersonNameMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> virtualLabTitleMap = getVirtualLabTitleMap();

		for (Map.Entry<Locale, String> entry : virtualLabTitleMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> virtualLabDescriptionMap = getVirtualLabDescriptionMap();

		for (Map.Entry<Locale, String> entry : virtualLabDescriptionMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		return availableLanguageIds.toArray(new String[availableLanguageIds.size()]);
	}

	@Override
	public String getDefaultLanguageId() {
		String xml = getVirtualLabPersonName();

		if (xml == null) {
			return StringPool.BLANK;
		}

		Locale defaultLocale = LocaleUtil.getDefault();

		return LocalizationUtil.getDefaultLanguageId(xml, defaultLocale);
	}

	@Override
	public void prepareLocalizedFieldsForImport() throws LocaleException {
		prepareLocalizedFieldsForImport(null);
	}

	@Override
	@SuppressWarnings("unused")
	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException {
		Locale defaultLocale = LocaleUtil.getDefault();

		String modelDefaultLanguageId = getDefaultLanguageId();

		String virtualLabPersonName = getVirtualLabPersonName(defaultLocale);

		if (Validator.isNull(virtualLabPersonName)) {
			setVirtualLabPersonName(getVirtualLabPersonName(
					modelDefaultLanguageId), defaultLocale);
		}
		else {
			setVirtualLabPersonName(getVirtualLabPersonName(defaultLocale),
				defaultLocale, defaultLocale);
		}

		String virtualLabTitle = getVirtualLabTitle(defaultLocale);

		if (Validator.isNull(virtualLabTitle)) {
			setVirtualLabTitle(getVirtualLabTitle(modelDefaultLanguageId),
				defaultLocale);
		}
		else {
			setVirtualLabTitle(getVirtualLabTitle(defaultLocale),
				defaultLocale, defaultLocale);
		}

		String virtualLabDescription = getVirtualLabDescription(defaultLocale);

		if (Validator.isNull(virtualLabDescription)) {
			setVirtualLabDescription(getVirtualLabDescription(
					modelDefaultLanguageId), defaultLocale);
		}
		else {
			setVirtualLabDescription(getVirtualLabDescription(defaultLocale),
				defaultLocale, defaultLocale);
		}
	}

	@Override
	public VirtualLab toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (VirtualLab)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		VirtualLabImpl virtualLabImpl = new VirtualLabImpl();

		virtualLabImpl.setVirtualLabId(getVirtualLabId());
		virtualLabImpl.setGroupId(getGroupId());
		virtualLabImpl.setUserId(getUserId());
		virtualLabImpl.setVirtualLabPersonName(getVirtualLabPersonName());
		virtualLabImpl.setVirtualLabRequestDt(getVirtualLabRequestDt());
		virtualLabImpl.setVirtualLabConfirmDt(getVirtualLabConfirmDt());
		virtualLabImpl.setVirtualLabConfirmDescription(getVirtualLabConfirmDescription());
		virtualLabImpl.setVirtualLabStatus(getVirtualLabStatus());
		virtualLabImpl.setVirtualLabTitle(getVirtualLabTitle());
		virtualLabImpl.setVirtualLabDescription(getVirtualLabDescription());
		virtualLabImpl.setVirtualLabUseYn(getVirtualLabUseYn());
		virtualLabImpl.setVirtualLabUniversityField(getVirtualLabUniversityField());

		virtualLabImpl.resetOriginalValues();

		return virtualLabImpl;
	}

	@Override
	public int compareTo(VirtualLab virtualLab) {
		int value = 0;

		value = DateUtil.compareTo(getVirtualLabConfirmDt(),
				virtualLab.getVirtualLabConfirmDt());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof VirtualLab)) {
			return false;
		}

		VirtualLab virtualLab = (VirtualLab)obj;

		long primaryKey = virtualLab.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<VirtualLab> toCacheModel() {
		VirtualLabCacheModel virtualLabCacheModel = new VirtualLabCacheModel();

		virtualLabCacheModel.virtualLabId = getVirtualLabId();

		virtualLabCacheModel.groupId = getGroupId();

		virtualLabCacheModel.userId = getUserId();

		virtualLabCacheModel.virtualLabPersonName = getVirtualLabPersonName();

		String virtualLabPersonName = virtualLabCacheModel.virtualLabPersonName;

		if ((virtualLabPersonName != null) &&
				(virtualLabPersonName.length() == 0)) {
			virtualLabCacheModel.virtualLabPersonName = null;
		}

		Date virtualLabRequestDt = getVirtualLabRequestDt();

		if (virtualLabRequestDt != null) {
			virtualLabCacheModel.virtualLabRequestDt = virtualLabRequestDt.getTime();
		}
		else {
			virtualLabCacheModel.virtualLabRequestDt = Long.MIN_VALUE;
		}

		Date virtualLabConfirmDt = getVirtualLabConfirmDt();

		if (virtualLabConfirmDt != null) {
			virtualLabCacheModel.virtualLabConfirmDt = virtualLabConfirmDt.getTime();
		}
		else {
			virtualLabCacheModel.virtualLabConfirmDt = Long.MIN_VALUE;
		}

		virtualLabCacheModel.virtualLabConfirmDescription = getVirtualLabConfirmDescription();

		String virtualLabConfirmDescription = virtualLabCacheModel.virtualLabConfirmDescription;

		if ((virtualLabConfirmDescription != null) &&
				(virtualLabConfirmDescription.length() == 0)) {
			virtualLabCacheModel.virtualLabConfirmDescription = null;
		}

		virtualLabCacheModel.virtualLabStatus = getVirtualLabStatus();

		String virtualLabStatus = virtualLabCacheModel.virtualLabStatus;

		if ((virtualLabStatus != null) && (virtualLabStatus.length() == 0)) {
			virtualLabCacheModel.virtualLabStatus = null;
		}

		virtualLabCacheModel.virtualLabTitle = getVirtualLabTitle();

		String virtualLabTitle = virtualLabCacheModel.virtualLabTitle;

		if ((virtualLabTitle != null) && (virtualLabTitle.length() == 0)) {
			virtualLabCacheModel.virtualLabTitle = null;
		}

		virtualLabCacheModel.virtualLabDescription = getVirtualLabDescription();

		String virtualLabDescription = virtualLabCacheModel.virtualLabDescription;

		if ((virtualLabDescription != null) &&
				(virtualLabDescription.length() == 0)) {
			virtualLabCacheModel.virtualLabDescription = null;
		}

		virtualLabCacheModel.virtualLabUseYn = getVirtualLabUseYn();

		String virtualLabUseYn = virtualLabCacheModel.virtualLabUseYn;

		if ((virtualLabUseYn != null) && (virtualLabUseYn.length() == 0)) {
			virtualLabCacheModel.virtualLabUseYn = null;
		}

		virtualLabCacheModel.virtualLabUniversityField = getVirtualLabUniversityField();

		String virtualLabUniversityField = virtualLabCacheModel.virtualLabUniversityField;

		if ((virtualLabUniversityField != null) &&
				(virtualLabUniversityField.length() == 0)) {
			virtualLabCacheModel.virtualLabUniversityField = null;
		}

		return virtualLabCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(25);

		sb.append("{virtualLabId=");
		sb.append(getVirtualLabId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", virtualLabPersonName=");
		sb.append(getVirtualLabPersonName());
		sb.append(", virtualLabRequestDt=");
		sb.append(getVirtualLabRequestDt());
		sb.append(", virtualLabConfirmDt=");
		sb.append(getVirtualLabConfirmDt());
		sb.append(", virtualLabConfirmDescription=");
		sb.append(getVirtualLabConfirmDescription());
		sb.append(", virtualLabStatus=");
		sb.append(getVirtualLabStatus());
		sb.append(", virtualLabTitle=");
		sb.append(getVirtualLabTitle());
		sb.append(", virtualLabDescription=");
		sb.append(getVirtualLabDescription());
		sb.append(", virtualLabUseYn=");
		sb.append(getVirtualLabUseYn());
		sb.append(", virtualLabUniversityField=");
		sb.append(getVirtualLabUniversityField());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(40);

		sb.append("<model><model-name>");
		sb.append("org.kisti.edison.virtuallaboratory.model.VirtualLab");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>virtualLabId</column-name><column-value><![CDATA[");
		sb.append(getVirtualLabId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>virtualLabPersonName</column-name><column-value><![CDATA[");
		sb.append(getVirtualLabPersonName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>virtualLabRequestDt</column-name><column-value><![CDATA[");
		sb.append(getVirtualLabRequestDt());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>virtualLabConfirmDt</column-name><column-value><![CDATA[");
		sb.append(getVirtualLabConfirmDt());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>virtualLabConfirmDescription</column-name><column-value><![CDATA[");
		sb.append(getVirtualLabConfirmDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>virtualLabStatus</column-name><column-value><![CDATA[");
		sb.append(getVirtualLabStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>virtualLabTitle</column-name><column-value><![CDATA[");
		sb.append(getVirtualLabTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>virtualLabDescription</column-name><column-value><![CDATA[");
		sb.append(getVirtualLabDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>virtualLabUseYn</column-name><column-value><![CDATA[");
		sb.append(getVirtualLabUseYn());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>virtualLabUniversityField</column-name><column-value><![CDATA[");
		sb.append(getVirtualLabUniversityField());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = VirtualLab.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			VirtualLab.class
		};
	private long _virtualLabId;
	private long _groupId;
	private long _userId;
	private String _userUuid;
	private String _virtualLabPersonName;
	private String _virtualLabPersonNameCurrentLanguageId;
	private Date _virtualLabRequestDt;
	private Date _virtualLabConfirmDt;
	private String _virtualLabConfirmDescription;
	private String _virtualLabStatus;
	private String _virtualLabTitle;
	private String _virtualLabTitleCurrentLanguageId;
	private String _virtualLabDescription;
	private String _virtualLabDescriptionCurrentLanguageId;
	private String _virtualLabUseYn;
	private String _virtualLabUniversityField;
	private VirtualLab _escapedModel;
}
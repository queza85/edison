/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.kisti.edison.service.base;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.persistence.UserPersistence;

import org.kisti.edison.model.Workflow;
import org.kisti.edison.service.WorkflowLocalService;
import org.kisti.edison.service.persistence.WorkflowFinder;
import org.kisti.edison.service.persistence.WorkflowInstancePersistence;
import org.kisti.edison.service.persistence.WorkflowPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the workflow local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link org.kisti.edison.service.impl.WorkflowLocalServiceImpl}.
 * </p>
 *
 * @author EDISON
 * @see org.kisti.edison.service.impl.WorkflowLocalServiceImpl
 * @see org.kisti.edison.service.WorkflowLocalServiceUtil
 * @generated
 */
public abstract class WorkflowLocalServiceBaseImpl extends BaseLocalServiceImpl
	implements WorkflowLocalService, IdentifiableBean {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link org.kisti.edison.service.WorkflowLocalServiceUtil} to access the workflow local service.
	 */

	/**
	 * Adds the workflow to the database. Also notifies the appropriate model listeners.
	 *
	 * @param workflow the workflow
	 * @return the workflow that was added
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public Workflow addWorkflow(Workflow workflow) throws SystemException {
		workflow.setNew(true);

		return workflowPersistence.update(workflow);
	}

	/**
	 * Creates a new workflow with the primary key. Does not add the workflow to the database.
	 *
	 * @param workflowId the primary key for the new workflow
	 * @return the new workflow
	 */
	@Override
	public Workflow createWorkflow(long workflowId) {
		return workflowPersistence.create(workflowId);
	}

	/**
	 * Deletes the workflow with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param workflowId the primary key of the workflow
	 * @return the workflow that was removed
	 * @throws PortalException if a workflow with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public Workflow deleteWorkflow(long workflowId)
		throws PortalException, SystemException {
		return workflowPersistence.remove(workflowId);
	}

	/**
	 * Deletes the workflow from the database. Also notifies the appropriate model listeners.
	 *
	 * @param workflow the workflow
	 * @return the workflow that was removed
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public Workflow deleteWorkflow(Workflow workflow) throws SystemException {
		return workflowPersistence.remove(workflow);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(Workflow.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery)
		throws SystemException {
		return workflowPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link org.kisti.edison.model.impl.WorkflowModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
		throws SystemException {
		return workflowPersistence.findWithDynamicQuery(dynamicQuery, start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link org.kisti.edison.model.impl.WorkflowModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator orderByComparator) throws SystemException {
		return workflowPersistence.findWithDynamicQuery(dynamicQuery, start,
			end, orderByComparator);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery)
		throws SystemException {
		return workflowPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) throws SystemException {
		return workflowPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public Workflow fetchWorkflow(long workflowId) throws SystemException {
		return workflowPersistence.fetchByPrimaryKey(workflowId);
	}

	/**
	 * Returns the workflow with the primary key.
	 *
	 * @param workflowId the primary key of the workflow
	 * @return the workflow
	 * @throws PortalException if a workflow with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public Workflow getWorkflow(long workflowId)
		throws PortalException, SystemException {
		return workflowPersistence.findByPrimaryKey(workflowId);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException, SystemException {
		return workflowPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the workflows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link org.kisti.edison.model.impl.WorkflowModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of workflows
	 * @param end the upper bound of the range of workflows (not inclusive)
	 * @return the range of workflows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public List<Workflow> getWorkflows(int start, int end)
		throws SystemException {
		return workflowPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of workflows.
	 *
	 * @return the number of workflows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public int getWorkflowsCount() throws SystemException {
		return workflowPersistence.countAll();
	}

	/**
	 * Updates the workflow in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param workflow the workflow
	 * @return the workflow that was updated
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public Workflow updateWorkflow(Workflow workflow) throws SystemException {
		return workflowPersistence.update(workflow);
	}

	/**
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public void addWorkflowInstanceWorkflow(long workflowInstanceId,
		long workflowId) throws SystemException {
		workflowInstancePersistence.addWorkflow(workflowInstanceId, workflowId);
	}

	/**
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public void addWorkflowInstanceWorkflow(long workflowInstanceId,
		Workflow workflow) throws SystemException {
		workflowInstancePersistence.addWorkflow(workflowInstanceId, workflow);
	}

	/**
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public void addWorkflowInstanceWorkflows(long workflowInstanceId,
		long[] workflowIds) throws SystemException {
		workflowInstancePersistence.addWorkflows(workflowInstanceId, workflowIds);
	}

	/**
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public void addWorkflowInstanceWorkflows(long workflowInstanceId,
		List<Workflow> Workflows) throws SystemException {
		workflowInstancePersistence.addWorkflows(workflowInstanceId, Workflows);
	}

	/**
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public void clearWorkflowInstanceWorkflows(long workflowInstanceId)
		throws SystemException {
		workflowInstancePersistence.clearWorkflows(workflowInstanceId);
	}

	/**
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public void deleteWorkflowInstanceWorkflow(long workflowInstanceId,
		long workflowId) throws SystemException {
		workflowInstancePersistence.removeWorkflow(workflowInstanceId,
			workflowId);
	}

	/**
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public void deleteWorkflowInstanceWorkflow(long workflowInstanceId,
		Workflow workflow) throws SystemException {
		workflowInstancePersistence.removeWorkflow(workflowInstanceId, workflow);
	}

	/**
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public void deleteWorkflowInstanceWorkflows(long workflowInstanceId,
		long[] workflowIds) throws SystemException {
		workflowInstancePersistence.removeWorkflows(workflowInstanceId,
			workflowIds);
	}

	/**
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public void deleteWorkflowInstanceWorkflows(long workflowInstanceId,
		List<Workflow> Workflows) throws SystemException {
		workflowInstancePersistence.removeWorkflows(workflowInstanceId,
			Workflows);
	}

	/**
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public List<Workflow> getWorkflowInstanceWorkflows(long workflowInstanceId)
		throws SystemException {
		return workflowInstancePersistence.getWorkflows(workflowInstanceId);
	}

	/**
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public List<Workflow> getWorkflowInstanceWorkflows(
		long workflowInstanceId, int start, int end) throws SystemException {
		return workflowInstancePersistence.getWorkflows(workflowInstanceId,
			start, end);
	}

	/**
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public List<Workflow> getWorkflowInstanceWorkflows(
		long workflowInstanceId, int start, int end,
		OrderByComparator orderByComparator) throws SystemException {
		return workflowInstancePersistence.getWorkflows(workflowInstanceId,
			start, end, orderByComparator);
	}

	/**
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public int getWorkflowInstanceWorkflowsCount(long workflowInstanceId)
		throws SystemException {
		return workflowInstancePersistence.getWorkflowsSize(workflowInstanceId);
	}

	/**
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public boolean hasWorkflowInstanceWorkflow(long workflowInstanceId,
		long workflowId) throws SystemException {
		return workflowInstancePersistence.containsWorkflow(workflowInstanceId,
			workflowId);
	}

	/**
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public boolean hasWorkflowInstanceWorkflows(long workflowInstanceId)
		throws SystemException {
		return workflowInstancePersistence.containsWorkflows(workflowInstanceId);
	}

	/**
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public void setWorkflowInstanceWorkflows(long workflowInstanceId,
		long[] workflowIds) throws SystemException {
		workflowInstancePersistence.setWorkflows(workflowInstanceId, workflowIds);
	}

	/**
	 * Returns the workflow local service.
	 *
	 * @return the workflow local service
	 */
	public org.kisti.edison.service.WorkflowLocalService getWorkflowLocalService() {
		return workflowLocalService;
	}

	/**
	 * Sets the workflow local service.
	 *
	 * @param workflowLocalService the workflow local service
	 */
	public void setWorkflowLocalService(
		org.kisti.edison.service.WorkflowLocalService workflowLocalService) {
		this.workflowLocalService = workflowLocalService;
	}

	/**
	 * Returns the workflow persistence.
	 *
	 * @return the workflow persistence
	 */
	public WorkflowPersistence getWorkflowPersistence() {
		return workflowPersistence;
	}

	/**
	 * Sets the workflow persistence.
	 *
	 * @param workflowPersistence the workflow persistence
	 */
	public void setWorkflowPersistence(WorkflowPersistence workflowPersistence) {
		this.workflowPersistence = workflowPersistence;
	}

	/**
	 * Returns the workflow finder.
	 *
	 * @return the workflow finder
	 */
	public WorkflowFinder getWorkflowFinder() {
		return workflowFinder;
	}

	/**
	 * Sets the workflow finder.
	 *
	 * @param workflowFinder the workflow finder
	 */
	public void setWorkflowFinder(WorkflowFinder workflowFinder) {
		this.workflowFinder = workflowFinder;
	}

	/**
	 * Returns the workflow instance local service.
	 *
	 * @return the workflow instance local service
	 */
	public org.kisti.edison.service.WorkflowInstanceLocalService getWorkflowInstanceLocalService() {
		return workflowInstanceLocalService;
	}

	/**
	 * Sets the workflow instance local service.
	 *
	 * @param workflowInstanceLocalService the workflow instance local service
	 */
	public void setWorkflowInstanceLocalService(
		org.kisti.edison.service.WorkflowInstanceLocalService workflowInstanceLocalService) {
		this.workflowInstanceLocalService = workflowInstanceLocalService;
	}

	/**
	 * Returns the workflow instance persistence.
	 *
	 * @return the workflow instance persistence
	 */
	public WorkflowInstancePersistence getWorkflowInstancePersistence() {
		return workflowInstancePersistence;
	}

	/**
	 * Sets the workflow instance persistence.
	 *
	 * @param workflowInstancePersistence the workflow instance persistence
	 */
	public void setWorkflowInstancePersistence(
		WorkflowInstancePersistence workflowInstancePersistence) {
		this.workflowInstancePersistence = workflowInstancePersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user remote service.
	 *
	 * @return the user remote service
	 */
	public com.liferay.portal.service.UserService getUserService() {
		return userService;
	}

	/**
	 * Sets the user remote service.
	 *
	 * @param userService the user remote service
	 */
	public void setUserService(
		com.liferay.portal.service.UserService userService) {
		this.userService = userService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		Class<?> clazz = getClass();

		_classLoader = clazz.getClassLoader();

		PersistedModelLocalServiceRegistryUtil.register("org.kisti.edison.model.Workflow",
			workflowLocalService);
	}

	public void destroy() {
		PersistedModelLocalServiceRegistryUtil.unregister(
			"org.kisti.edison.model.Workflow");
	}

	/**
	 * Returns the Spring bean ID for this bean.
	 *
	 * @return the Spring bean ID for this bean
	 */
	@Override
	public String getBeanIdentifier() {
		return _beanIdentifier;
	}

	/**
	 * Sets the Spring bean ID for this bean.
	 *
	 * @param beanIdentifier the Spring bean ID for this bean
	 */
	@Override
	public void setBeanIdentifier(String beanIdentifier) {
		_beanIdentifier = beanIdentifier;
	}

	@Override
	public Object invokeMethod(String name, String[] parameterTypes,
		Object[] arguments) throws Throwable {
		Thread currentThread = Thread.currentThread();

		ClassLoader contextClassLoader = currentThread.getContextClassLoader();

		if (contextClassLoader != _classLoader) {
			currentThread.setContextClassLoader(_classLoader);
		}

		try {
			return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
		}
		finally {
			if (contextClassLoader != _classLoader) {
				currentThread.setContextClassLoader(contextClassLoader);
			}
		}
	}

	protected Class<?> getModelClass() {
		return Workflow.class;
	}

	protected String getModelClassName() {
		return Workflow.class.getName();
	}

	/**
	 * Performs an SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) throws SystemException {
		try {
			DataSource dataSource = workflowPersistence.getDataSource();

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql, new int[0]);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = org.kisti.edison.service.WorkflowLocalService.class)
	protected org.kisti.edison.service.WorkflowLocalService workflowLocalService;
	@BeanReference(type = WorkflowPersistence.class)
	protected WorkflowPersistence workflowPersistence;
	@BeanReference(type = WorkflowFinder.class)
	protected WorkflowFinder workflowFinder;
	@BeanReference(type = org.kisti.edison.service.WorkflowInstanceLocalService.class)
	protected org.kisti.edison.service.WorkflowInstanceLocalService workflowInstanceLocalService;
	@BeanReference(type = WorkflowInstancePersistence.class)
	protected WorkflowInstancePersistence workflowInstancePersistence;
	@BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
	protected com.liferay.counter.service.CounterLocalService counterLocalService;
	@BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
	protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
	@BeanReference(type = com.liferay.portal.service.UserLocalService.class)
	protected com.liferay.portal.service.UserLocalService userLocalService;
	@BeanReference(type = com.liferay.portal.service.UserService.class)
	protected com.liferay.portal.service.UserService userService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	private String _beanIdentifier;
	private ClassLoader _classLoader;
	private WorkflowLocalServiceClpInvoker _clpInvoker = new WorkflowLocalServiceClpInvoker();
}
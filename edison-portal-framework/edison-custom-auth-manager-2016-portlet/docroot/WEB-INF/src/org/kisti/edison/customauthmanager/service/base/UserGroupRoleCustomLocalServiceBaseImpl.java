/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.kisti.edison.customauthmanager.service.base;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.persistence.UserPersistence;

import org.kisti.edison.customauthmanager.model.UserGroupRoleCustom;
import org.kisti.edison.customauthmanager.service.UserGroupRoleCustomLocalService;
import org.kisti.edison.customauthmanager.service.persistence.UserGroupRoleCustomFinder;
import org.kisti.edison.customauthmanager.service.persistence.UserGroupRoleCustomPK;
import org.kisti.edison.customauthmanager.service.persistence.UserGroupRoleCustomPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the user group role custom local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link org.kisti.edison.customauthmanager.service.impl.UserGroupRoleCustomLocalServiceImpl}.
 * </p>
 *
 * @author EDISON
 * @see org.kisti.edison.customauthmanager.service.impl.UserGroupRoleCustomLocalServiceImpl
 * @see org.kisti.edison.customauthmanager.service.UserGroupRoleCustomLocalServiceUtil
 * @generated
 */
public abstract class UserGroupRoleCustomLocalServiceBaseImpl
	extends BaseLocalServiceImpl implements UserGroupRoleCustomLocalService,
		IdentifiableBean {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link org.kisti.edison.customauthmanager.service.UserGroupRoleCustomLocalServiceUtil} to access the user group role custom local service.
	 */

	/**
	 * Adds the user group role custom to the database. Also notifies the appropriate model listeners.
	 *
	 * @param userGroupRoleCustom the user group role custom
	 * @return the user group role custom that was added
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public UserGroupRoleCustom addUserGroupRoleCustom(
		UserGroupRoleCustom userGroupRoleCustom) throws SystemException {
		userGroupRoleCustom.setNew(true);

		return userGroupRoleCustomPersistence.update(userGroupRoleCustom);
	}

	/**
	 * Creates a new user group role custom with the primary key. Does not add the user group role custom to the database.
	 *
	 * @param userGroupRoleCustomPK the primary key for the new user group role custom
	 * @return the new user group role custom
	 */
	@Override
	public UserGroupRoleCustom createUserGroupRoleCustom(
		UserGroupRoleCustomPK userGroupRoleCustomPK) {
		return userGroupRoleCustomPersistence.create(userGroupRoleCustomPK);
	}

	/**
	 * Deletes the user group role custom with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param userGroupRoleCustomPK the primary key of the user group role custom
	 * @return the user group role custom that was removed
	 * @throws PortalException if a user group role custom with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public UserGroupRoleCustom deleteUserGroupRoleCustom(
		UserGroupRoleCustomPK userGroupRoleCustomPK)
		throws PortalException, SystemException {
		return userGroupRoleCustomPersistence.remove(userGroupRoleCustomPK);
	}

	/**
	 * Deletes the user group role custom from the database. Also notifies the appropriate model listeners.
	 *
	 * @param userGroupRoleCustom the user group role custom
	 * @return the user group role custom that was removed
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public UserGroupRoleCustom deleteUserGroupRoleCustom(
		UserGroupRoleCustom userGroupRoleCustom) throws SystemException {
		return userGroupRoleCustomPersistence.remove(userGroupRoleCustom);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(UserGroupRoleCustom.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery)
		throws SystemException {
		return userGroupRoleCustomPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link org.kisti.edison.customauthmanager.model.impl.UserGroupRoleCustomModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
		throws SystemException {
		return userGroupRoleCustomPersistence.findWithDynamicQuery(dynamicQuery,
			start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link org.kisti.edison.customauthmanager.model.impl.UserGroupRoleCustomModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator orderByComparator) throws SystemException {
		return userGroupRoleCustomPersistence.findWithDynamicQuery(dynamicQuery,
			start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery)
		throws SystemException {
		return userGroupRoleCustomPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) throws SystemException {
		return userGroupRoleCustomPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public UserGroupRoleCustom fetchUserGroupRoleCustom(
		UserGroupRoleCustomPK userGroupRoleCustomPK) throws SystemException {
		return userGroupRoleCustomPersistence.fetchByPrimaryKey(userGroupRoleCustomPK);
	}

	/**
	 * Returns the user group role custom with the primary key.
	 *
	 * @param userGroupRoleCustomPK the primary key of the user group role custom
	 * @return the user group role custom
	 * @throws PortalException if a user group role custom with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public UserGroupRoleCustom getUserGroupRoleCustom(
		UserGroupRoleCustomPK userGroupRoleCustomPK)
		throws PortalException, SystemException {
		return userGroupRoleCustomPersistence.findByPrimaryKey(userGroupRoleCustomPK);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException, SystemException {
		return userGroupRoleCustomPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the user group role customs.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link org.kisti.edison.customauthmanager.model.impl.UserGroupRoleCustomModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of user group role customs
	 * @param end the upper bound of the range of user group role customs (not inclusive)
	 * @return the range of user group role customs
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public List<UserGroupRoleCustom> getUserGroupRoleCustoms(int start, int end)
		throws SystemException {
		return userGroupRoleCustomPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of user group role customs.
	 *
	 * @return the number of user group role customs
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public int getUserGroupRoleCustomsCount() throws SystemException {
		return userGroupRoleCustomPersistence.countAll();
	}

	/**
	 * Updates the user group role custom in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param userGroupRoleCustom the user group role custom
	 * @return the user group role custom that was updated
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public UserGroupRoleCustom updateUserGroupRoleCustom(
		UserGroupRoleCustom userGroupRoleCustom) throws SystemException {
		return userGroupRoleCustomPersistence.update(userGroupRoleCustom);
	}

	/**
	 * Returns the user group role custom local service.
	 *
	 * @return the user group role custom local service
	 */
	public org.kisti.edison.customauthmanager.service.UserGroupRoleCustomLocalService getUserGroupRoleCustomLocalService() {
		return userGroupRoleCustomLocalService;
	}

	/**
	 * Sets the user group role custom local service.
	 *
	 * @param userGroupRoleCustomLocalService the user group role custom local service
	 */
	public void setUserGroupRoleCustomLocalService(
		org.kisti.edison.customauthmanager.service.UserGroupRoleCustomLocalService userGroupRoleCustomLocalService) {
		this.userGroupRoleCustomLocalService = userGroupRoleCustomLocalService;
	}

	/**
	 * Returns the user group role custom remote service.
	 *
	 * @return the user group role custom remote service
	 */
	public org.kisti.edison.customauthmanager.service.UserGroupRoleCustomService getUserGroupRoleCustomService() {
		return userGroupRoleCustomService;
	}

	/**
	 * Sets the user group role custom remote service.
	 *
	 * @param userGroupRoleCustomService the user group role custom remote service
	 */
	public void setUserGroupRoleCustomService(
		org.kisti.edison.customauthmanager.service.UserGroupRoleCustomService userGroupRoleCustomService) {
		this.userGroupRoleCustomService = userGroupRoleCustomService;
	}

	/**
	 * Returns the user group role custom persistence.
	 *
	 * @return the user group role custom persistence
	 */
	public UserGroupRoleCustomPersistence getUserGroupRoleCustomPersistence() {
		return userGroupRoleCustomPersistence;
	}

	/**
	 * Sets the user group role custom persistence.
	 *
	 * @param userGroupRoleCustomPersistence the user group role custom persistence
	 */
	public void setUserGroupRoleCustomPersistence(
		UserGroupRoleCustomPersistence userGroupRoleCustomPersistence) {
		this.userGroupRoleCustomPersistence = userGroupRoleCustomPersistence;
	}

	/**
	 * Returns the user group role custom finder.
	 *
	 * @return the user group role custom finder
	 */
	public UserGroupRoleCustomFinder getUserGroupRoleCustomFinder() {
		return userGroupRoleCustomFinder;
	}

	/**
	 * Sets the user group role custom finder.
	 *
	 * @param userGroupRoleCustomFinder the user group role custom finder
	 */
	public void setUserGroupRoleCustomFinder(
		UserGroupRoleCustomFinder userGroupRoleCustomFinder) {
		this.userGroupRoleCustomFinder = userGroupRoleCustomFinder;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user remote service.
	 *
	 * @return the user remote service
	 */
	public com.liferay.portal.service.UserService getUserService() {
		return userService;
	}

	/**
	 * Sets the user remote service.
	 *
	 * @param userService the user remote service
	 */
	public void setUserService(
		com.liferay.portal.service.UserService userService) {
		this.userService = userService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		Class<?> clazz = getClass();

		_classLoader = clazz.getClassLoader();

		PersistedModelLocalServiceRegistryUtil.register("org.kisti.edison.customauthmanager.model.UserGroupRoleCustom",
			userGroupRoleCustomLocalService);
	}

	public void destroy() {
		PersistedModelLocalServiceRegistryUtil.unregister(
			"org.kisti.edison.customauthmanager.model.UserGroupRoleCustom");
	}

	/**
	 * Returns the Spring bean ID for this bean.
	 *
	 * @return the Spring bean ID for this bean
	 */
	@Override
	public String getBeanIdentifier() {
		return _beanIdentifier;
	}

	/**
	 * Sets the Spring bean ID for this bean.
	 *
	 * @param beanIdentifier the Spring bean ID for this bean
	 */
	@Override
	public void setBeanIdentifier(String beanIdentifier) {
		_beanIdentifier = beanIdentifier;
	}

	@Override
	public Object invokeMethod(String name, String[] parameterTypes,
		Object[] arguments) throws Throwable {
		Thread currentThread = Thread.currentThread();

		ClassLoader contextClassLoader = currentThread.getContextClassLoader();

		if (contextClassLoader != _classLoader) {
			currentThread.setContextClassLoader(_classLoader);
		}

		try {
			return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
		}
		finally {
			if (contextClassLoader != _classLoader) {
				currentThread.setContextClassLoader(contextClassLoader);
			}
		}
	}

	protected Class<?> getModelClass() {
		return UserGroupRoleCustom.class;
	}

	protected String getModelClassName() {
		return UserGroupRoleCustom.class.getName();
	}

	/**
	 * Performs an SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) throws SystemException {
		try {
			DataSource dataSource = userGroupRoleCustomPersistence.getDataSource();

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql, new int[0]);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = org.kisti.edison.customauthmanager.service.UserGroupRoleCustomLocalService.class)
	protected org.kisti.edison.customauthmanager.service.UserGroupRoleCustomLocalService userGroupRoleCustomLocalService;
	@BeanReference(type = org.kisti.edison.customauthmanager.service.UserGroupRoleCustomService.class)
	protected org.kisti.edison.customauthmanager.service.UserGroupRoleCustomService userGroupRoleCustomService;
	@BeanReference(type = UserGroupRoleCustomPersistence.class)
	protected UserGroupRoleCustomPersistence userGroupRoleCustomPersistence;
	@BeanReference(type = UserGroupRoleCustomFinder.class)
	protected UserGroupRoleCustomFinder userGroupRoleCustomFinder;
	@BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
	protected com.liferay.counter.service.CounterLocalService counterLocalService;
	@BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
	protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
	@BeanReference(type = com.liferay.portal.service.UserLocalService.class)
	protected com.liferay.portal.service.UserLocalService userLocalService;
	@BeanReference(type = com.liferay.portal.service.UserService.class)
	protected com.liferay.portal.service.UserService userService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	private String _beanIdentifier;
	private ClassLoader _classLoader;
	private UserGroupRoleCustomLocalServiceClpInvoker _clpInvoker = new UserGroupRoleCustomLocalServiceClpInvoker();
}
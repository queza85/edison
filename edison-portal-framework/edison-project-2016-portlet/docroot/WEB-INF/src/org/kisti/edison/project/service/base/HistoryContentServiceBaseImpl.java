/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.kisti.edison.project.service.base;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.service.BaseServiceImpl;
import com.liferay.portal.service.persistence.UserPersistence;

import org.kisti.edison.project.model.HistoryContent;
import org.kisti.edison.project.service.HistoryContentService;
import org.kisti.edison.project.service.persistence.HistoryAppSimulationPersistence;
import org.kisti.edison.project.service.persistence.HistoryContentFinder;
import org.kisti.edison.project.service.persistence.HistoryContentPersistence;
import org.kisti.edison.project.service.persistence.HistoryScienceAppFinder;
import org.kisti.edison.project.service.persistence.HistoryScienceAppPersistence;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the history content remote service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link org.kisti.edison.project.service.impl.HistoryContentServiceImpl}.
 * </p>
 *
 * @author EDISON
 * @see org.kisti.edison.project.service.impl.HistoryContentServiceImpl
 * @see org.kisti.edison.project.service.HistoryContentServiceUtil
 * @generated
 */
public abstract class HistoryContentServiceBaseImpl extends BaseServiceImpl
	implements HistoryContentService, IdentifiableBean {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link org.kisti.edison.project.service.HistoryContentServiceUtil} to access the history content remote service.
	 */

	/**
	 * Returns the history app simulation local service.
	 *
	 * @return the history app simulation local service
	 */
	public org.kisti.edison.project.service.HistoryAppSimulationLocalService getHistoryAppSimulationLocalService() {
		return historyAppSimulationLocalService;
	}

	/**
	 * Sets the history app simulation local service.
	 *
	 * @param historyAppSimulationLocalService the history app simulation local service
	 */
	public void setHistoryAppSimulationLocalService(
		org.kisti.edison.project.service.HistoryAppSimulationLocalService historyAppSimulationLocalService) {
		this.historyAppSimulationLocalService = historyAppSimulationLocalService;
	}

	/**
	 * Returns the history app simulation remote service.
	 *
	 * @return the history app simulation remote service
	 */
	public org.kisti.edison.project.service.HistoryAppSimulationService getHistoryAppSimulationService() {
		return historyAppSimulationService;
	}

	/**
	 * Sets the history app simulation remote service.
	 *
	 * @param historyAppSimulationService the history app simulation remote service
	 */
	public void setHistoryAppSimulationService(
		org.kisti.edison.project.service.HistoryAppSimulationService historyAppSimulationService) {
		this.historyAppSimulationService = historyAppSimulationService;
	}

	/**
	 * Returns the history app simulation persistence.
	 *
	 * @return the history app simulation persistence
	 */
	public HistoryAppSimulationPersistence getHistoryAppSimulationPersistence() {
		return historyAppSimulationPersistence;
	}

	/**
	 * Sets the history app simulation persistence.
	 *
	 * @param historyAppSimulationPersistence the history app simulation persistence
	 */
	public void setHistoryAppSimulationPersistence(
		HistoryAppSimulationPersistence historyAppSimulationPersistence) {
		this.historyAppSimulationPersistence = historyAppSimulationPersistence;
	}

	/**
	 * Returns the history content local service.
	 *
	 * @return the history content local service
	 */
	public org.kisti.edison.project.service.HistoryContentLocalService getHistoryContentLocalService() {
		return historyContentLocalService;
	}

	/**
	 * Sets the history content local service.
	 *
	 * @param historyContentLocalService the history content local service
	 */
	public void setHistoryContentLocalService(
		org.kisti.edison.project.service.HistoryContentLocalService historyContentLocalService) {
		this.historyContentLocalService = historyContentLocalService;
	}

	/**
	 * Returns the history content remote service.
	 *
	 * @return the history content remote service
	 */
	public org.kisti.edison.project.service.HistoryContentService getHistoryContentService() {
		return historyContentService;
	}

	/**
	 * Sets the history content remote service.
	 *
	 * @param historyContentService the history content remote service
	 */
	public void setHistoryContentService(
		org.kisti.edison.project.service.HistoryContentService historyContentService) {
		this.historyContentService = historyContentService;
	}

	/**
	 * Returns the history content persistence.
	 *
	 * @return the history content persistence
	 */
	public HistoryContentPersistence getHistoryContentPersistence() {
		return historyContentPersistence;
	}

	/**
	 * Sets the history content persistence.
	 *
	 * @param historyContentPersistence the history content persistence
	 */
	public void setHistoryContentPersistence(
		HistoryContentPersistence historyContentPersistence) {
		this.historyContentPersistence = historyContentPersistence;
	}

	/**
	 * Returns the history content finder.
	 *
	 * @return the history content finder
	 */
	public HistoryContentFinder getHistoryContentFinder() {
		return historyContentFinder;
	}

	/**
	 * Sets the history content finder.
	 *
	 * @param historyContentFinder the history content finder
	 */
	public void setHistoryContentFinder(
		HistoryContentFinder historyContentFinder) {
		this.historyContentFinder = historyContentFinder;
	}

	/**
	 * Returns the history science app local service.
	 *
	 * @return the history science app local service
	 */
	public org.kisti.edison.project.service.HistoryScienceAppLocalService getHistoryScienceAppLocalService() {
		return historyScienceAppLocalService;
	}

	/**
	 * Sets the history science app local service.
	 *
	 * @param historyScienceAppLocalService the history science app local service
	 */
	public void setHistoryScienceAppLocalService(
		org.kisti.edison.project.service.HistoryScienceAppLocalService historyScienceAppLocalService) {
		this.historyScienceAppLocalService = historyScienceAppLocalService;
	}

	/**
	 * Returns the history science app remote service.
	 *
	 * @return the history science app remote service
	 */
	public org.kisti.edison.project.service.HistoryScienceAppService getHistoryScienceAppService() {
		return historyScienceAppService;
	}

	/**
	 * Sets the history science app remote service.
	 *
	 * @param historyScienceAppService the history science app remote service
	 */
	public void setHistoryScienceAppService(
		org.kisti.edison.project.service.HistoryScienceAppService historyScienceAppService) {
		this.historyScienceAppService = historyScienceAppService;
	}

	/**
	 * Returns the history science app persistence.
	 *
	 * @return the history science app persistence
	 */
	public HistoryScienceAppPersistence getHistoryScienceAppPersistence() {
		return historyScienceAppPersistence;
	}

	/**
	 * Sets the history science app persistence.
	 *
	 * @param historyScienceAppPersistence the history science app persistence
	 */
	public void setHistoryScienceAppPersistence(
		HistoryScienceAppPersistence historyScienceAppPersistence) {
		this.historyScienceAppPersistence = historyScienceAppPersistence;
	}

	/**
	 * Returns the history science app finder.
	 *
	 * @return the history science app finder
	 */
	public HistoryScienceAppFinder getHistoryScienceAppFinder() {
		return historyScienceAppFinder;
	}

	/**
	 * Sets the history science app finder.
	 *
	 * @param historyScienceAppFinder the history science app finder
	 */
	public void setHistoryScienceAppFinder(
		HistoryScienceAppFinder historyScienceAppFinder) {
		this.historyScienceAppFinder = historyScienceAppFinder;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user remote service.
	 *
	 * @return the user remote service
	 */
	public com.liferay.portal.service.UserService getUserService() {
		return userService;
	}

	/**
	 * Sets the user remote service.
	 *
	 * @param userService the user remote service
	 */
	public void setUserService(
		com.liferay.portal.service.UserService userService) {
		this.userService = userService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		Class<?> clazz = getClass();

		_classLoader = clazz.getClassLoader();
	}

	public void destroy() {
	}

	/**
	 * Returns the Spring bean ID for this bean.
	 *
	 * @return the Spring bean ID for this bean
	 */
	@Override
	public String getBeanIdentifier() {
		return _beanIdentifier;
	}

	/**
	 * Sets the Spring bean ID for this bean.
	 *
	 * @param beanIdentifier the Spring bean ID for this bean
	 */
	@Override
	public void setBeanIdentifier(String beanIdentifier) {
		_beanIdentifier = beanIdentifier;
	}

	@Override
	public Object invokeMethod(String name, String[] parameterTypes,
		Object[] arguments) throws Throwable {
		Thread currentThread = Thread.currentThread();

		ClassLoader contextClassLoader = currentThread.getContextClassLoader();

		if (contextClassLoader != _classLoader) {
			currentThread.setContextClassLoader(_classLoader);
		}

		try {
			return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
		}
		finally {
			if (contextClassLoader != _classLoader) {
				currentThread.setContextClassLoader(contextClassLoader);
			}
		}
	}

	protected Class<?> getModelClass() {
		return HistoryContent.class;
	}

	protected String getModelClassName() {
		return HistoryContent.class.getName();
	}

	/**
	 * Performs an SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) throws SystemException {
		try {
			DataSource dataSource = historyContentPersistence.getDataSource();

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql, new int[0]);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = org.kisti.edison.project.service.HistoryAppSimulationLocalService.class)
	protected org.kisti.edison.project.service.HistoryAppSimulationLocalService historyAppSimulationLocalService;
	@BeanReference(type = org.kisti.edison.project.service.HistoryAppSimulationService.class)
	protected org.kisti.edison.project.service.HistoryAppSimulationService historyAppSimulationService;
	@BeanReference(type = HistoryAppSimulationPersistence.class)
	protected HistoryAppSimulationPersistence historyAppSimulationPersistence;
	@BeanReference(type = org.kisti.edison.project.service.HistoryContentLocalService.class)
	protected org.kisti.edison.project.service.HistoryContentLocalService historyContentLocalService;
	@BeanReference(type = org.kisti.edison.project.service.HistoryContentService.class)
	protected org.kisti.edison.project.service.HistoryContentService historyContentService;
	@BeanReference(type = HistoryContentPersistence.class)
	protected HistoryContentPersistence historyContentPersistence;
	@BeanReference(type = HistoryContentFinder.class)
	protected HistoryContentFinder historyContentFinder;
	@BeanReference(type = org.kisti.edison.project.service.HistoryScienceAppLocalService.class)
	protected org.kisti.edison.project.service.HistoryScienceAppLocalService historyScienceAppLocalService;
	@BeanReference(type = org.kisti.edison.project.service.HistoryScienceAppService.class)
	protected org.kisti.edison.project.service.HistoryScienceAppService historyScienceAppService;
	@BeanReference(type = HistoryScienceAppPersistence.class)
	protected HistoryScienceAppPersistence historyScienceAppPersistence;
	@BeanReference(type = HistoryScienceAppFinder.class)
	protected HistoryScienceAppFinder historyScienceAppFinder;
	@BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
	protected com.liferay.counter.service.CounterLocalService counterLocalService;
	@BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
	protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
	@BeanReference(type = com.liferay.portal.service.UserLocalService.class)
	protected com.liferay.portal.service.UserLocalService userLocalService;
	@BeanReference(type = com.liferay.portal.service.UserService.class)
	protected com.liferay.portal.service.UserService userService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	private String _beanIdentifier;
	private ClassLoader _classLoader;
	private HistoryContentServiceClpInvoker _clpInvoker = new HistoryContentServiceClpInvoker();
}
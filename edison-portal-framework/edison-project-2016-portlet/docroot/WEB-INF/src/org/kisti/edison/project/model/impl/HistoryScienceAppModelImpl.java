/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.kisti.edison.project.model.impl;

import com.liferay.portal.LocaleException;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.LocaleUtil;
import com.liferay.portal.kernel.util.LocalizationUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.kernel.util.Validator;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.util.PortalUtil;

import org.kisti.edison.project.model.HistoryScienceApp;
import org.kisti.edison.project.model.HistoryScienceAppModel;
import org.kisti.edison.project.model.HistoryScienceAppSoap;
import org.kisti.edison.project.service.persistence.HistoryScienceAppPK;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;

/**
 * The base model implementation for the HistoryScienceApp service. Represents a row in the &quot;EDPRJ_HistoryScienceApp&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link org.kisti.edison.project.model.HistoryScienceAppModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link HistoryScienceAppImpl}.
 * </p>
 *
 * @author EDISON
 * @see HistoryScienceAppImpl
 * @see org.kisti.edison.project.model.HistoryScienceApp
 * @see org.kisti.edison.project.model.HistoryScienceAppModel
 * @generated
 */
@JSON(strict = true)
public class HistoryScienceAppModelImpl extends BaseModelImpl<HistoryScienceApp>
	implements HistoryScienceAppModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a history science app model instance should use the {@link org.kisti.edison.project.model.HistoryScienceApp} interface instead.
	 */
	public static final String TABLE_NAME = "EDPRJ_HistoryScienceApp";
	public static final Object[][] TABLE_COLUMNS = {
			{ "scienceAppId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "projectCategoryId", Types.BIGINT },
			{ "title", Types.VARCHAR },
			{ "version", Types.VARCHAR },
			{ "name", Types.VARCHAR },
			{ "affiliation_id", Types.VARCHAR },
			{ "AppStatus", Types.VARCHAR },
			{ "userId", Types.BIGINT },
			{ "insertDate", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table EDPRJ_HistoryScienceApp (scienceAppId LONG not null,groupId LONG not null,projectCategoryId LONG not null,title STRING null,version VARCHAR(75) null,name STRING null,affiliation_id VARCHAR(75) null,AppStatus VARCHAR(75) null,userId LONG,insertDate DATE null,primary key (scienceAppId, groupId, projectCategoryId))";
	public static final String TABLE_SQL_DROP = "drop table EDPRJ_HistoryScienceApp";
	public static final String ORDER_BY_JPQL = " ORDER BY historyScienceApp.id.scienceAppId ASC, historyScienceApp.id.groupId ASC, historyScienceApp.id.projectCategoryId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY EDPRJ_HistoryScienceApp.scienceAppId ASC, EDPRJ_HistoryScienceApp.groupId ASC, EDPRJ_HistoryScienceApp.projectCategoryId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.org.kisti.edison.project.model.HistoryScienceApp"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.org.kisti.edison.project.model.HistoryScienceApp"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static HistoryScienceApp toModel(HistoryScienceAppSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		HistoryScienceApp model = new HistoryScienceAppImpl();

		model.setScienceAppId(soapModel.getScienceAppId());
		model.setGroupId(soapModel.getGroupId());
		model.setProjectCategoryId(soapModel.getProjectCategoryId());
		model.setTitle(soapModel.getTitle());
		model.setVersion(soapModel.getVersion());
		model.setName(soapModel.getName());
		model.setAffiliation_id(soapModel.getAffiliation_id());
		model.setAppStatus(soapModel.getAppStatus());
		model.setUserId(soapModel.getUserId());
		model.setInsertDate(soapModel.getInsertDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<HistoryScienceApp> toModels(
		HistoryScienceAppSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<HistoryScienceApp> models = new ArrayList<HistoryScienceApp>(soapModels.length);

		for (HistoryScienceAppSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.org.kisti.edison.project.model.HistoryScienceApp"));

	public HistoryScienceAppModelImpl() {
	}

	@Override
	public HistoryScienceAppPK getPrimaryKey() {
		return new HistoryScienceAppPK(_scienceAppId, _groupId,
			_projectCategoryId);
	}

	@Override
	public void setPrimaryKey(HistoryScienceAppPK primaryKey) {
		setScienceAppId(primaryKey.scienceAppId);
		setGroupId(primaryKey.groupId);
		setProjectCategoryId(primaryKey.projectCategoryId);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return new HistoryScienceAppPK(_scienceAppId, _groupId,
			_projectCategoryId);
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((HistoryScienceAppPK)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return HistoryScienceApp.class;
	}

	@Override
	public String getModelClassName() {
		return HistoryScienceApp.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("scienceAppId", getScienceAppId());
		attributes.put("groupId", getGroupId());
		attributes.put("projectCategoryId", getProjectCategoryId());
		attributes.put("title", getTitle());
		attributes.put("version", getVersion());
		attributes.put("name", getName());
		attributes.put("affiliation_id", getAffiliation_id());
		attributes.put("AppStatus", getAppStatus());
		attributes.put("userId", getUserId());
		attributes.put("insertDate", getInsertDate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long scienceAppId = (Long)attributes.get("scienceAppId");

		if (scienceAppId != null) {
			setScienceAppId(scienceAppId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long projectCategoryId = (Long)attributes.get("projectCategoryId");

		if (projectCategoryId != null) {
			setProjectCategoryId(projectCategoryId);
		}

		String title = (String)attributes.get("title");

		if (title != null) {
			setTitle(title);
		}

		String version = (String)attributes.get("version");

		if (version != null) {
			setVersion(version);
		}

		String name = (String)attributes.get("name");

		if (name != null) {
			setName(name);
		}

		String affiliation_id = (String)attributes.get("affiliation_id");

		if (affiliation_id != null) {
			setAffiliation_id(affiliation_id);
		}

		String AppStatus = (String)attributes.get("AppStatus");

		if (AppStatus != null) {
			setAppStatus(AppStatus);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Date insertDate = (Date)attributes.get("insertDate");

		if (insertDate != null) {
			setInsertDate(insertDate);
		}
	}

	@JSON
	@Override
	public long getScienceAppId() {
		return _scienceAppId;
	}

	@Override
	public void setScienceAppId(long scienceAppId) {
		_scienceAppId = scienceAppId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@JSON
	@Override
	public long getProjectCategoryId() {
		return _projectCategoryId;
	}

	@Override
	public void setProjectCategoryId(long projectCategoryId) {
		_projectCategoryId = projectCategoryId;
	}

	@JSON
	@Override
	public String getTitle() {
		if (_title == null) {
			return StringPool.BLANK;
		}
		else {
			return _title;
		}
	}

	@Override
	public String getTitle(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getTitle(languageId);
	}

	@Override
	public String getTitle(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getTitle(languageId, useDefault);
	}

	@Override
	public String getTitle(String languageId) {
		return LocalizationUtil.getLocalization(getTitle(), languageId);
	}

	@Override
	public String getTitle(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(getTitle(), languageId,
			useDefault);
	}

	@Override
	public String getTitleCurrentLanguageId() {
		return _titleCurrentLanguageId;
	}

	@JSON
	@Override
	public String getTitleCurrentValue() {
		Locale locale = getLocale(_titleCurrentLanguageId);

		return getTitle(locale);
	}

	@Override
	public Map<Locale, String> getTitleMap() {
		return LocalizationUtil.getLocalizationMap(getTitle());
	}

	@Override
	public void setTitle(String title) {
		_title = title;
	}

	@Override
	public void setTitle(String title, Locale locale) {
		setTitle(title, locale, LocaleUtil.getDefault());
	}

	@Override
	public void setTitle(String title, Locale locale, Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(title)) {
			setTitle(LocalizationUtil.updateLocalization(getTitle(), "Title",
					title, languageId, defaultLanguageId));
		}
		else {
			setTitle(LocalizationUtil.removeLocalization(getTitle(), "Title",
					languageId));
		}
	}

	@Override
	public void setTitleCurrentLanguageId(String languageId) {
		_titleCurrentLanguageId = languageId;
	}

	@Override
	public void setTitleMap(Map<Locale, String> titleMap) {
		setTitleMap(titleMap, LocaleUtil.getDefault());
	}

	@Override
	public void setTitleMap(Map<Locale, String> titleMap, Locale defaultLocale) {
		if (titleMap == null) {
			return;
		}

		setTitle(LocalizationUtil.updateLocalization(titleMap, getTitle(),
				"Title", LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getVersion() {
		if (_version == null) {
			return StringPool.BLANK;
		}
		else {
			return _version;
		}
	}

	@Override
	public void setVersion(String version) {
		_version = version;
	}

	@JSON
	@Override
	public String getName() {
		if (_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _name;
		}
	}

	@Override
	public String getName(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getName(languageId);
	}

	@Override
	public String getName(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getName(languageId, useDefault);
	}

	@Override
	public String getName(String languageId) {
		return LocalizationUtil.getLocalization(getName(), languageId);
	}

	@Override
	public String getName(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(getName(), languageId,
			useDefault);
	}

	@Override
	public String getNameCurrentLanguageId() {
		return _nameCurrentLanguageId;
	}

	@JSON
	@Override
	public String getNameCurrentValue() {
		Locale locale = getLocale(_nameCurrentLanguageId);

		return getName(locale);
	}

	@Override
	public Map<Locale, String> getNameMap() {
		return LocalizationUtil.getLocalizationMap(getName());
	}

	@Override
	public void setName(String name) {
		_name = name;
	}

	@Override
	public void setName(String name, Locale locale) {
		setName(name, locale, LocaleUtil.getDefault());
	}

	@Override
	public void setName(String name, Locale locale, Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(name)) {
			setName(LocalizationUtil.updateLocalization(getName(), "Name",
					name, languageId, defaultLanguageId));
		}
		else {
			setName(LocalizationUtil.removeLocalization(getName(), "Name",
					languageId));
		}
	}

	@Override
	public void setNameCurrentLanguageId(String languageId) {
		_nameCurrentLanguageId = languageId;
	}

	@Override
	public void setNameMap(Map<Locale, String> nameMap) {
		setNameMap(nameMap, LocaleUtil.getDefault());
	}

	@Override
	public void setNameMap(Map<Locale, String> nameMap, Locale defaultLocale) {
		if (nameMap == null) {
			return;
		}

		setName(LocalizationUtil.updateLocalization(nameMap, getName(), "Name",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getAffiliation_id() {
		if (_affiliation_id == null) {
			return StringPool.BLANK;
		}
		else {
			return _affiliation_id;
		}
	}

	@Override
	public void setAffiliation_id(String affiliation_id) {
		_affiliation_id = affiliation_id;
	}

	@JSON
	@Override
	public String getAppStatus() {
		if (_AppStatus == null) {
			return StringPool.BLANK;
		}
		else {
			return _AppStatus;
		}
	}

	@Override
	public void setAppStatus(String AppStatus) {
		_AppStatus = AppStatus;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	@Override
	public Date getInsertDate() {
		return _insertDate;
	}

	@Override
	public void setInsertDate(Date insertDate) {
		_insertDate = insertDate;
	}

	@Override
	public String[] getAvailableLanguageIds() {
		Set<String> availableLanguageIds = new TreeSet<String>();

		Map<Locale, String> titleMap = getTitleMap();

		for (Map.Entry<Locale, String> entry : titleMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> nameMap = getNameMap();

		for (Map.Entry<Locale, String> entry : nameMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		return availableLanguageIds.toArray(new String[availableLanguageIds.size()]);
	}

	@Override
	public String getDefaultLanguageId() {
		String xml = getTitle();

		if (xml == null) {
			return StringPool.BLANK;
		}

		Locale defaultLocale = LocaleUtil.getDefault();

		return LocalizationUtil.getDefaultLanguageId(xml, defaultLocale);
	}

	@Override
	public void prepareLocalizedFieldsForImport() throws LocaleException {
		prepareLocalizedFieldsForImport(null);
	}

	@Override
	@SuppressWarnings("unused")
	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException {
		Locale defaultLocale = LocaleUtil.getDefault();

		String modelDefaultLanguageId = getDefaultLanguageId();

		String title = getTitle(defaultLocale);

		if (Validator.isNull(title)) {
			setTitle(getTitle(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setTitle(getTitle(defaultLocale), defaultLocale, defaultLocale);
		}

		String name = getName(defaultLocale);

		if (Validator.isNull(name)) {
			setName(getName(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setName(getName(defaultLocale), defaultLocale, defaultLocale);
		}
	}

	@Override
	public HistoryScienceApp toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (HistoryScienceApp)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		HistoryScienceAppImpl historyScienceAppImpl = new HistoryScienceAppImpl();

		historyScienceAppImpl.setScienceAppId(getScienceAppId());
		historyScienceAppImpl.setGroupId(getGroupId());
		historyScienceAppImpl.setProjectCategoryId(getProjectCategoryId());
		historyScienceAppImpl.setTitle(getTitle());
		historyScienceAppImpl.setVersion(getVersion());
		historyScienceAppImpl.setName(getName());
		historyScienceAppImpl.setAffiliation_id(getAffiliation_id());
		historyScienceAppImpl.setAppStatus(getAppStatus());
		historyScienceAppImpl.setUserId(getUserId());
		historyScienceAppImpl.setInsertDate(getInsertDate());

		historyScienceAppImpl.resetOriginalValues();

		return historyScienceAppImpl;
	}

	@Override
	public int compareTo(HistoryScienceApp historyScienceApp) {
		HistoryScienceAppPK primaryKey = historyScienceApp.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof HistoryScienceApp)) {
			return false;
		}

		HistoryScienceApp historyScienceApp = (HistoryScienceApp)obj;

		HistoryScienceAppPK primaryKey = historyScienceApp.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<HistoryScienceApp> toCacheModel() {
		HistoryScienceAppCacheModel historyScienceAppCacheModel = new HistoryScienceAppCacheModel();

		historyScienceAppCacheModel.scienceAppId = getScienceAppId();

		historyScienceAppCacheModel.groupId = getGroupId();

		historyScienceAppCacheModel.projectCategoryId = getProjectCategoryId();

		historyScienceAppCacheModel.title = getTitle();

		String title = historyScienceAppCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			historyScienceAppCacheModel.title = null;
		}

		historyScienceAppCacheModel.version = getVersion();

		String version = historyScienceAppCacheModel.version;

		if ((version != null) && (version.length() == 0)) {
			historyScienceAppCacheModel.version = null;
		}

		historyScienceAppCacheModel.name = getName();

		String name = historyScienceAppCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			historyScienceAppCacheModel.name = null;
		}

		historyScienceAppCacheModel.affiliation_id = getAffiliation_id();

		String affiliation_id = historyScienceAppCacheModel.affiliation_id;

		if ((affiliation_id != null) && (affiliation_id.length() == 0)) {
			historyScienceAppCacheModel.affiliation_id = null;
		}

		historyScienceAppCacheModel.AppStatus = getAppStatus();

		String AppStatus = historyScienceAppCacheModel.AppStatus;

		if ((AppStatus != null) && (AppStatus.length() == 0)) {
			historyScienceAppCacheModel.AppStatus = null;
		}

		historyScienceAppCacheModel.userId = getUserId();

		Date insertDate = getInsertDate();

		if (insertDate != null) {
			historyScienceAppCacheModel.insertDate = insertDate.getTime();
		}
		else {
			historyScienceAppCacheModel.insertDate = Long.MIN_VALUE;
		}

		return historyScienceAppCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(21);

		sb.append("{scienceAppId=");
		sb.append(getScienceAppId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", projectCategoryId=");
		sb.append(getProjectCategoryId());
		sb.append(", title=");
		sb.append(getTitle());
		sb.append(", version=");
		sb.append(getVersion());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", affiliation_id=");
		sb.append(getAffiliation_id());
		sb.append(", AppStatus=");
		sb.append(getAppStatus());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", insertDate=");
		sb.append(getInsertDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(34);

		sb.append("<model><model-name>");
		sb.append("org.kisti.edison.project.model.HistoryScienceApp");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>scienceAppId</column-name><column-value><![CDATA[");
		sb.append(getScienceAppId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>projectCategoryId</column-name><column-value><![CDATA[");
		sb.append(getProjectCategoryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>title</column-name><column-value><![CDATA[");
		sb.append(getTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>version</column-name><column-value><![CDATA[");
		sb.append(getVersion());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>affiliation_id</column-name><column-value><![CDATA[");
		sb.append(getAffiliation_id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>AppStatus</column-name><column-value><![CDATA[");
		sb.append(getAppStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>insertDate</column-name><column-value><![CDATA[");
		sb.append(getInsertDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = HistoryScienceApp.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			HistoryScienceApp.class
		};
	private long _scienceAppId;
	private long _groupId;
	private long _projectCategoryId;
	private String _title;
	private String _titleCurrentLanguageId;
	private String _version;
	private String _name;
	private String _nameCurrentLanguageId;
	private String _affiliation_id;
	private String _AppStatus;
	private long _userId;
	private String _userUuid;
	private Date _insertDate;
	private HistoryScienceApp _escapedModel;
}
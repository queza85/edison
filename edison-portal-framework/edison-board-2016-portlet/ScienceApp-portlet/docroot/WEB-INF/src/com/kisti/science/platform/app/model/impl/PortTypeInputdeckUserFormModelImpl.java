/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.kisti.science.platform.app.model.impl;

import com.kisti.science.platform.app.model.PortTypeInputdeckUserForm;
import com.kisti.science.platform.app.model.PortTypeInputdeckUserFormModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the PortTypeInputdeckUserForm service. Represents a row in the &quot;ScienceApp_PortTypeInputdeckUserForm&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.kisti.science.platform.app.model.PortTypeInputdeckUserFormModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PortTypeInputdeckUserFormImpl}.
 * </p>
 *
 * @author Jerry H. Seo & Young Suh
 * @see PortTypeInputdeckUserFormImpl
 * @see com.kisti.science.platform.app.model.PortTypeInputdeckUserForm
 * @see com.kisti.science.platform.app.model.PortTypeInputdeckUserFormModel
 * @generated
 */
public class PortTypeInputdeckUserFormModelImpl extends BaseModelImpl<PortTypeInputdeckUserForm>
	implements PortTypeInputdeckUserFormModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a port type inputdeck user form model instance should use the {@link com.kisti.science.platform.app.model.PortTypeInputdeckUserForm} interface instead.
	 */
	public static final String TABLE_NAME = "ScienceApp_PortTypeInputdeckUserForm";
	public static final Object[][] TABLE_COLUMNS = {
			{ "inputdeckId", Types.BIGINT },
			{ "portTypeId", Types.BIGINT },
			{ "inputdeckUserForm", Types.VARCHAR },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table ScienceApp_PortTypeInputdeckUserForm (inputdeckId LONG not null primary key,portTypeId LONG,inputdeckUserForm STRING null,userId LONG,userName VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table ScienceApp_PortTypeInputdeckUserForm";
	public static final String ORDER_BY_JPQL = " ORDER BY portTypeInputdeckUserForm.inputdeckId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY ScienceApp_PortTypeInputdeckUserForm.inputdeckId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.kisti.science.platform.app.model.PortTypeInputdeckUserForm"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.kisti.science.platform.app.model.PortTypeInputdeckUserForm"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.kisti.science.platform.app.model.PortTypeInputdeckUserForm"));

	public PortTypeInputdeckUserFormModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _inputdeckId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setInputdeckId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _inputdeckId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return PortTypeInputdeckUserForm.class;
	}

	@Override
	public String getModelClassName() {
		return PortTypeInputdeckUserForm.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("inputdeckId", getInputdeckId());
		attributes.put("portTypeId", getPortTypeId());
		attributes.put("inputdeckUserForm", getInputdeckUserForm());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long inputdeckId = (Long)attributes.get("inputdeckId");

		if (inputdeckId != null) {
			setInputdeckId(inputdeckId);
		}

		Long portTypeId = (Long)attributes.get("portTypeId");

		if (portTypeId != null) {
			setPortTypeId(portTypeId);
		}

		String inputdeckUserForm = (String)attributes.get("inputdeckUserForm");

		if (inputdeckUserForm != null) {
			setInputdeckUserForm(inputdeckUserForm);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}
	}

	@Override
	public long getInputdeckId() {
		return _inputdeckId;
	}

	@Override
	public void setInputdeckId(long inputdeckId) {
		_inputdeckId = inputdeckId;
	}

	@Override
	public long getPortTypeId() {
		return _portTypeId;
	}

	@Override
	public void setPortTypeId(long portTypeId) {
		_portTypeId = portTypeId;
	}

	@Override
	public String getInputdeckUserForm() {
		if (_inputdeckUserForm == null) {
			return StringPool.BLANK;
		}
		else {
			return _inputdeckUserForm;
		}
	}

	@Override
	public void setInputdeckUserForm(String inputdeckUserForm) {
		_inputdeckUserForm = inputdeckUserForm;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			PortTypeInputdeckUserForm.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public PortTypeInputdeckUserForm toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (PortTypeInputdeckUserForm)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		PortTypeInputdeckUserFormImpl portTypeInputdeckUserFormImpl = new PortTypeInputdeckUserFormImpl();

		portTypeInputdeckUserFormImpl.setInputdeckId(getInputdeckId());
		portTypeInputdeckUserFormImpl.setPortTypeId(getPortTypeId());
		portTypeInputdeckUserFormImpl.setInputdeckUserForm(getInputdeckUserForm());
		portTypeInputdeckUserFormImpl.setUserId(getUserId());
		portTypeInputdeckUserFormImpl.setUserName(getUserName());

		portTypeInputdeckUserFormImpl.resetOriginalValues();

		return portTypeInputdeckUserFormImpl;
	}

	@Override
	public int compareTo(PortTypeInputdeckUserForm portTypeInputdeckUserForm) {
		long primaryKey = portTypeInputdeckUserForm.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof PortTypeInputdeckUserForm)) {
			return false;
		}

		PortTypeInputdeckUserForm portTypeInputdeckUserForm = (PortTypeInputdeckUserForm)obj;

		long primaryKey = portTypeInputdeckUserForm.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<PortTypeInputdeckUserForm> toCacheModel() {
		PortTypeInputdeckUserFormCacheModel portTypeInputdeckUserFormCacheModel = new PortTypeInputdeckUserFormCacheModel();

		portTypeInputdeckUserFormCacheModel.inputdeckId = getInputdeckId();

		portTypeInputdeckUserFormCacheModel.portTypeId = getPortTypeId();

		portTypeInputdeckUserFormCacheModel.inputdeckUserForm = getInputdeckUserForm();

		String inputdeckUserForm = portTypeInputdeckUserFormCacheModel.inputdeckUserForm;

		if ((inputdeckUserForm != null) && (inputdeckUserForm.length() == 0)) {
			portTypeInputdeckUserFormCacheModel.inputdeckUserForm = null;
		}

		portTypeInputdeckUserFormCacheModel.userId = getUserId();

		portTypeInputdeckUserFormCacheModel.userName = getUserName();

		String userName = portTypeInputdeckUserFormCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			portTypeInputdeckUserFormCacheModel.userName = null;
		}

		return portTypeInputdeckUserFormCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(11);

		sb.append("{inputdeckId=");
		sb.append(getInputdeckId());
		sb.append(", portTypeId=");
		sb.append(getPortTypeId());
		sb.append(", inputdeckUserForm=");
		sb.append(getInputdeckUserForm());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(19);

		sb.append("<model><model-name>");
		sb.append(
			"com.kisti.science.platform.app.model.PortTypeInputdeckUserForm");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>inputdeckId</column-name><column-value><![CDATA[");
		sb.append(getInputdeckId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>portTypeId</column-name><column-value><![CDATA[");
		sb.append(getPortTypeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inputdeckUserForm</column-name><column-value><![CDATA[");
		sb.append(getInputdeckUserForm());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = PortTypeInputdeckUserForm.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			PortTypeInputdeckUserForm.class
		};
	private long _inputdeckId;
	private long _portTypeId;
	private String _inputdeckUserForm;
	private long _userId;
	private String _userUuid;
	private String _userName;
	private PortTypeInputdeckUserForm _escapedModel;
}
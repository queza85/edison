/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.kisti.edison.multiboard.model.impl;

import com.liferay.portal.LocaleException;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.LocaleUtil;
import com.liferay.portal.kernel.util.LocalizationUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.kernel.util.Validator;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import org.kisti.edison.multiboard.model.BoardDiv;
import org.kisti.edison.multiboard.model.BoardDivModel;
import org.kisti.edison.multiboard.model.BoardDivSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;

/**
 * The base model implementation for the BoardDiv service. Represents a row in the &quot;EDCON_BoardDiv&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link org.kisti.edison.multiboard.model.BoardDivModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link BoardDivImpl}.
 * </p>
 *
 * @author mhkang
 * @see BoardDivImpl
 * @see org.kisti.edison.multiboard.model.BoardDiv
 * @see org.kisti.edison.multiboard.model.BoardDivModel
 * @generated
 */
@JSON(strict = true)
public class BoardDivModelImpl extends BaseModelImpl<BoardDiv>
	implements BoardDivModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a board div model instance should use the {@link org.kisti.edison.multiboard.model.BoardDiv} interface instead.
	 */
	public static final String TABLE_NAME = "EDCON_BoardDiv";
	public static final Object[][] TABLE_COLUMNS = {
			{ "divCd", Types.BIGINT },
			{ "titleNm", Types.VARCHAR },
			{ "ContentNm", Types.VARCHAR },
			{ "divNm", Types.VARCHAR },
			{ "fileUpLoadUseYn", Types.BOOLEAN },
			{ "popupYn", Types.BOOLEAN },
			{ "replyYn", Types.BOOLEAN }
		};
	public static final String TABLE_SQL_CREATE = "create table EDCON_BoardDiv (divCd LONG not null primary key,titleNm STRING null,ContentNm STRING null,divNm VARCHAR(75) null,fileUpLoadUseYn BOOLEAN,popupYn BOOLEAN,replyYn BOOLEAN)";
	public static final String TABLE_SQL_DROP = "drop table EDCON_BoardDiv";
	public static final String ORDER_BY_JPQL = " ORDER BY boardDiv.divCd ASC";
	public static final String ORDER_BY_SQL = " ORDER BY EDCON_BoardDiv.divCd ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "true";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.org.kisti.edison.multiboard.model.BoardDiv"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.org.kisti.edison.multiboard.model.BoardDiv"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.org.kisti.edison.multiboard.model.BoardDiv"),
			true);
	public static long FILEUPLOADUSEYN_COLUMN_BITMASK = 1L;
	public static long POPUPYN_COLUMN_BITMASK = 2L;
	public static long DIVCD_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static BoardDiv toModel(BoardDivSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		BoardDiv model = new BoardDivImpl();

		model.setDivCd(soapModel.getDivCd());
		model.setTitleNm(soapModel.getTitleNm());
		model.setContentNm(soapModel.getContentNm());
		model.setDivNm(soapModel.getDivNm());
		model.setFileUpLoadUseYn(soapModel.getFileUpLoadUseYn());
		model.setPopupYn(soapModel.getPopupYn());
		model.setReplyYn(soapModel.getReplyYn());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<BoardDiv> toModels(BoardDivSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<BoardDiv> models = new ArrayList<BoardDiv>(soapModels.length);

		for (BoardDivSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final String MAPPING_TABLE_EDCON_BOARDDIV_BOARD_NAME = "EDCON_BoardDiv_Board";
	public static final Object[][] MAPPING_TABLE_EDCON_BOARDDIV_BOARD_COLUMNS = {
			{ "boardSeq", Types.BIGINT },
			{ "divCd", Types.BIGINT }
		};
	public static final String MAPPING_TABLE_EDCON_BOARDDIV_BOARD_SQL_CREATE = "create table EDCON_BoardDiv_Board (boardSeq LONG not null,divCd LONG not null,primary key (boardSeq, divCd))";
	public static final boolean FINDER_CACHE_ENABLED_EDCON_BOARDDIV_BOARD = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.EDCON_BoardDiv_Board"), true);
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.org.kisti.edison.multiboard.model.BoardDiv"));

	public BoardDivModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _divCd;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setDivCd(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _divCd;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return BoardDiv.class;
	}

	@Override
	public String getModelClassName() {
		return BoardDiv.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("divCd", getDivCd());
		attributes.put("titleNm", getTitleNm());
		attributes.put("ContentNm", getContentNm());
		attributes.put("divNm", getDivNm());
		attributes.put("fileUpLoadUseYn", getFileUpLoadUseYn());
		attributes.put("popupYn", getPopupYn());
		attributes.put("replyYn", getReplyYn());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long divCd = (Long)attributes.get("divCd");

		if (divCd != null) {
			setDivCd(divCd);
		}

		String titleNm = (String)attributes.get("titleNm");

		if (titleNm != null) {
			setTitleNm(titleNm);
		}

		String ContentNm = (String)attributes.get("ContentNm");

		if (ContentNm != null) {
			setContentNm(ContentNm);
		}

		String divNm = (String)attributes.get("divNm");

		if (divNm != null) {
			setDivNm(divNm);
		}

		Boolean fileUpLoadUseYn = (Boolean)attributes.get("fileUpLoadUseYn");

		if (fileUpLoadUseYn != null) {
			setFileUpLoadUseYn(fileUpLoadUseYn);
		}

		Boolean popupYn = (Boolean)attributes.get("popupYn");

		if (popupYn != null) {
			setPopupYn(popupYn);
		}

		Boolean replyYn = (Boolean)attributes.get("replyYn");

		if (replyYn != null) {
			setReplyYn(replyYn);
		}
	}

	@JSON
	@Override
	public long getDivCd() {
		return _divCd;
	}

	@Override
	public void setDivCd(long divCd) {
		_columnBitmask = -1L;

		_divCd = divCd;
	}

	@JSON
	@Override
	public String getTitleNm() {
		if (_titleNm == null) {
			return StringPool.BLANK;
		}
		else {
			return _titleNm;
		}
	}

	@Override
	public String getTitleNm(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getTitleNm(languageId);
	}

	@Override
	public String getTitleNm(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getTitleNm(languageId, useDefault);
	}

	@Override
	public String getTitleNm(String languageId) {
		return LocalizationUtil.getLocalization(getTitleNm(), languageId);
	}

	@Override
	public String getTitleNm(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(getTitleNm(), languageId,
			useDefault);
	}

	@Override
	public String getTitleNmCurrentLanguageId() {
		return _titleNmCurrentLanguageId;
	}

	@JSON
	@Override
	public String getTitleNmCurrentValue() {
		Locale locale = getLocale(_titleNmCurrentLanguageId);

		return getTitleNm(locale);
	}

	@Override
	public Map<Locale, String> getTitleNmMap() {
		return LocalizationUtil.getLocalizationMap(getTitleNm());
	}

	@Override
	public void setTitleNm(String titleNm) {
		_titleNm = titleNm;
	}

	@Override
	public void setTitleNm(String titleNm, Locale locale) {
		setTitleNm(titleNm, locale, LocaleUtil.getDefault());
	}

	@Override
	public void setTitleNm(String titleNm, Locale locale, Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(titleNm)) {
			setTitleNm(LocalizationUtil.updateLocalization(getTitleNm(),
					"TitleNm", titleNm, languageId, defaultLanguageId));
		}
		else {
			setTitleNm(LocalizationUtil.removeLocalization(getTitleNm(),
					"TitleNm", languageId));
		}
	}

	@Override
	public void setTitleNmCurrentLanguageId(String languageId) {
		_titleNmCurrentLanguageId = languageId;
	}

	@Override
	public void setTitleNmMap(Map<Locale, String> titleNmMap) {
		setTitleNmMap(titleNmMap, LocaleUtil.getDefault());
	}

	@Override
	public void setTitleNmMap(Map<Locale, String> titleNmMap,
		Locale defaultLocale) {
		if (titleNmMap == null) {
			return;
		}

		setTitleNm(LocalizationUtil.updateLocalization(titleNmMap,
				getTitleNm(), "TitleNm", LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getContentNm() {
		if (_ContentNm == null) {
			return StringPool.BLANK;
		}
		else {
			return _ContentNm;
		}
	}

	@Override
	public String getContentNm(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getContentNm(languageId);
	}

	@Override
	public String getContentNm(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getContentNm(languageId, useDefault);
	}

	@Override
	public String getContentNm(String languageId) {
		return LocalizationUtil.getLocalization(getContentNm(), languageId);
	}

	@Override
	public String getContentNm(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(getContentNm(), languageId,
			useDefault);
	}

	@Override
	public String getContentNmCurrentLanguageId() {
		return _ContentNmCurrentLanguageId;
	}

	@JSON
	@Override
	public String getContentNmCurrentValue() {
		Locale locale = getLocale(_ContentNmCurrentLanguageId);

		return getContentNm(locale);
	}

	@Override
	public Map<Locale, String> getContentNmMap() {
		return LocalizationUtil.getLocalizationMap(getContentNm());
	}

	@Override
	public void setContentNm(String ContentNm) {
		_ContentNm = ContentNm;
	}

	@Override
	public void setContentNm(String ContentNm, Locale locale) {
		setContentNm(ContentNm, locale, LocaleUtil.getDefault());
	}

	@Override
	public void setContentNm(String ContentNm, Locale locale,
		Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(ContentNm)) {
			setContentNm(LocalizationUtil.updateLocalization(getContentNm(),
					"ContentNm", ContentNm, languageId, defaultLanguageId));
		}
		else {
			setContentNm(LocalizationUtil.removeLocalization(getContentNm(),
					"ContentNm", languageId));
		}
	}

	@Override
	public void setContentNmCurrentLanguageId(String languageId) {
		_ContentNmCurrentLanguageId = languageId;
	}

	@Override
	public void setContentNmMap(Map<Locale, String> ContentNmMap) {
		setContentNmMap(ContentNmMap, LocaleUtil.getDefault());
	}

	@Override
	public void setContentNmMap(Map<Locale, String> ContentNmMap,
		Locale defaultLocale) {
		if (ContentNmMap == null) {
			return;
		}

		setContentNm(LocalizationUtil.updateLocalization(ContentNmMap,
				getContentNm(), "ContentNm",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getDivNm() {
		if (_divNm == null) {
			return StringPool.BLANK;
		}
		else {
			return _divNm;
		}
	}

	@Override
	public void setDivNm(String divNm) {
		_divNm = divNm;
	}

	@JSON
	@Override
	public boolean getFileUpLoadUseYn() {
		return _fileUpLoadUseYn;
	}

	@Override
	public boolean isFileUpLoadUseYn() {
		return _fileUpLoadUseYn;
	}

	@Override
	public void setFileUpLoadUseYn(boolean fileUpLoadUseYn) {
		_columnBitmask |= FILEUPLOADUSEYN_COLUMN_BITMASK;

		if (!_setOriginalFileUpLoadUseYn) {
			_setOriginalFileUpLoadUseYn = true;

			_originalFileUpLoadUseYn = _fileUpLoadUseYn;
		}

		_fileUpLoadUseYn = fileUpLoadUseYn;
	}

	public boolean getOriginalFileUpLoadUseYn() {
		return _originalFileUpLoadUseYn;
	}

	@JSON
	@Override
	public boolean getPopupYn() {
		return _popupYn;
	}

	@Override
	public boolean isPopupYn() {
		return _popupYn;
	}

	@Override
	public void setPopupYn(boolean popupYn) {
		_columnBitmask |= POPUPYN_COLUMN_BITMASK;

		if (!_setOriginalPopupYn) {
			_setOriginalPopupYn = true;

			_originalPopupYn = _popupYn;
		}

		_popupYn = popupYn;
	}

	public boolean getOriginalPopupYn() {
		return _originalPopupYn;
	}

	@JSON
	@Override
	public boolean getReplyYn() {
		return _replyYn;
	}

	@Override
	public boolean isReplyYn() {
		return _replyYn;
	}

	@Override
	public void setReplyYn(boolean replyYn) {
		_replyYn = replyYn;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			BoardDiv.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public String[] getAvailableLanguageIds() {
		Set<String> availableLanguageIds = new TreeSet<String>();

		Map<Locale, String> titleNmMap = getTitleNmMap();

		for (Map.Entry<Locale, String> entry : titleNmMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> ContentNmMap = getContentNmMap();

		for (Map.Entry<Locale, String> entry : ContentNmMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		return availableLanguageIds.toArray(new String[availableLanguageIds.size()]);
	}

	@Override
	public String getDefaultLanguageId() {
		String xml = getTitleNm();

		if (xml == null) {
			return StringPool.BLANK;
		}

		Locale defaultLocale = LocaleUtil.getDefault();

		return LocalizationUtil.getDefaultLanguageId(xml, defaultLocale);
	}

	@Override
	public void prepareLocalizedFieldsForImport() throws LocaleException {
		prepareLocalizedFieldsForImport(null);
	}

	@Override
	@SuppressWarnings("unused")
	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException {
		Locale defaultLocale = LocaleUtil.getDefault();

		String modelDefaultLanguageId = getDefaultLanguageId();

		String titleNm = getTitleNm(defaultLocale);

		if (Validator.isNull(titleNm)) {
			setTitleNm(getTitleNm(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setTitleNm(getTitleNm(defaultLocale), defaultLocale, defaultLocale);
		}

		String ContentNm = getContentNm(defaultLocale);

		if (Validator.isNull(ContentNm)) {
			setContentNm(getContentNm(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setContentNm(getContentNm(defaultLocale), defaultLocale,
				defaultLocale);
		}
	}

	@Override
	public BoardDiv toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (BoardDiv)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		BoardDivImpl boardDivImpl = new BoardDivImpl();

		boardDivImpl.setDivCd(getDivCd());
		boardDivImpl.setTitleNm(getTitleNm());
		boardDivImpl.setContentNm(getContentNm());
		boardDivImpl.setDivNm(getDivNm());
		boardDivImpl.setFileUpLoadUseYn(getFileUpLoadUseYn());
		boardDivImpl.setPopupYn(getPopupYn());
		boardDivImpl.setReplyYn(getReplyYn());

		boardDivImpl.resetOriginalValues();

		return boardDivImpl;
	}

	@Override
	public int compareTo(BoardDiv boardDiv) {
		int value = 0;

		if (getDivCd() < boardDiv.getDivCd()) {
			value = -1;
		}
		else if (getDivCd() > boardDiv.getDivCd()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof BoardDiv)) {
			return false;
		}

		BoardDiv boardDiv = (BoardDiv)obj;

		long primaryKey = boardDiv.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		BoardDivModelImpl boardDivModelImpl = this;

		boardDivModelImpl._originalFileUpLoadUseYn = boardDivModelImpl._fileUpLoadUseYn;

		boardDivModelImpl._setOriginalFileUpLoadUseYn = false;

		boardDivModelImpl._originalPopupYn = boardDivModelImpl._popupYn;

		boardDivModelImpl._setOriginalPopupYn = false;

		boardDivModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<BoardDiv> toCacheModel() {
		BoardDivCacheModel boardDivCacheModel = new BoardDivCacheModel();

		boardDivCacheModel.divCd = getDivCd();

		boardDivCacheModel.titleNm = getTitleNm();

		String titleNm = boardDivCacheModel.titleNm;

		if ((titleNm != null) && (titleNm.length() == 0)) {
			boardDivCacheModel.titleNm = null;
		}

		boardDivCacheModel.ContentNm = getContentNm();

		String ContentNm = boardDivCacheModel.ContentNm;

		if ((ContentNm != null) && (ContentNm.length() == 0)) {
			boardDivCacheModel.ContentNm = null;
		}

		boardDivCacheModel.divNm = getDivNm();

		String divNm = boardDivCacheModel.divNm;

		if ((divNm != null) && (divNm.length() == 0)) {
			boardDivCacheModel.divNm = null;
		}

		boardDivCacheModel.fileUpLoadUseYn = getFileUpLoadUseYn();

		boardDivCacheModel.popupYn = getPopupYn();

		boardDivCacheModel.replyYn = getReplyYn();

		return boardDivCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(15);

		sb.append("{divCd=");
		sb.append(getDivCd());
		sb.append(", titleNm=");
		sb.append(getTitleNm());
		sb.append(", ContentNm=");
		sb.append(getContentNm());
		sb.append(", divNm=");
		sb.append(getDivNm());
		sb.append(", fileUpLoadUseYn=");
		sb.append(getFileUpLoadUseYn());
		sb.append(", popupYn=");
		sb.append(getPopupYn());
		sb.append(", replyYn=");
		sb.append(getReplyYn());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(25);

		sb.append("<model><model-name>");
		sb.append("org.kisti.edison.multiboard.model.BoardDiv");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>divCd</column-name><column-value><![CDATA[");
		sb.append(getDivCd());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>titleNm</column-name><column-value><![CDATA[");
		sb.append(getTitleNm());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ContentNm</column-name><column-value><![CDATA[");
		sb.append(getContentNm());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>divNm</column-name><column-value><![CDATA[");
		sb.append(getDivNm());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fileUpLoadUseYn</column-name><column-value><![CDATA[");
		sb.append(getFileUpLoadUseYn());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>popupYn</column-name><column-value><![CDATA[");
		sb.append(getPopupYn());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>replyYn</column-name><column-value><![CDATA[");
		sb.append(getReplyYn());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = BoardDiv.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			BoardDiv.class
		};
	private long _divCd;
	private String _titleNm;
	private String _titleNmCurrentLanguageId;
	private String _ContentNm;
	private String _ContentNmCurrentLanguageId;
	private String _divNm;
	private boolean _fileUpLoadUseYn;
	private boolean _originalFileUpLoadUseYn;
	private boolean _setOriginalFileUpLoadUseYn;
	private boolean _popupYn;
	private boolean _originalPopupYn;
	private boolean _setOriginalPopupYn;
	private boolean _replyYn;
	private long _columnBitmask;
	private BoardDiv _escapedModel;
}
/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.kisti.edison.multiboard.service.base;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.persistence.UserPersistence;

import org.kisti.edison.multiboard.model.Board;
import org.kisti.edison.multiboard.service.BoardLocalService;
import org.kisti.edison.multiboard.service.persistence.BoardDivPersistence;
import org.kisti.edison.multiboard.service.persistence.BoardFinder;
import org.kisti.edison.multiboard.service.persistence.BoardPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the board local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link org.kisti.edison.multiboard.service.impl.BoardLocalServiceImpl}.
 * </p>
 *
 * @author mhkang
 * @see org.kisti.edison.multiboard.service.impl.BoardLocalServiceImpl
 * @see org.kisti.edison.multiboard.service.BoardLocalServiceUtil
 * @generated
 */
public abstract class BoardLocalServiceBaseImpl extends BaseLocalServiceImpl
	implements BoardLocalService, IdentifiableBean {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link org.kisti.edison.multiboard.service.BoardLocalServiceUtil} to access the board local service.
	 */

	/**
	 * Adds the board to the database. Also notifies the appropriate model listeners.
	 *
	 * @param board the board
	 * @return the board that was added
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public Board addBoard(Board board) throws SystemException {
		board.setNew(true);

		return boardPersistence.update(board);
	}

	/**
	 * Creates a new board with the primary key. Does not add the board to the database.
	 *
	 * @param boardSeq the primary key for the new board
	 * @return the new board
	 */
	@Override
	public Board createBoard(long boardSeq) {
		return boardPersistence.create(boardSeq);
	}

	/**
	 * Deletes the board with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param boardSeq the primary key of the board
	 * @return the board that was removed
	 * @throws PortalException if a board with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public Board deleteBoard(long boardSeq)
		throws PortalException, SystemException {
		return boardPersistence.remove(boardSeq);
	}

	/**
	 * Deletes the board from the database. Also notifies the appropriate model listeners.
	 *
	 * @param board the board
	 * @return the board that was removed
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public Board deleteBoard(Board board) throws SystemException {
		return boardPersistence.remove(board);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(Board.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery)
		throws SystemException {
		return boardPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link org.kisti.edison.multiboard.model.impl.BoardModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
		throws SystemException {
		return boardPersistence.findWithDynamicQuery(dynamicQuery, start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link org.kisti.edison.multiboard.model.impl.BoardModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator orderByComparator) throws SystemException {
		return boardPersistence.findWithDynamicQuery(dynamicQuery, start, end,
			orderByComparator);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery)
		throws SystemException {
		return boardPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) throws SystemException {
		return boardPersistence.countWithDynamicQuery(dynamicQuery, projection);
	}

	@Override
	public Board fetchBoard(long boardSeq) throws SystemException {
		return boardPersistence.fetchByPrimaryKey(boardSeq);
	}

	/**
	 * Returns the board with the primary key.
	 *
	 * @param boardSeq the primary key of the board
	 * @return the board
	 * @throws PortalException if a board with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public Board getBoard(long boardSeq)
		throws PortalException, SystemException {
		return boardPersistence.findByPrimaryKey(boardSeq);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException, SystemException {
		return boardPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the boards.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link org.kisti.edison.multiboard.model.impl.BoardModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of boards
	 * @param end the upper bound of the range of boards (not inclusive)
	 * @return the range of boards
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public List<Board> getBoards(int start, int end) throws SystemException {
		return boardPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of boards.
	 *
	 * @return the number of boards
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public int getBoardsCount() throws SystemException {
		return boardPersistence.countAll();
	}

	/**
	 * Updates the board in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param board the board
	 * @return the board that was updated
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public Board updateBoard(Board board) throws SystemException {
		return boardPersistence.update(board);
	}

	/**
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public void addBoardDivBoard(long divCd, long boardSeq)
		throws SystemException {
		boardDivPersistence.addBoard(divCd, boardSeq);
	}

	/**
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public void addBoardDivBoard(long divCd, Board board)
		throws SystemException {
		boardDivPersistence.addBoard(divCd, board);
	}

	/**
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public void addBoardDivBoards(long divCd, long[] boardSeqs)
		throws SystemException {
		boardDivPersistence.addBoards(divCd, boardSeqs);
	}

	/**
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public void addBoardDivBoards(long divCd, List<Board> Boards)
		throws SystemException {
		boardDivPersistence.addBoards(divCd, Boards);
	}

	/**
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public void clearBoardDivBoards(long divCd) throws SystemException {
		boardDivPersistence.clearBoards(divCd);
	}

	/**
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public void deleteBoardDivBoard(long divCd, long boardSeq)
		throws SystemException {
		boardDivPersistence.removeBoard(divCd, boardSeq);
	}

	/**
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public void deleteBoardDivBoard(long divCd, Board board)
		throws SystemException {
		boardDivPersistence.removeBoard(divCd, board);
	}

	/**
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public void deleteBoardDivBoards(long divCd, long[] boardSeqs)
		throws SystemException {
		boardDivPersistence.removeBoards(divCd, boardSeqs);
	}

	/**
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public void deleteBoardDivBoards(long divCd, List<Board> Boards)
		throws SystemException {
		boardDivPersistence.removeBoards(divCd, Boards);
	}

	/**
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public List<Board> getBoardDivBoards(long divCd) throws SystemException {
		return boardDivPersistence.getBoards(divCd);
	}

	/**
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public List<Board> getBoardDivBoards(long divCd, int start, int end)
		throws SystemException {
		return boardDivPersistence.getBoards(divCd, start, end);
	}

	/**
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public List<Board> getBoardDivBoards(long divCd, int start, int end,
		OrderByComparator orderByComparator) throws SystemException {
		return boardDivPersistence.getBoards(divCd, start, end,
			orderByComparator);
	}

	/**
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public int getBoardDivBoardsCount(long divCd) throws SystemException {
		return boardDivPersistence.getBoardsSize(divCd);
	}

	/**
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public boolean hasBoardDivBoard(long divCd, long boardSeq)
		throws SystemException {
		return boardDivPersistence.containsBoard(divCd, boardSeq);
	}

	/**
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public boolean hasBoardDivBoards(long divCd) throws SystemException {
		return boardDivPersistence.containsBoards(divCd);
	}

	/**
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public void setBoardDivBoards(long divCd, long[] boardSeqs)
		throws SystemException {
		boardDivPersistence.setBoards(divCd, boardSeqs);
	}

	/**
	 * Returns the board local service.
	 *
	 * @return the board local service
	 */
	public org.kisti.edison.multiboard.service.BoardLocalService getBoardLocalService() {
		return boardLocalService;
	}

	/**
	 * Sets the board local service.
	 *
	 * @param boardLocalService the board local service
	 */
	public void setBoardLocalService(
		org.kisti.edison.multiboard.service.BoardLocalService boardLocalService) {
		this.boardLocalService = boardLocalService;
	}

	/**
	 * Returns the board remote service.
	 *
	 * @return the board remote service
	 */
	public org.kisti.edison.multiboard.service.BoardService getBoardService() {
		return boardService;
	}

	/**
	 * Sets the board remote service.
	 *
	 * @param boardService the board remote service
	 */
	public void setBoardService(
		org.kisti.edison.multiboard.service.BoardService boardService) {
		this.boardService = boardService;
	}

	/**
	 * Returns the board persistence.
	 *
	 * @return the board persistence
	 */
	public BoardPersistence getBoardPersistence() {
		return boardPersistence;
	}

	/**
	 * Sets the board persistence.
	 *
	 * @param boardPersistence the board persistence
	 */
	public void setBoardPersistence(BoardPersistence boardPersistence) {
		this.boardPersistence = boardPersistence;
	}

	/**
	 * Returns the board finder.
	 *
	 * @return the board finder
	 */
	public BoardFinder getBoardFinder() {
		return boardFinder;
	}

	/**
	 * Sets the board finder.
	 *
	 * @param boardFinder the board finder
	 */
	public void setBoardFinder(BoardFinder boardFinder) {
		this.boardFinder = boardFinder;
	}

	/**
	 * Returns the board div local service.
	 *
	 * @return the board div local service
	 */
	public org.kisti.edison.multiboard.service.BoardDivLocalService getBoardDivLocalService() {
		return boardDivLocalService;
	}

	/**
	 * Sets the board div local service.
	 *
	 * @param boardDivLocalService the board div local service
	 */
	public void setBoardDivLocalService(
		org.kisti.edison.multiboard.service.BoardDivLocalService boardDivLocalService) {
		this.boardDivLocalService = boardDivLocalService;
	}

	/**
	 * Returns the board div remote service.
	 *
	 * @return the board div remote service
	 */
	public org.kisti.edison.multiboard.service.BoardDivService getBoardDivService() {
		return boardDivService;
	}

	/**
	 * Sets the board div remote service.
	 *
	 * @param boardDivService the board div remote service
	 */
	public void setBoardDivService(
		org.kisti.edison.multiboard.service.BoardDivService boardDivService) {
		this.boardDivService = boardDivService;
	}

	/**
	 * Returns the board div persistence.
	 *
	 * @return the board div persistence
	 */
	public BoardDivPersistence getBoardDivPersistence() {
		return boardDivPersistence;
	}

	/**
	 * Sets the board div persistence.
	 *
	 * @param boardDivPersistence the board div persistence
	 */
	public void setBoardDivPersistence(BoardDivPersistence boardDivPersistence) {
		this.boardDivPersistence = boardDivPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user remote service.
	 *
	 * @return the user remote service
	 */
	public com.liferay.portal.service.UserService getUserService() {
		return userService;
	}

	/**
	 * Sets the user remote service.
	 *
	 * @param userService the user remote service
	 */
	public void setUserService(
		com.liferay.portal.service.UserService userService) {
		this.userService = userService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		Class<?> clazz = getClass();

		_classLoader = clazz.getClassLoader();

		PersistedModelLocalServiceRegistryUtil.register("org.kisti.edison.multiboard.model.Board",
			boardLocalService);
	}

	public void destroy() {
		PersistedModelLocalServiceRegistryUtil.unregister(
			"org.kisti.edison.multiboard.model.Board");
	}

	/**
	 * Returns the Spring bean ID for this bean.
	 *
	 * @return the Spring bean ID for this bean
	 */
	@Override
	public String getBeanIdentifier() {
		return _beanIdentifier;
	}

	/**
	 * Sets the Spring bean ID for this bean.
	 *
	 * @param beanIdentifier the Spring bean ID for this bean
	 */
	@Override
	public void setBeanIdentifier(String beanIdentifier) {
		_beanIdentifier = beanIdentifier;
	}

	@Override
	public Object invokeMethod(String name, String[] parameterTypes,
		Object[] arguments) throws Throwable {
		Thread currentThread = Thread.currentThread();

		ClassLoader contextClassLoader = currentThread.getContextClassLoader();

		if (contextClassLoader != _classLoader) {
			currentThread.setContextClassLoader(_classLoader);
		}

		try {
			return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
		}
		finally {
			if (contextClassLoader != _classLoader) {
				currentThread.setContextClassLoader(contextClassLoader);
			}
		}
	}

	protected Class<?> getModelClass() {
		return Board.class;
	}

	protected String getModelClassName() {
		return Board.class.getName();
	}

	/**
	 * Performs an SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) throws SystemException {
		try {
			DataSource dataSource = boardPersistence.getDataSource();

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql, new int[0]);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = org.kisti.edison.multiboard.service.BoardLocalService.class)
	protected org.kisti.edison.multiboard.service.BoardLocalService boardLocalService;
	@BeanReference(type = org.kisti.edison.multiboard.service.BoardService.class)
	protected org.kisti.edison.multiboard.service.BoardService boardService;
	@BeanReference(type = BoardPersistence.class)
	protected BoardPersistence boardPersistence;
	@BeanReference(type = BoardFinder.class)
	protected BoardFinder boardFinder;
	@BeanReference(type = org.kisti.edison.multiboard.service.BoardDivLocalService.class)
	protected org.kisti.edison.multiboard.service.BoardDivLocalService boardDivLocalService;
	@BeanReference(type = org.kisti.edison.multiboard.service.BoardDivService.class)
	protected org.kisti.edison.multiboard.service.BoardDivService boardDivService;
	@BeanReference(type = BoardDivPersistence.class)
	protected BoardDivPersistence boardDivPersistence;
	@BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
	protected com.liferay.counter.service.CounterLocalService counterLocalService;
	@BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
	protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
	@BeanReference(type = com.liferay.portal.service.UserLocalService.class)
	protected com.liferay.portal.service.UserLocalService userLocalService;
	@BeanReference(type = com.liferay.portal.service.UserService.class)
	protected com.liferay.portal.service.UserService userService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	private String _beanIdentifier;
	private ClassLoader _classLoader;
	private BoardLocalServiceClpInvoker _clpInvoker = new BoardLocalServiceClpInvoker();
}
/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.kisti.edison.multiboard.model;

import com.liferay.portal.LocaleException;
import com.liferay.portal.kernel.bean.AutoEscape;
import com.liferay.portal.model.BaseModel;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;

import java.io.Serializable;

import java.util.Date;
import java.util.Locale;
import java.util.Map;

/**
 * The base model interface for the Board service. Represents a row in the &quot;EDCON_Board&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This interface and its corresponding implementation {@link org.kisti.edison.multiboard.model.impl.BoardModelImpl} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link org.kisti.edison.multiboard.model.impl.BoardImpl}.
 * </p>
 *
 * @author mhkang
 * @see Board
 * @see org.kisti.edison.multiboard.model.impl.BoardImpl
 * @see org.kisti.edison.multiboard.model.impl.BoardModelImpl
 * @generated
 */
public interface BoardModel extends BaseModel<Board> {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this interface directly. All methods that expect a board model instance should use the {@link Board} interface instead.
	 */

	/**
	 * Returns the primary key of this board.
	 *
	 * @return the primary key of this board
	 */
	public long getPrimaryKey();

	/**
	 * Sets the primary key of this board.
	 *
	 * @param primaryKey the primary key of this board
	 */
	public void setPrimaryKey(long primaryKey);

	/**
	 * Returns the board seq of this board.
	 *
	 * @return the board seq of this board
	 */
	public long getBoardSeq();

	/**
	 * Sets the board seq of this board.
	 *
	 * @param boardSeq the board seq of this board
	 */
	public void setBoardSeq(long boardSeq);

	/**
	 * Returns the title of this board.
	 *
	 * @return the title of this board
	 */
	public String getTitle();

	/**
	 * Returns the localized title of this board in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized title of this board
	 */
	@AutoEscape
	public String getTitle(Locale locale);

	/**
	 * Returns the localized title of this board in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized title of this board. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getTitle(Locale locale, boolean useDefault);

	/**
	 * Returns the localized title of this board in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized title of this board
	 */
	@AutoEscape
	public String getTitle(String languageId);

	/**
	 * Returns the localized title of this board in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized title of this board
	 */
	@AutoEscape
	public String getTitle(String languageId, boolean useDefault);

	@AutoEscape
	public String getTitleCurrentLanguageId();

	@AutoEscape
	public String getTitleCurrentValue();

	/**
	 * Returns a map of the locales and localized titles of this board.
	 *
	 * @return the locales and localized titles of this board
	 */
	public Map<Locale, String> getTitleMap();

	/**
	 * Sets the title of this board.
	 *
	 * @param title the title of this board
	 */
	public void setTitle(String title);

	/**
	 * Sets the localized title of this board in the language.
	 *
	 * @param title the localized title of this board
	 * @param locale the locale of the language
	 */
	public void setTitle(String title, Locale locale);

	/**
	 * Sets the localized title of this board in the language, and sets the default locale.
	 *
	 * @param title the localized title of this board
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setTitle(String title, Locale locale, Locale defaultLocale);

	public void setTitleCurrentLanguageId(String languageId);

	/**
	 * Sets the localized titles of this board from the map of locales and localized titles.
	 *
	 * @param titleMap the locales and localized titles of this board
	 */
	public void setTitleMap(Map<Locale, String> titleMap);

	/**
	 * Sets the localized titles of this board from the map of locales and localized titles, and sets the default locale.
	 *
	 * @param titleMap the locales and localized titles of this board
	 * @param defaultLocale the default locale
	 */
	public void setTitleMap(Map<Locale, String> titleMap, Locale defaultLocale);

	/**
	 * Returns the content of this board.
	 *
	 * @return the content of this board
	 */
	public String getContent();

	/**
	 * Returns the localized content of this board in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized content of this board
	 */
	@AutoEscape
	public String getContent(Locale locale);

	/**
	 * Returns the localized content of this board in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized content of this board. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getContent(Locale locale, boolean useDefault);

	/**
	 * Returns the localized content of this board in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized content of this board
	 */
	@AutoEscape
	public String getContent(String languageId);

	/**
	 * Returns the localized content of this board in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized content of this board
	 */
	@AutoEscape
	public String getContent(String languageId, boolean useDefault);

	@AutoEscape
	public String getContentCurrentLanguageId();

	@AutoEscape
	public String getContentCurrentValue();

	/**
	 * Returns a map of the locales and localized contents of this board.
	 *
	 * @return the locales and localized contents of this board
	 */
	public Map<Locale, String> getContentMap();

	/**
	 * Sets the content of this board.
	 *
	 * @param content the content of this board
	 */
	public void setContent(String content);

	/**
	 * Sets the localized content of this board in the language.
	 *
	 * @param content the localized content of this board
	 * @param locale the locale of the language
	 */
	public void setContent(String content, Locale locale);

	/**
	 * Sets the localized content of this board in the language, and sets the default locale.
	 *
	 * @param content the localized content of this board
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setContent(String content, Locale locale, Locale defaultLocale);

	public void setContentCurrentLanguageId(String languageId);

	/**
	 * Sets the localized contents of this board from the map of locales and localized contents.
	 *
	 * @param contentMap the locales and localized contents of this board
	 */
	public void setContentMap(Map<Locale, String> contentMap);

	/**
	 * Sets the localized contents of this board from the map of locales and localized contents, and sets the default locale.
	 *
	 * @param contentMap the locales and localized contents of this board
	 * @param defaultLocale the default locale
	 */
	public void setContentMap(Map<Locale, String> contentMap,
		Locale defaultLocale);

	/**
	 * Returns the group ID of this board.
	 *
	 * @return the group ID of this board
	 */
	public long getGroupId();

	/**
	 * Sets the group ID of this board.
	 *
	 * @param groupId the group ID of this board
	 */
	public void setGroupId(long groupId);

	/**
	 * Returns the custom ID of this board.
	 *
	 * @return the custom ID of this board
	 */
	@AutoEscape
	public String getCustomId();

	/**
	 * Sets the custom ID of this board.
	 *
	 * @param customId the custom ID of this board
	 */
	public void setCustomId(String customId);

	/**
	 * Returns the writer ID of this board.
	 *
	 * @return the writer ID of this board
	 */
	public long getWriterId();

	/**
	 * Sets the writer ID of this board.
	 *
	 * @param writerId the writer ID of this board
	 */
	public void setWriterId(long writerId);

	/**
	 * Returns the writer date of this board.
	 *
	 * @return the writer date of this board
	 */
	public Date getWriterDate();

	/**
	 * Sets the writer date of this board.
	 *
	 * @param writerDate the writer date of this board
	 */
	public void setWriterDate(Date writerDate);

	/**
	 * Returns the read cnt of this board.
	 *
	 * @return the read cnt of this board
	 */
	public int getReadCnt();

	/**
	 * Sets the read cnt of this board.
	 *
	 * @param readCnt the read cnt of this board
	 */
	public void setReadCnt(int readCnt);

	/**
	 * Returns the group board seq of this board.
	 *
	 * @return the group board seq of this board
	 */
	public int getGroupBoardSeq();

	/**
	 * Sets the group board seq of this board.
	 *
	 * @param groupBoardSeq the group board seq of this board
	 */
	public void setGroupBoardSeq(int groupBoardSeq);

	/**
	 * Returns the group board turn of this board.
	 *
	 * @return the group board turn of this board
	 */
	public int getGroupBoardTurn();

	/**
	 * Sets the group board turn of this board.
	 *
	 * @param groupBoardTurn the group board turn of this board
	 */
	public void setGroupBoardTurn(int groupBoardTurn);

	/**
	 * Returns the reply depth of this board.
	 *
	 * @return the reply depth of this board
	 */
	public int getReplyDepth();

	/**
	 * Sets the reply depth of this board.
	 *
	 * @param replyDepth the reply depth of this board
	 */
	public void setReplyDepth(int replyDepth);

	/**
	 * Returns the site group of this board.
	 *
	 * @return the site group of this board
	 */
	@AutoEscape
	public String getSiteGroup();

	/**
	 * Sets the site group of this board.
	 *
	 * @param siteGroup the site group of this board
	 */
	public void setSiteGroup(String siteGroup);

	/**
	 * Returns the popup yn of this board.
	 *
	 * @return the popup yn of this board
	 */
	public boolean getPopupYn();

	/**
	 * Returns <code>true</code> if this board is popup yn.
	 *
	 * @return <code>true</code> if this board is popup yn; <code>false</code> otherwise
	 */
	public boolean isPopupYn();

	/**
	 * Sets whether this board is popup yn.
	 *
	 * @param popupYn the popup yn of this board
	 */
	public void setPopupYn(boolean popupYn);

	/**
	 * Returns the popup start dt of this board.
	 *
	 * @return the popup start dt of this board
	 */
	public Date getPopupStartDt();

	/**
	 * Sets the popup start dt of this board.
	 *
	 * @param popupStartDt the popup start dt of this board
	 */
	public void setPopupStartDt(Date popupStartDt);

	/**
	 * Returns the popup end dt of this board.
	 *
	 * @return the popup end dt of this board
	 */
	public Date getPopupEndDt();

	/**
	 * Sets the popup end dt of this board.
	 *
	 * @param popupEndDt the popup end dt of this board
	 */
	public void setPopupEndDt(Date popupEndDt);

	/**
	 * Returns the insert ID of this board.
	 *
	 * @return the insert ID of this board
	 */
	public long getInsertId();

	/**
	 * Sets the insert ID of this board.
	 *
	 * @param insertId the insert ID of this board
	 */
	public void setInsertId(long insertId);

	/**
	 * Returns the insert dt of this board.
	 *
	 * @return the insert dt of this board
	 */
	public Date getInsertDt();

	/**
	 * Sets the insert dt of this board.
	 *
	 * @param insertDt the insert dt of this board
	 */
	public void setInsertDt(Date insertDt);

	/**
	 * Returns the update ID of this board.
	 *
	 * @return the update ID of this board
	 */
	public long getUpdateId();

	/**
	 * Sets the update ID of this board.
	 *
	 * @param updateId the update ID of this board
	 */
	public void setUpdateId(long updateId);

	/**
	 * Returns the update dt of this board.
	 *
	 * @return the update dt of this board
	 */
	public Date getUpdateDt();

	/**
	 * Sets the update dt of this board.
	 *
	 * @param updateDt the update dt of this board
	 */
	public void setUpdateDt(Date updateDt);

	@Override
	public boolean isNew();

	@Override
	public void setNew(boolean n);

	@Override
	public boolean isCachedModel();

	@Override
	public void setCachedModel(boolean cachedModel);

	@Override
	public boolean isEscapedModel();

	@Override
	public Serializable getPrimaryKeyObj();

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj);

	@Override
	public ExpandoBridge getExpandoBridge();

	@Override
	public void setExpandoBridgeAttributes(BaseModel<?> baseModel);

	@Override
	public void setExpandoBridgeAttributes(ExpandoBridge expandoBridge);

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext);

	public String[] getAvailableLanguageIds();

	public String getDefaultLanguageId();

	public void prepareLocalizedFieldsForImport() throws LocaleException;

	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException;

	@Override
	public Object clone();

	@Override
	public int compareTo(org.kisti.edison.multiboard.model.Board board);

	@Override
	public int hashCode();

	@Override
	public CacheModel<org.kisti.edison.multiboard.model.Board> toCacheModel();

	@Override
	public org.kisti.edison.multiboard.model.Board toEscapedModel();

	@Override
	public org.kisti.edison.multiboard.model.Board toUnescapedModel();

	@Override
	public String toString();

	@Override
	public String toXmlString();
}
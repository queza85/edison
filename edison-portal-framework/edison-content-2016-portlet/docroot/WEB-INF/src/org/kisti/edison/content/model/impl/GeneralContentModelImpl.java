/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.kisti.edison.content.model.impl;

import com.liferay.portal.LocaleException;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.LocaleUtil;
import com.liferay.portal.kernel.util.LocalizationUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.kernel.util.Validator;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import org.kisti.edison.content.model.GeneralContent;
import org.kisti.edison.content.model.GeneralContentModel;
import org.kisti.edison.content.model.GeneralContentSoap;
import org.kisti.edison.content.service.persistence.GeneralContentPK;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;

/**
 * The base model implementation for the GeneralContent service. Represents a row in the &quot;EDMED_GeneralContent&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link org.kisti.edison.content.model.GeneralContentModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link GeneralContentImpl}.
 * </p>
 *
 * @author EDISON
 * @see GeneralContentImpl
 * @see org.kisti.edison.content.model.GeneralContent
 * @see org.kisti.edison.content.model.GeneralContentModel
 * @generated
 */
@JSON(strict = true)
public class GeneralContentModelImpl extends BaseModelImpl<GeneralContent>
	implements GeneralContentModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a general content model instance should use the {@link org.kisti.edison.content.model.GeneralContent} interface instead.
	 */
	public static final String TABLE_NAME = "EDMED_GeneralContent";
	public static final Object[][] TABLE_COLUMNS = {
			{ "contentSeq", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "contentDiv", Types.BIGINT },
			{ "title", Types.VARCHAR },
			{ "downloadCnt", Types.BIGINT },
			{ "serviceLanguage", Types.VARCHAR },
			{ "projectYn", Types.VARCHAR },
			{ "projectId", Types.BIGINT },
			{ "insertId", Types.BIGINT },
			{ "insertDate", Types.TIMESTAMP },
			{ "updateId", Types.BIGINT },
			{ "updateDate", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table EDMED_GeneralContent (contentSeq LONG not null,groupId LONG not null,contentDiv LONG,title STRING null,downloadCnt LONG,serviceLanguage VARCHAR(75) null,projectYn VARCHAR(75) null,projectId LONG,insertId LONG,insertDate DATE null,updateId LONG,updateDate DATE null,primary key (contentSeq, groupId))";
	public static final String TABLE_SQL_DROP = "drop table EDMED_GeneralContent";
	public static final String ORDER_BY_JPQL = " ORDER BY generalContent.id.contentSeq DESC";
	public static final String ORDER_BY_SQL = " ORDER BY EDMED_GeneralContent.contentSeq DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.org.kisti.edison.content.model.GeneralContent"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.org.kisti.edison.content.model.GeneralContent"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.org.kisti.edison.content.model.GeneralContent"),
			true);
	public static long CONTENTDIV_COLUMN_BITMASK = 1L;
	public static long CONTENTSEQ_COLUMN_BITMASK = 2L;
	public static long GROUPID_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static GeneralContent toModel(GeneralContentSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		GeneralContent model = new GeneralContentImpl();

		model.setContentSeq(soapModel.getContentSeq());
		model.setGroupId(soapModel.getGroupId());
		model.setContentDiv(soapModel.getContentDiv());
		model.setTitle(soapModel.getTitle());
		model.setDownloadCnt(soapModel.getDownloadCnt());
		model.setServiceLanguage(soapModel.getServiceLanguage());
		model.setProjectYn(soapModel.getProjectYn());
		model.setProjectId(soapModel.getProjectId());
		model.setInsertId(soapModel.getInsertId());
		model.setInsertDate(soapModel.getInsertDate());
		model.setUpdateId(soapModel.getUpdateId());
		model.setUpdateDate(soapModel.getUpdateDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<GeneralContent> toModels(GeneralContentSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<GeneralContent> models = new ArrayList<GeneralContent>(soapModels.length);

		for (GeneralContentSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.org.kisti.edison.content.model.GeneralContent"));

	public GeneralContentModelImpl() {
	}

	@Override
	public GeneralContentPK getPrimaryKey() {
		return new GeneralContentPK(_contentSeq, _groupId);
	}

	@Override
	public void setPrimaryKey(GeneralContentPK primaryKey) {
		setContentSeq(primaryKey.contentSeq);
		setGroupId(primaryKey.groupId);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return new GeneralContentPK(_contentSeq, _groupId);
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((GeneralContentPK)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return GeneralContent.class;
	}

	@Override
	public String getModelClassName() {
		return GeneralContent.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("contentSeq", getContentSeq());
		attributes.put("groupId", getGroupId());
		attributes.put("contentDiv", getContentDiv());
		attributes.put("title", getTitle());
		attributes.put("downloadCnt", getDownloadCnt());
		attributes.put("serviceLanguage", getServiceLanguage());
		attributes.put("projectYn", getProjectYn());
		attributes.put("projectId", getProjectId());
		attributes.put("insertId", getInsertId());
		attributes.put("insertDate", getInsertDate());
		attributes.put("updateId", getUpdateId());
		attributes.put("updateDate", getUpdateDate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long contentSeq = (Long)attributes.get("contentSeq");

		if (contentSeq != null) {
			setContentSeq(contentSeq);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long contentDiv = (Long)attributes.get("contentDiv");

		if (contentDiv != null) {
			setContentDiv(contentDiv);
		}

		String title = (String)attributes.get("title");

		if (title != null) {
			setTitle(title);
		}

		Long downloadCnt = (Long)attributes.get("downloadCnt");

		if (downloadCnt != null) {
			setDownloadCnt(downloadCnt);
		}

		String serviceLanguage = (String)attributes.get("serviceLanguage");

		if (serviceLanguage != null) {
			setServiceLanguage(serviceLanguage);
		}

		String projectYn = (String)attributes.get("projectYn");

		if (projectYn != null) {
			setProjectYn(projectYn);
		}

		Long projectId = (Long)attributes.get("projectId");

		if (projectId != null) {
			setProjectId(projectId);
		}

		Long insertId = (Long)attributes.get("insertId");

		if (insertId != null) {
			setInsertId(insertId);
		}

		Date insertDate = (Date)attributes.get("insertDate");

		if (insertDate != null) {
			setInsertDate(insertDate);
		}

		Long updateId = (Long)attributes.get("updateId");

		if (updateId != null) {
			setUpdateId(updateId);
		}

		Date updateDate = (Date)attributes.get("updateDate");

		if (updateDate != null) {
			setUpdateDate(updateDate);
		}
	}

	@JSON
	@Override
	public long getContentSeq() {
		return _contentSeq;
	}

	@Override
	public void setContentSeq(long contentSeq) {
		_columnBitmask = -1L;

		if (!_setOriginalContentSeq) {
			_setOriginalContentSeq = true;

			_originalContentSeq = _contentSeq;
		}

		_contentSeq = contentSeq;
	}

	public long getOriginalContentSeq() {
		return _originalContentSeq;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getContentDiv() {
		return _contentDiv;
	}

	@Override
	public void setContentDiv(long contentDiv) {
		_columnBitmask |= CONTENTDIV_COLUMN_BITMASK;

		if (!_setOriginalContentDiv) {
			_setOriginalContentDiv = true;

			_originalContentDiv = _contentDiv;
		}

		_contentDiv = contentDiv;
	}

	public long getOriginalContentDiv() {
		return _originalContentDiv;
	}

	@JSON
	@Override
	public String getTitle() {
		if (_title == null) {
			return StringPool.BLANK;
		}
		else {
			return _title;
		}
	}

	@Override
	public String getTitle(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getTitle(languageId);
	}

	@Override
	public String getTitle(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getTitle(languageId, useDefault);
	}

	@Override
	public String getTitle(String languageId) {
		return LocalizationUtil.getLocalization(getTitle(), languageId);
	}

	@Override
	public String getTitle(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(getTitle(), languageId,
			useDefault);
	}

	@Override
	public String getTitleCurrentLanguageId() {
		return _titleCurrentLanguageId;
	}

	@JSON
	@Override
	public String getTitleCurrentValue() {
		Locale locale = getLocale(_titleCurrentLanguageId);

		return getTitle(locale);
	}

	@Override
	public Map<Locale, String> getTitleMap() {
		return LocalizationUtil.getLocalizationMap(getTitle());
	}

	@Override
	public void setTitle(String title) {
		_title = title;
	}

	@Override
	public void setTitle(String title, Locale locale) {
		setTitle(title, locale, LocaleUtil.getDefault());
	}

	@Override
	public void setTitle(String title, Locale locale, Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(title)) {
			setTitle(LocalizationUtil.updateLocalization(getTitle(), "Title",
					title, languageId, defaultLanguageId));
		}
		else {
			setTitle(LocalizationUtil.removeLocalization(getTitle(), "Title",
					languageId));
		}
	}

	@Override
	public void setTitleCurrentLanguageId(String languageId) {
		_titleCurrentLanguageId = languageId;
	}

	@Override
	public void setTitleMap(Map<Locale, String> titleMap) {
		setTitleMap(titleMap, LocaleUtil.getDefault());
	}

	@Override
	public void setTitleMap(Map<Locale, String> titleMap, Locale defaultLocale) {
		if (titleMap == null) {
			return;
		}

		setTitle(LocalizationUtil.updateLocalization(titleMap, getTitle(),
				"Title", LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public long getDownloadCnt() {
		return _downloadCnt;
	}

	@Override
	public void setDownloadCnt(long downloadCnt) {
		_downloadCnt = downloadCnt;
	}

	@JSON
	@Override
	public String getServiceLanguage() {
		if (_serviceLanguage == null) {
			return StringPool.BLANK;
		}
		else {
			return _serviceLanguage;
		}
	}

	@Override
	public void setServiceLanguage(String serviceLanguage) {
		_serviceLanguage = serviceLanguage;
	}

	@JSON
	@Override
	public String getProjectYn() {
		if (_projectYn == null) {
			return StringPool.BLANK;
		}
		else {
			return _projectYn;
		}
	}

	@Override
	public void setProjectYn(String projectYn) {
		_projectYn = projectYn;
	}

	@JSON
	@Override
	public long getProjectId() {
		return _projectId;
	}

	@Override
	public void setProjectId(long projectId) {
		_projectId = projectId;
	}

	@JSON
	@Override
	public long getInsertId() {
		return _insertId;
	}

	@Override
	public void setInsertId(long insertId) {
		_insertId = insertId;
	}

	@JSON
	@Override
	public Date getInsertDate() {
		return _insertDate;
	}

	@Override
	public void setInsertDate(Date insertDate) {
		_insertDate = insertDate;
	}

	@JSON
	@Override
	public long getUpdateId() {
		return _updateId;
	}

	@Override
	public void setUpdateId(long updateId) {
		_updateId = updateId;
	}

	@JSON
	@Override
	public Date getUpdateDate() {
		return _updateDate;
	}

	@Override
	public void setUpdateDate(Date updateDate) {
		_updateDate = updateDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public String[] getAvailableLanguageIds() {
		Set<String> availableLanguageIds = new TreeSet<String>();

		Map<Locale, String> titleMap = getTitleMap();

		for (Map.Entry<Locale, String> entry : titleMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		return availableLanguageIds.toArray(new String[availableLanguageIds.size()]);
	}

	@Override
	public String getDefaultLanguageId() {
		String xml = getTitle();

		if (xml == null) {
			return StringPool.BLANK;
		}

		Locale defaultLocale = LocaleUtil.getDefault();

		return LocalizationUtil.getDefaultLanguageId(xml, defaultLocale);
	}

	@Override
	public void prepareLocalizedFieldsForImport() throws LocaleException {
		prepareLocalizedFieldsForImport(null);
	}

	@Override
	@SuppressWarnings("unused")
	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException {
		Locale defaultLocale = LocaleUtil.getDefault();

		String modelDefaultLanguageId = getDefaultLanguageId();

		String title = getTitle(defaultLocale);

		if (Validator.isNull(title)) {
			setTitle(getTitle(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setTitle(getTitle(defaultLocale), defaultLocale, defaultLocale);
		}
	}

	@Override
	public GeneralContent toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (GeneralContent)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		GeneralContentImpl generalContentImpl = new GeneralContentImpl();

		generalContentImpl.setContentSeq(getContentSeq());
		generalContentImpl.setGroupId(getGroupId());
		generalContentImpl.setContentDiv(getContentDiv());
		generalContentImpl.setTitle(getTitle());
		generalContentImpl.setDownloadCnt(getDownloadCnt());
		generalContentImpl.setServiceLanguage(getServiceLanguage());
		generalContentImpl.setProjectYn(getProjectYn());
		generalContentImpl.setProjectId(getProjectId());
		generalContentImpl.setInsertId(getInsertId());
		generalContentImpl.setInsertDate(getInsertDate());
		generalContentImpl.setUpdateId(getUpdateId());
		generalContentImpl.setUpdateDate(getUpdateDate());

		generalContentImpl.resetOriginalValues();

		return generalContentImpl;
	}

	@Override
	public int compareTo(GeneralContent generalContent) {
		int value = 0;

		if (getContentSeq() < generalContent.getContentSeq()) {
			value = -1;
		}
		else if (getContentSeq() > generalContent.getContentSeq()) {
			value = 1;
		}
		else {
			value = 0;
		}

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof GeneralContent)) {
			return false;
		}

		GeneralContent generalContent = (GeneralContent)obj;

		GeneralContentPK primaryKey = generalContent.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public void resetOriginalValues() {
		GeneralContentModelImpl generalContentModelImpl = this;

		generalContentModelImpl._originalContentSeq = generalContentModelImpl._contentSeq;

		generalContentModelImpl._setOriginalContentSeq = false;

		generalContentModelImpl._originalGroupId = generalContentModelImpl._groupId;

		generalContentModelImpl._setOriginalGroupId = false;

		generalContentModelImpl._originalContentDiv = generalContentModelImpl._contentDiv;

		generalContentModelImpl._setOriginalContentDiv = false;

		generalContentModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<GeneralContent> toCacheModel() {
		GeneralContentCacheModel generalContentCacheModel = new GeneralContentCacheModel();

		generalContentCacheModel.contentSeq = getContentSeq();

		generalContentCacheModel.groupId = getGroupId();

		generalContentCacheModel.contentDiv = getContentDiv();

		generalContentCacheModel.title = getTitle();

		String title = generalContentCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			generalContentCacheModel.title = null;
		}

		generalContentCacheModel.downloadCnt = getDownloadCnt();

		generalContentCacheModel.serviceLanguage = getServiceLanguage();

		String serviceLanguage = generalContentCacheModel.serviceLanguage;

		if ((serviceLanguage != null) && (serviceLanguage.length() == 0)) {
			generalContentCacheModel.serviceLanguage = null;
		}

		generalContentCacheModel.projectYn = getProjectYn();

		String projectYn = generalContentCacheModel.projectYn;

		if ((projectYn != null) && (projectYn.length() == 0)) {
			generalContentCacheModel.projectYn = null;
		}

		generalContentCacheModel.projectId = getProjectId();

		generalContentCacheModel.insertId = getInsertId();

		Date insertDate = getInsertDate();

		if (insertDate != null) {
			generalContentCacheModel.insertDate = insertDate.getTime();
		}
		else {
			generalContentCacheModel.insertDate = Long.MIN_VALUE;
		}

		generalContentCacheModel.updateId = getUpdateId();

		Date updateDate = getUpdateDate();

		if (updateDate != null) {
			generalContentCacheModel.updateDate = updateDate.getTime();
		}
		else {
			generalContentCacheModel.updateDate = Long.MIN_VALUE;
		}

		return generalContentCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(25);

		sb.append("{contentSeq=");
		sb.append(getContentSeq());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", contentDiv=");
		sb.append(getContentDiv());
		sb.append(", title=");
		sb.append(getTitle());
		sb.append(", downloadCnt=");
		sb.append(getDownloadCnt());
		sb.append(", serviceLanguage=");
		sb.append(getServiceLanguage());
		sb.append(", projectYn=");
		sb.append(getProjectYn());
		sb.append(", projectId=");
		sb.append(getProjectId());
		sb.append(", insertId=");
		sb.append(getInsertId());
		sb.append(", insertDate=");
		sb.append(getInsertDate());
		sb.append(", updateId=");
		sb.append(getUpdateId());
		sb.append(", updateDate=");
		sb.append(getUpdateDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(40);

		sb.append("<model><model-name>");
		sb.append("org.kisti.edison.content.model.GeneralContent");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>contentSeq</column-name><column-value><![CDATA[");
		sb.append(getContentSeq());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>contentDiv</column-name><column-value><![CDATA[");
		sb.append(getContentDiv());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>title</column-name><column-value><![CDATA[");
		sb.append(getTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>downloadCnt</column-name><column-value><![CDATA[");
		sb.append(getDownloadCnt());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>serviceLanguage</column-name><column-value><![CDATA[");
		sb.append(getServiceLanguage());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>projectYn</column-name><column-value><![CDATA[");
		sb.append(getProjectYn());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>projectId</column-name><column-value><![CDATA[");
		sb.append(getProjectId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>insertId</column-name><column-value><![CDATA[");
		sb.append(getInsertId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>insertDate</column-name><column-value><![CDATA[");
		sb.append(getInsertDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>updateId</column-name><column-value><![CDATA[");
		sb.append(getUpdateId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>updateDate</column-name><column-value><![CDATA[");
		sb.append(getUpdateDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = GeneralContent.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			GeneralContent.class
		};
	private long _contentSeq;
	private long _originalContentSeq;
	private boolean _setOriginalContentSeq;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _contentDiv;
	private long _originalContentDiv;
	private boolean _setOriginalContentDiv;
	private String _title;
	private String _titleCurrentLanguageId;
	private long _downloadCnt;
	private String _serviceLanguage;
	private String _projectYn;
	private long _projectId;
	private long _insertId;
	private Date _insertDate;
	private long _updateId;
	private Date _updateDate;
	private long _columnBitmask;
	private GeneralContent _escapedModel;
}
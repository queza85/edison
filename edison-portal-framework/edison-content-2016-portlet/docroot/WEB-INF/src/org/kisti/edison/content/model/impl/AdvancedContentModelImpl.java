/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.kisti.edison.content.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import org.kisti.edison.content.model.AdvancedContent;
import org.kisti.edison.content.model.AdvancedContentModel;
import org.kisti.edison.content.model.AdvancedContentSoap;
import org.kisti.edison.content.service.persistence.AdvancedContentPK;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the AdvancedContent service. Represents a row in the &quot;EDMED_AdvancedContent&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link org.kisti.edison.content.model.AdvancedContentModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AdvancedContentImpl}.
 * </p>
 *
 * @author EDISON
 * @see AdvancedContentImpl
 * @see org.kisti.edison.content.model.AdvancedContent
 * @see org.kisti.edison.content.model.AdvancedContentModel
 * @generated
 */
@JSON(strict = true)
public class AdvancedContentModelImpl extends BaseModelImpl<AdvancedContent>
	implements AdvancedContentModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a advanced content model instance should use the {@link org.kisti.edison.content.model.AdvancedContent} interface instead.
	 */
	public static final String TABLE_NAME = "EDMED_AdvancedContent";
	public static final Object[][] TABLE_COLUMNS = {
			{ "contentSeq", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "title", Types.VARCHAR },
			{ "resume", Types.VARCHAR },
			{ "contentFilePath", Types.VARCHAR },
			{ "contentFileNm", Types.VARCHAR },
			{ "contentStartFileNm", Types.VARCHAR },
			{ "serviceLanguage", Types.VARCHAR },
			{ "viewCnt", Types.BIGINT },
			{ "insertId", Types.BIGINT },
			{ "insertDate", Types.TIMESTAMP },
			{ "updateId", Types.BIGINT },
			{ "updateDate", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table EDMED_AdvancedContent (contentSeq LONG not null,groupId LONG not null,title VARCHAR(75) null,resume VARCHAR(75) null,contentFilePath VARCHAR(75) null,contentFileNm VARCHAR(75) null,contentStartFileNm VARCHAR(75) null,serviceLanguage VARCHAR(75) null,viewCnt LONG,insertId LONG,insertDate DATE null,updateId LONG,updateDate DATE null,primary key (contentSeq, groupId))";
	public static final String TABLE_SQL_DROP = "drop table EDMED_AdvancedContent";
	public static final String ORDER_BY_JPQL = " ORDER BY advancedContent.id.contentSeq DESC";
	public static final String ORDER_BY_SQL = " ORDER BY EDMED_AdvancedContent.contentSeq DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.org.kisti.edison.content.model.AdvancedContent"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.org.kisti.edison.content.model.AdvancedContent"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.org.kisti.edison.content.model.AdvancedContent"),
			true);
	public static long GROUPID_COLUMN_BITMASK = 1L;
	public static long SERVICELANGUAGE_COLUMN_BITMASK = 2L;
	public static long CONTENTSEQ_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static AdvancedContent toModel(AdvancedContentSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		AdvancedContent model = new AdvancedContentImpl();

		model.setContentSeq(soapModel.getContentSeq());
		model.setGroupId(soapModel.getGroupId());
		model.setTitle(soapModel.getTitle());
		model.setResume(soapModel.getResume());
		model.setContentFilePath(soapModel.getContentFilePath());
		model.setContentFileNm(soapModel.getContentFileNm());
		model.setContentStartFileNm(soapModel.getContentStartFileNm());
		model.setServiceLanguage(soapModel.getServiceLanguage());
		model.setViewCnt(soapModel.getViewCnt());
		model.setInsertId(soapModel.getInsertId());
		model.setInsertDate(soapModel.getInsertDate());
		model.setUpdateId(soapModel.getUpdateId());
		model.setUpdateDate(soapModel.getUpdateDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<AdvancedContent> toModels(
		AdvancedContentSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<AdvancedContent> models = new ArrayList<AdvancedContent>(soapModels.length);

		for (AdvancedContentSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.org.kisti.edison.content.model.AdvancedContent"));

	public AdvancedContentModelImpl() {
	}

	@Override
	public AdvancedContentPK getPrimaryKey() {
		return new AdvancedContentPK(_contentSeq, _groupId);
	}

	@Override
	public void setPrimaryKey(AdvancedContentPK primaryKey) {
		setContentSeq(primaryKey.contentSeq);
		setGroupId(primaryKey.groupId);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return new AdvancedContentPK(_contentSeq, _groupId);
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((AdvancedContentPK)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return AdvancedContent.class;
	}

	@Override
	public String getModelClassName() {
		return AdvancedContent.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("contentSeq", getContentSeq());
		attributes.put("groupId", getGroupId());
		attributes.put("title", getTitle());
		attributes.put("resume", getResume());
		attributes.put("contentFilePath", getContentFilePath());
		attributes.put("contentFileNm", getContentFileNm());
		attributes.put("contentStartFileNm", getContentStartFileNm());
		attributes.put("serviceLanguage", getServiceLanguage());
		attributes.put("viewCnt", getViewCnt());
		attributes.put("insertId", getInsertId());
		attributes.put("insertDate", getInsertDate());
		attributes.put("updateId", getUpdateId());
		attributes.put("updateDate", getUpdateDate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long contentSeq = (Long)attributes.get("contentSeq");

		if (contentSeq != null) {
			setContentSeq(contentSeq);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		String title = (String)attributes.get("title");

		if (title != null) {
			setTitle(title);
		}

		String resume = (String)attributes.get("resume");

		if (resume != null) {
			setResume(resume);
		}

		String contentFilePath = (String)attributes.get("contentFilePath");

		if (contentFilePath != null) {
			setContentFilePath(contentFilePath);
		}

		String contentFileNm = (String)attributes.get("contentFileNm");

		if (contentFileNm != null) {
			setContentFileNm(contentFileNm);
		}

		String contentStartFileNm = (String)attributes.get("contentStartFileNm");

		if (contentStartFileNm != null) {
			setContentStartFileNm(contentStartFileNm);
		}

		String serviceLanguage = (String)attributes.get("serviceLanguage");

		if (serviceLanguage != null) {
			setServiceLanguage(serviceLanguage);
		}

		Long viewCnt = (Long)attributes.get("viewCnt");

		if (viewCnt != null) {
			setViewCnt(viewCnt);
		}

		Long insertId = (Long)attributes.get("insertId");

		if (insertId != null) {
			setInsertId(insertId);
		}

		Date insertDate = (Date)attributes.get("insertDate");

		if (insertDate != null) {
			setInsertDate(insertDate);
		}

		Long updateId = (Long)attributes.get("updateId");

		if (updateId != null) {
			setUpdateId(updateId);
		}

		Date updateDate = (Date)attributes.get("updateDate");

		if (updateDate != null) {
			setUpdateDate(updateDate);
		}
	}

	@JSON
	@Override
	public long getContentSeq() {
		return _contentSeq;
	}

	@Override
	public void setContentSeq(long contentSeq) {
		_columnBitmask = -1L;

		_contentSeq = contentSeq;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public String getTitle() {
		if (_title == null) {
			return StringPool.BLANK;
		}
		else {
			return _title;
		}
	}

	@Override
	public void setTitle(String title) {
		_title = title;
	}

	@JSON
	@Override
	public String getResume() {
		if (_resume == null) {
			return StringPool.BLANK;
		}
		else {
			return _resume;
		}
	}

	@Override
	public void setResume(String resume) {
		_resume = resume;
	}

	@JSON
	@Override
	public String getContentFilePath() {
		if (_contentFilePath == null) {
			return StringPool.BLANK;
		}
		else {
			return _contentFilePath;
		}
	}

	@Override
	public void setContentFilePath(String contentFilePath) {
		_contentFilePath = contentFilePath;
	}

	@JSON
	@Override
	public String getContentFileNm() {
		if (_contentFileNm == null) {
			return StringPool.BLANK;
		}
		else {
			return _contentFileNm;
		}
	}

	@Override
	public void setContentFileNm(String contentFileNm) {
		_contentFileNm = contentFileNm;
	}

	@JSON
	@Override
	public String getContentStartFileNm() {
		if (_contentStartFileNm == null) {
			return StringPool.BLANK;
		}
		else {
			return _contentStartFileNm;
		}
	}

	@Override
	public void setContentStartFileNm(String contentStartFileNm) {
		_contentStartFileNm = contentStartFileNm;
	}

	@JSON
	@Override
	public String getServiceLanguage() {
		if (_serviceLanguage == null) {
			return StringPool.BLANK;
		}
		else {
			return _serviceLanguage;
		}
	}

	@Override
	public void setServiceLanguage(String serviceLanguage) {
		_columnBitmask |= SERVICELANGUAGE_COLUMN_BITMASK;

		if (_originalServiceLanguage == null) {
			_originalServiceLanguage = _serviceLanguage;
		}

		_serviceLanguage = serviceLanguage;
	}

	public String getOriginalServiceLanguage() {
		return GetterUtil.getString(_originalServiceLanguage);
	}

	@JSON
	@Override
	public long getViewCnt() {
		return _viewCnt;
	}

	@Override
	public void setViewCnt(long viewCnt) {
		_viewCnt = viewCnt;
	}

	@JSON
	@Override
	public long getInsertId() {
		return _insertId;
	}

	@Override
	public void setInsertId(long insertId) {
		_insertId = insertId;
	}

	@JSON
	@Override
	public Date getInsertDate() {
		return _insertDate;
	}

	@Override
	public void setInsertDate(Date insertDate) {
		_insertDate = insertDate;
	}

	@JSON
	@Override
	public long getUpdateId() {
		return _updateId;
	}

	@Override
	public void setUpdateId(long updateId) {
		_updateId = updateId;
	}

	@JSON
	@Override
	public Date getUpdateDate() {
		return _updateDate;
	}

	@Override
	public void setUpdateDate(Date updateDate) {
		_updateDate = updateDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public AdvancedContent toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (AdvancedContent)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		AdvancedContentImpl advancedContentImpl = new AdvancedContentImpl();

		advancedContentImpl.setContentSeq(getContentSeq());
		advancedContentImpl.setGroupId(getGroupId());
		advancedContentImpl.setTitle(getTitle());
		advancedContentImpl.setResume(getResume());
		advancedContentImpl.setContentFilePath(getContentFilePath());
		advancedContentImpl.setContentFileNm(getContentFileNm());
		advancedContentImpl.setContentStartFileNm(getContentStartFileNm());
		advancedContentImpl.setServiceLanguage(getServiceLanguage());
		advancedContentImpl.setViewCnt(getViewCnt());
		advancedContentImpl.setInsertId(getInsertId());
		advancedContentImpl.setInsertDate(getInsertDate());
		advancedContentImpl.setUpdateId(getUpdateId());
		advancedContentImpl.setUpdateDate(getUpdateDate());

		advancedContentImpl.resetOriginalValues();

		return advancedContentImpl;
	}

	@Override
	public int compareTo(AdvancedContent advancedContent) {
		int value = 0;

		if (getContentSeq() < advancedContent.getContentSeq()) {
			value = -1;
		}
		else if (getContentSeq() > advancedContent.getContentSeq()) {
			value = 1;
		}
		else {
			value = 0;
		}

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof AdvancedContent)) {
			return false;
		}

		AdvancedContent advancedContent = (AdvancedContent)obj;

		AdvancedContentPK primaryKey = advancedContent.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public void resetOriginalValues() {
		AdvancedContentModelImpl advancedContentModelImpl = this;

		advancedContentModelImpl._originalGroupId = advancedContentModelImpl._groupId;

		advancedContentModelImpl._setOriginalGroupId = false;

		advancedContentModelImpl._originalServiceLanguage = advancedContentModelImpl._serviceLanguage;

		advancedContentModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<AdvancedContent> toCacheModel() {
		AdvancedContentCacheModel advancedContentCacheModel = new AdvancedContentCacheModel();

		advancedContentCacheModel.contentSeq = getContentSeq();

		advancedContentCacheModel.groupId = getGroupId();

		advancedContentCacheModel.title = getTitle();

		String title = advancedContentCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			advancedContentCacheModel.title = null;
		}

		advancedContentCacheModel.resume = getResume();

		String resume = advancedContentCacheModel.resume;

		if ((resume != null) && (resume.length() == 0)) {
			advancedContentCacheModel.resume = null;
		}

		advancedContentCacheModel.contentFilePath = getContentFilePath();

		String contentFilePath = advancedContentCacheModel.contentFilePath;

		if ((contentFilePath != null) && (contentFilePath.length() == 0)) {
			advancedContentCacheModel.contentFilePath = null;
		}

		advancedContentCacheModel.contentFileNm = getContentFileNm();

		String contentFileNm = advancedContentCacheModel.contentFileNm;

		if ((contentFileNm != null) && (contentFileNm.length() == 0)) {
			advancedContentCacheModel.contentFileNm = null;
		}

		advancedContentCacheModel.contentStartFileNm = getContentStartFileNm();

		String contentStartFileNm = advancedContentCacheModel.contentStartFileNm;

		if ((contentStartFileNm != null) && (contentStartFileNm.length() == 0)) {
			advancedContentCacheModel.contentStartFileNm = null;
		}

		advancedContentCacheModel.serviceLanguage = getServiceLanguage();

		String serviceLanguage = advancedContentCacheModel.serviceLanguage;

		if ((serviceLanguage != null) && (serviceLanguage.length() == 0)) {
			advancedContentCacheModel.serviceLanguage = null;
		}

		advancedContentCacheModel.viewCnt = getViewCnt();

		advancedContentCacheModel.insertId = getInsertId();

		Date insertDate = getInsertDate();

		if (insertDate != null) {
			advancedContentCacheModel.insertDate = insertDate.getTime();
		}
		else {
			advancedContentCacheModel.insertDate = Long.MIN_VALUE;
		}

		advancedContentCacheModel.updateId = getUpdateId();

		Date updateDate = getUpdateDate();

		if (updateDate != null) {
			advancedContentCacheModel.updateDate = updateDate.getTime();
		}
		else {
			advancedContentCacheModel.updateDate = Long.MIN_VALUE;
		}

		return advancedContentCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(27);

		sb.append("{contentSeq=");
		sb.append(getContentSeq());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", title=");
		sb.append(getTitle());
		sb.append(", resume=");
		sb.append(getResume());
		sb.append(", contentFilePath=");
		sb.append(getContentFilePath());
		sb.append(", contentFileNm=");
		sb.append(getContentFileNm());
		sb.append(", contentStartFileNm=");
		sb.append(getContentStartFileNm());
		sb.append(", serviceLanguage=");
		sb.append(getServiceLanguage());
		sb.append(", viewCnt=");
		sb.append(getViewCnt());
		sb.append(", insertId=");
		sb.append(getInsertId());
		sb.append(", insertDate=");
		sb.append(getInsertDate());
		sb.append(", updateId=");
		sb.append(getUpdateId());
		sb.append(", updateDate=");
		sb.append(getUpdateDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(43);

		sb.append("<model><model-name>");
		sb.append("org.kisti.edison.content.model.AdvancedContent");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>contentSeq</column-name><column-value><![CDATA[");
		sb.append(getContentSeq());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>title</column-name><column-value><![CDATA[");
		sb.append(getTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>resume</column-name><column-value><![CDATA[");
		sb.append(getResume());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>contentFilePath</column-name><column-value><![CDATA[");
		sb.append(getContentFilePath());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>contentFileNm</column-name><column-value><![CDATA[");
		sb.append(getContentFileNm());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>contentStartFileNm</column-name><column-value><![CDATA[");
		sb.append(getContentStartFileNm());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>serviceLanguage</column-name><column-value><![CDATA[");
		sb.append(getServiceLanguage());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>viewCnt</column-name><column-value><![CDATA[");
		sb.append(getViewCnt());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>insertId</column-name><column-value><![CDATA[");
		sb.append(getInsertId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>insertDate</column-name><column-value><![CDATA[");
		sb.append(getInsertDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>updateId</column-name><column-value><![CDATA[");
		sb.append(getUpdateId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>updateDate</column-name><column-value><![CDATA[");
		sb.append(getUpdateDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = AdvancedContent.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			AdvancedContent.class
		};
	private long _contentSeq;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private String _title;
	private String _resume;
	private String _contentFilePath;
	private String _contentFileNm;
	private String _contentStartFileNm;
	private String _serviceLanguage;
	private String _originalServiceLanguage;
	private long _viewCnt;
	private long _insertId;
	private Date _insertDate;
	private long _updateId;
	private Date _updateDate;
	private long _columnBitmask;
	private AdvancedContent _escapedModel;
}
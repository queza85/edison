/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.kisti.edison.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import org.kisti.edison.model.SendMailContent;
import org.kisti.edison.model.SendMailContentModel;
import org.kisti.edison.model.SendMailContentSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the SendMailContent service. Represents a row in the &quot;EDMAIL_SendMailContent&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link org.kisti.edison.model.SendMailContentModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link SendMailContentImpl}.
 * </p>
 *
 * @author EDISON
 * @see SendMailContentImpl
 * @see org.kisti.edison.model.SendMailContent
 * @see org.kisti.edison.model.SendMailContentModel
 * @generated
 */
@JSON(strict = true)
public class SendMailContentModelImpl extends BaseModelImpl<SendMailContent>
	implements SendMailContentModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a send mail content model instance should use the {@link org.kisti.edison.model.SendMailContent} interface instead.
	 */
	public static final String TABLE_NAME = "EDMAIL_SendMailContent";
	public static final Object[][] TABLE_COLUMNS = {
			{ "sendMailId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "sendCount", Types.INTEGER },
			{ "successCount", Types.INTEGER },
			{ "failCount", Types.INTEGER },
			{ "sendDate", Types.TIMESTAMP },
			{ "siteGroup", Types.VARCHAR },
			{ "userGroup", Types.VARCHAR },
			{ "state_", Types.VARCHAR },
			{ "title", Types.VARCHAR },
			{ "content", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table EDMAIL_SendMailContent (sendMailId LONG not null primary key,userId LONG,sendCount INTEGER,successCount INTEGER,failCount INTEGER,sendDate DATE null,siteGroup VARCHAR(75) null,userGroup VARCHAR(75) null,state_ VARCHAR(75) null,title VARCHAR(75) null,content VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table EDMAIL_SendMailContent";
	public static final String ORDER_BY_JPQL = " ORDER BY sendMailContent.sendMailId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY EDMAIL_SendMailContent.sendMailId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.org.kisti.edison.model.SendMailContent"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.org.kisti.edison.model.SendMailContent"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static SendMailContent toModel(SendMailContentSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		SendMailContent model = new SendMailContentImpl();

		model.setSendMailId(soapModel.getSendMailId());
		model.setUserId(soapModel.getUserId());
		model.setSendCount(soapModel.getSendCount());
		model.setSuccessCount(soapModel.getSuccessCount());
		model.setFailCount(soapModel.getFailCount());
		model.setSendDate(soapModel.getSendDate());
		model.setSiteGroup(soapModel.getSiteGroup());
		model.setUserGroup(soapModel.getUserGroup());
		model.setState(soapModel.getState());
		model.setTitle(soapModel.getTitle());
		model.setContent(soapModel.getContent());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<SendMailContent> toModels(
		SendMailContentSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<SendMailContent> models = new ArrayList<SendMailContent>(soapModels.length);

		for (SendMailContentSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.org.kisti.edison.model.SendMailContent"));

	public SendMailContentModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _sendMailId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setSendMailId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _sendMailId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return SendMailContent.class;
	}

	@Override
	public String getModelClassName() {
		return SendMailContent.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("sendMailId", getSendMailId());
		attributes.put("userId", getUserId());
		attributes.put("sendCount", getSendCount());
		attributes.put("successCount", getSuccessCount());
		attributes.put("failCount", getFailCount());
		attributes.put("sendDate", getSendDate());
		attributes.put("siteGroup", getSiteGroup());
		attributes.put("userGroup", getUserGroup());
		attributes.put("state", getState());
		attributes.put("title", getTitle());
		attributes.put("content", getContent());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long sendMailId = (Long)attributes.get("sendMailId");

		if (sendMailId != null) {
			setSendMailId(sendMailId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Integer sendCount = (Integer)attributes.get("sendCount");

		if (sendCount != null) {
			setSendCount(sendCount);
		}

		Integer successCount = (Integer)attributes.get("successCount");

		if (successCount != null) {
			setSuccessCount(successCount);
		}

		Integer failCount = (Integer)attributes.get("failCount");

		if (failCount != null) {
			setFailCount(failCount);
		}

		Date sendDate = (Date)attributes.get("sendDate");

		if (sendDate != null) {
			setSendDate(sendDate);
		}

		String siteGroup = (String)attributes.get("siteGroup");

		if (siteGroup != null) {
			setSiteGroup(siteGroup);
		}

		String userGroup = (String)attributes.get("userGroup");

		if (userGroup != null) {
			setUserGroup(userGroup);
		}

		String state = (String)attributes.get("state");

		if (state != null) {
			setState(state);
		}

		String title = (String)attributes.get("title");

		if (title != null) {
			setTitle(title);
		}

		String content = (String)attributes.get("content");

		if (content != null) {
			setContent(content);
		}
	}

	@JSON
	@Override
	public long getSendMailId() {
		return _sendMailId;
	}

	@Override
	public void setSendMailId(long sendMailId) {
		_sendMailId = sendMailId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	@Override
	public int getSendCount() {
		return _sendCount;
	}

	@Override
	public void setSendCount(int sendCount) {
		_sendCount = sendCount;
	}

	@JSON
	@Override
	public int getSuccessCount() {
		return _successCount;
	}

	@Override
	public void setSuccessCount(int successCount) {
		_successCount = successCount;
	}

	@JSON
	@Override
	public int getFailCount() {
		return _failCount;
	}

	@Override
	public void setFailCount(int failCount) {
		_failCount = failCount;
	}

	@JSON
	@Override
	public Date getSendDate() {
		return _sendDate;
	}

	@Override
	public void setSendDate(Date sendDate) {
		_sendDate = sendDate;
	}

	@JSON
	@Override
	public String getSiteGroup() {
		if (_siteGroup == null) {
			return StringPool.BLANK;
		}
		else {
			return _siteGroup;
		}
	}

	@Override
	public void setSiteGroup(String siteGroup) {
		_siteGroup = siteGroup;
	}

	@JSON
	@Override
	public String getUserGroup() {
		if (_userGroup == null) {
			return StringPool.BLANK;
		}
		else {
			return _userGroup;
		}
	}

	@Override
	public void setUserGroup(String userGroup) {
		_userGroup = userGroup;
	}

	@JSON
	@Override
	public String getState() {
		if (_state == null) {
			return StringPool.BLANK;
		}
		else {
			return _state;
		}
	}

	@Override
	public void setState(String state) {
		_state = state;
	}

	@JSON
	@Override
	public String getTitle() {
		if (_title == null) {
			return StringPool.BLANK;
		}
		else {
			return _title;
		}
	}

	@Override
	public void setTitle(String title) {
		_title = title;
	}

	@JSON
	@Override
	public String getContent() {
		if (_content == null) {
			return StringPool.BLANK;
		}
		else {
			return _content;
		}
	}

	@Override
	public void setContent(String content) {
		_content = content;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			SendMailContent.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public SendMailContent toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (SendMailContent)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		SendMailContentImpl sendMailContentImpl = new SendMailContentImpl();

		sendMailContentImpl.setSendMailId(getSendMailId());
		sendMailContentImpl.setUserId(getUserId());
		sendMailContentImpl.setSendCount(getSendCount());
		sendMailContentImpl.setSuccessCount(getSuccessCount());
		sendMailContentImpl.setFailCount(getFailCount());
		sendMailContentImpl.setSendDate(getSendDate());
		sendMailContentImpl.setSiteGroup(getSiteGroup());
		sendMailContentImpl.setUserGroup(getUserGroup());
		sendMailContentImpl.setState(getState());
		sendMailContentImpl.setTitle(getTitle());
		sendMailContentImpl.setContent(getContent());

		sendMailContentImpl.resetOriginalValues();

		return sendMailContentImpl;
	}

	@Override
	public int compareTo(SendMailContent sendMailContent) {
		long primaryKey = sendMailContent.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof SendMailContent)) {
			return false;
		}

		SendMailContent sendMailContent = (SendMailContent)obj;

		long primaryKey = sendMailContent.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<SendMailContent> toCacheModel() {
		SendMailContentCacheModel sendMailContentCacheModel = new SendMailContentCacheModel();

		sendMailContentCacheModel.sendMailId = getSendMailId();

		sendMailContentCacheModel.userId = getUserId();

		sendMailContentCacheModel.sendCount = getSendCount();

		sendMailContentCacheModel.successCount = getSuccessCount();

		sendMailContentCacheModel.failCount = getFailCount();

		Date sendDate = getSendDate();

		if (sendDate != null) {
			sendMailContentCacheModel.sendDate = sendDate.getTime();
		}
		else {
			sendMailContentCacheModel.sendDate = Long.MIN_VALUE;
		}

		sendMailContentCacheModel.siteGroup = getSiteGroup();

		String siteGroup = sendMailContentCacheModel.siteGroup;

		if ((siteGroup != null) && (siteGroup.length() == 0)) {
			sendMailContentCacheModel.siteGroup = null;
		}

		sendMailContentCacheModel.userGroup = getUserGroup();

		String userGroup = sendMailContentCacheModel.userGroup;

		if ((userGroup != null) && (userGroup.length() == 0)) {
			sendMailContentCacheModel.userGroup = null;
		}

		sendMailContentCacheModel.state = getState();

		String state = sendMailContentCacheModel.state;

		if ((state != null) && (state.length() == 0)) {
			sendMailContentCacheModel.state = null;
		}

		sendMailContentCacheModel.title = getTitle();

		String title = sendMailContentCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			sendMailContentCacheModel.title = null;
		}

		sendMailContentCacheModel.content = getContent();

		String content = sendMailContentCacheModel.content;

		if ((content != null) && (content.length() == 0)) {
			sendMailContentCacheModel.content = null;
		}

		return sendMailContentCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(23);

		sb.append("{sendMailId=");
		sb.append(getSendMailId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", sendCount=");
		sb.append(getSendCount());
		sb.append(", successCount=");
		sb.append(getSuccessCount());
		sb.append(", failCount=");
		sb.append(getFailCount());
		sb.append(", sendDate=");
		sb.append(getSendDate());
		sb.append(", siteGroup=");
		sb.append(getSiteGroup());
		sb.append(", userGroup=");
		sb.append(getUserGroup());
		sb.append(", state=");
		sb.append(getState());
		sb.append(", title=");
		sb.append(getTitle());
		sb.append(", content=");
		sb.append(getContent());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(37);

		sb.append("<model><model-name>");
		sb.append("org.kisti.edison.model.SendMailContent");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>sendMailId</column-name><column-value><![CDATA[");
		sb.append(getSendMailId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sendCount</column-name><column-value><![CDATA[");
		sb.append(getSendCount());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>successCount</column-name><column-value><![CDATA[");
		sb.append(getSuccessCount());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>failCount</column-name><column-value><![CDATA[");
		sb.append(getFailCount());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sendDate</column-name><column-value><![CDATA[");
		sb.append(getSendDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>siteGroup</column-name><column-value><![CDATA[");
		sb.append(getSiteGroup());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userGroup</column-name><column-value><![CDATA[");
		sb.append(getUserGroup());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>state</column-name><column-value><![CDATA[");
		sb.append(getState());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>title</column-name><column-value><![CDATA[");
		sb.append(getTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>content</column-name><column-value><![CDATA[");
		sb.append(getContent());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = SendMailContent.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			SendMailContent.class
		};
	private long _sendMailId;
	private long _userId;
	private String _userUuid;
	private int _sendCount;
	private int _successCount;
	private int _failCount;
	private Date _sendDate;
	private String _siteGroup;
	private String _userGroup;
	private String _state;
	private String _title;
	private String _content;
	private SendMailContent _escapedModel;
}
/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.kisti.edison.bestsimulation.model.impl;

import com.liferay.portal.LocaleException;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.LocaleUtil;
import com.liferay.portal.kernel.util.LocalizationUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.kernel.util.Validator;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import org.kisti.edison.bestsimulation.model.SimulationJobData;
import org.kisti.edison.bestsimulation.model.SimulationJobDataModel;
import org.kisti.edison.bestsimulation.model.SimulationJobDataSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;

/**
 * The base model implementation for the SimulationJobData service. Represents a row in the &quot;EDSIM_SimulationJobData&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link org.kisti.edison.bestsimulation.model.SimulationJobDataModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link SimulationJobDataImpl}.
 * </p>
 *
 * @author EDISON
 * @see SimulationJobDataImpl
 * @see org.kisti.edison.bestsimulation.model.SimulationJobData
 * @see org.kisti.edison.bestsimulation.model.SimulationJobDataModel
 * @generated
 */
@JSON(strict = true)
public class SimulationJobDataModelImpl extends BaseModelImpl<SimulationJobData>
	implements SimulationJobDataModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a simulation job data model instance should use the {@link org.kisti.edison.bestsimulation.model.SimulationJobData} interface instead.
	 */
	public static final String TABLE_NAME = "EDSIM_SimulationJobData";
	public static final Object[][] TABLE_COLUMNS = {
			{ "jobUuid", Types.VARCHAR },
			{ "jobData", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table EDSIM_SimulationJobData (jobUuid VARCHAR(75) not null primary key,jobData STRING null)";
	public static final String TABLE_SQL_DROP = "drop table EDSIM_SimulationJobData";
	public static final String ORDER_BY_JPQL = " ORDER BY simulationJobData.jobUuid ASC";
	public static final String ORDER_BY_SQL = " ORDER BY EDSIM_SimulationJobData.jobUuid ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "true";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.org.kisti.edison.bestsimulation.model.SimulationJobData"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.org.kisti.edison.bestsimulation.model.SimulationJobData"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static SimulationJobData toModel(SimulationJobDataSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		SimulationJobData model = new SimulationJobDataImpl();

		model.setJobUuid(soapModel.getJobUuid());
		model.setJobData(soapModel.getJobData());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<SimulationJobData> toModels(
		SimulationJobDataSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<SimulationJobData> models = new ArrayList<SimulationJobData>(soapModels.length);

		for (SimulationJobDataSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.org.kisti.edison.bestsimulation.model.SimulationJobData"));

	public SimulationJobDataModelImpl() {
	}

	@Override
	public String getPrimaryKey() {
		return _jobUuid;
	}

	@Override
	public void setPrimaryKey(String primaryKey) {
		setJobUuid(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _jobUuid;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((String)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return SimulationJobData.class;
	}

	@Override
	public String getModelClassName() {
		return SimulationJobData.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("jobUuid", getJobUuid());
		attributes.put("jobData", getJobData());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String jobUuid = (String)attributes.get("jobUuid");

		if (jobUuid != null) {
			setJobUuid(jobUuid);
		}

		String jobData = (String)attributes.get("jobData");

		if (jobData != null) {
			setJobData(jobData);
		}
	}

	@JSON
	@Override
	public String getJobUuid() {
		if (_jobUuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _jobUuid;
		}
	}

	@Override
	public void setJobUuid(String jobUuid) {
		_jobUuid = jobUuid;
	}

	@JSON
	@Override
	public String getJobData() {
		if (_jobData == null) {
			return StringPool.BLANK;
		}
		else {
			return _jobData;
		}
	}

	@Override
	public String getJobData(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getJobData(languageId);
	}

	@Override
	public String getJobData(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getJobData(languageId, useDefault);
	}

	@Override
	public String getJobData(String languageId) {
		return LocalizationUtil.getLocalization(getJobData(), languageId);
	}

	@Override
	public String getJobData(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(getJobData(), languageId,
			useDefault);
	}

	@Override
	public String getJobDataCurrentLanguageId() {
		return _jobDataCurrentLanguageId;
	}

	@JSON
	@Override
	public String getJobDataCurrentValue() {
		Locale locale = getLocale(_jobDataCurrentLanguageId);

		return getJobData(locale);
	}

	@Override
	public Map<Locale, String> getJobDataMap() {
		return LocalizationUtil.getLocalizationMap(getJobData());
	}

	@Override
	public void setJobData(String jobData) {
		_jobData = jobData;
	}

	@Override
	public void setJobData(String jobData, Locale locale) {
		setJobData(jobData, locale, LocaleUtil.getDefault());
	}

	@Override
	public void setJobData(String jobData, Locale locale, Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(jobData)) {
			setJobData(LocalizationUtil.updateLocalization(getJobData(),
					"JobData", jobData, languageId, defaultLanguageId));
		}
		else {
			setJobData(LocalizationUtil.removeLocalization(getJobData(),
					"JobData", languageId));
		}
	}

	@Override
	public void setJobDataCurrentLanguageId(String languageId) {
		_jobDataCurrentLanguageId = languageId;
	}

	@Override
	public void setJobDataMap(Map<Locale, String> jobDataMap) {
		setJobDataMap(jobDataMap, LocaleUtil.getDefault());
	}

	@Override
	public void setJobDataMap(Map<Locale, String> jobDataMap,
		Locale defaultLocale) {
		if (jobDataMap == null) {
			return;
		}

		setJobData(LocalizationUtil.updateLocalization(jobDataMap,
				getJobData(), "JobData", LocaleUtil.toLanguageId(defaultLocale)));
	}

	@Override
	public String[] getAvailableLanguageIds() {
		Set<String> availableLanguageIds = new TreeSet<String>();

		Map<Locale, String> jobDataMap = getJobDataMap();

		for (Map.Entry<Locale, String> entry : jobDataMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		return availableLanguageIds.toArray(new String[availableLanguageIds.size()]);
	}

	@Override
	public String getDefaultLanguageId() {
		String xml = getJobData();

		if (xml == null) {
			return StringPool.BLANK;
		}

		Locale defaultLocale = LocaleUtil.getDefault();

		return LocalizationUtil.getDefaultLanguageId(xml, defaultLocale);
	}

	@Override
	public void prepareLocalizedFieldsForImport() throws LocaleException {
		prepareLocalizedFieldsForImport(null);
	}

	@Override
	@SuppressWarnings("unused")
	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException {
		Locale defaultLocale = LocaleUtil.getDefault();

		String modelDefaultLanguageId = getDefaultLanguageId();

		String jobData = getJobData(defaultLocale);

		if (Validator.isNull(jobData)) {
			setJobData(getJobData(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setJobData(getJobData(defaultLocale), defaultLocale, defaultLocale);
		}
	}

	@Override
	public SimulationJobData toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (SimulationJobData)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		SimulationJobDataImpl simulationJobDataImpl = new SimulationJobDataImpl();

		simulationJobDataImpl.setJobUuid(getJobUuid());
		simulationJobDataImpl.setJobData(getJobData());

		simulationJobDataImpl.resetOriginalValues();

		return simulationJobDataImpl;
	}

	@Override
	public int compareTo(SimulationJobData simulationJobData) {
		String primaryKey = simulationJobData.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof SimulationJobData)) {
			return false;
		}

		SimulationJobData simulationJobData = (SimulationJobData)obj;

		String primaryKey = simulationJobData.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<SimulationJobData> toCacheModel() {
		SimulationJobDataCacheModel simulationJobDataCacheModel = new SimulationJobDataCacheModel();

		simulationJobDataCacheModel.jobUuid = getJobUuid();

		String jobUuid = simulationJobDataCacheModel.jobUuid;

		if ((jobUuid != null) && (jobUuid.length() == 0)) {
			simulationJobDataCacheModel.jobUuid = null;
		}

		simulationJobDataCacheModel.jobData = getJobData();

		String jobData = simulationJobDataCacheModel.jobData;

		if ((jobData != null) && (jobData.length() == 0)) {
			simulationJobDataCacheModel.jobData = null;
		}

		return simulationJobDataCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(5);

		sb.append("{jobUuid=");
		sb.append(getJobUuid());
		sb.append(", jobData=");
		sb.append(getJobData());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(10);

		sb.append("<model><model-name>");
		sb.append("org.kisti.edison.bestsimulation.model.SimulationJobData");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>jobUuid</column-name><column-value><![CDATA[");
		sb.append(getJobUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>jobData</column-name><column-value><![CDATA[");
		sb.append(getJobData());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = SimulationJobData.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			SimulationJobData.class
		};
	private String _jobUuid;
	private String _jobData;
	private String _jobDataCurrentLanguageId;
	private SimulationJobData _escapedModel;
}
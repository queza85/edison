/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.kisti.edison.bestsimulation.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import org.kisti.edison.bestsimulation.model.SimulationJobStatus;
import org.kisti.edison.bestsimulation.model.SimulationJobStatusModel;
import org.kisti.edison.bestsimulation.model.SimulationJobStatusSoap;
import org.kisti.edison.bestsimulation.service.persistence.SimulationJobStatusPK;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the SimulationJobStatus service. Represents a row in the &quot;EDSIM_SimulationJobStatus&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link org.kisti.edison.bestsimulation.model.SimulationJobStatusModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link SimulationJobStatusImpl}.
 * </p>
 *
 * @author EDISON
 * @see SimulationJobStatusImpl
 * @see org.kisti.edison.bestsimulation.model.SimulationJobStatus
 * @see org.kisti.edison.bestsimulation.model.SimulationJobStatusModel
 * @generated
 */
@JSON(strict = true)
public class SimulationJobStatusModelImpl extends BaseModelImpl<SimulationJobStatus>
	implements SimulationJobStatusModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a simulation job status model instance should use the {@link org.kisti.edison.bestsimulation.model.SimulationJobStatus} interface instead.
	 */
	public static final String TABLE_NAME = "EDSIM_SimulationJobStatus";
	public static final Object[][] TABLE_COLUMNS = {
			{ "statusSeq", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "simulationUuid", Types.VARCHAR },
			{ "jobUuid", Types.VARCHAR },
			{ "jobStatus", Types.BIGINT },
			{ "jobStartDt", Types.TIMESTAMP },
			{ "jobEndDt", Types.TIMESTAMP },
			{ "writeDt", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table EDSIM_SimulationJobStatus (statusSeq LONG not null,groupId LONG not null,simulationUuid VARCHAR(75) not null,jobUuid VARCHAR(75) not null,jobStatus LONG,jobStartDt DATE null,jobEndDt DATE null,writeDt DATE null,primary key (statusSeq, groupId, simulationUuid, jobUuid))";
	public static final String TABLE_SQL_DROP = "drop table EDSIM_SimulationJobStatus";
	public static final String ORDER_BY_JPQL = " ORDER BY simulationJobStatus.id.statusSeq DESC";
	public static final String ORDER_BY_SQL = " ORDER BY EDSIM_SimulationJobStatus.statusSeq DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "true";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.org.kisti.edison.bestsimulation.model.SimulationJobStatus"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.org.kisti.edison.bestsimulation.model.SimulationJobStatus"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.org.kisti.edison.bestsimulation.model.SimulationJobStatus"),
			true);
	public static long GROUPID_COLUMN_BITMASK = 1L;
	public static long JOBUUID_COLUMN_BITMASK = 2L;
	public static long SIMULATIONUUID_COLUMN_BITMASK = 4L;
	public static long STATUSSEQ_COLUMN_BITMASK = 8L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static SimulationJobStatus toModel(SimulationJobStatusSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		SimulationJobStatus model = new SimulationJobStatusImpl();

		model.setStatusSeq(soapModel.getStatusSeq());
		model.setGroupId(soapModel.getGroupId());
		model.setSimulationUuid(soapModel.getSimulationUuid());
		model.setJobUuid(soapModel.getJobUuid());
		model.setJobStatus(soapModel.getJobStatus());
		model.setJobStartDt(soapModel.getJobStartDt());
		model.setJobEndDt(soapModel.getJobEndDt());
		model.setWriteDt(soapModel.getWriteDt());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<SimulationJobStatus> toModels(
		SimulationJobStatusSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<SimulationJobStatus> models = new ArrayList<SimulationJobStatus>(soapModels.length);

		for (SimulationJobStatusSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.org.kisti.edison.bestsimulation.model.SimulationJobStatus"));

	public SimulationJobStatusModelImpl() {
	}

	@Override
	public SimulationJobStatusPK getPrimaryKey() {
		return new SimulationJobStatusPK(_statusSeq, _groupId, _simulationUuid,
			_jobUuid);
	}

	@Override
	public void setPrimaryKey(SimulationJobStatusPK primaryKey) {
		setStatusSeq(primaryKey.statusSeq);
		setGroupId(primaryKey.groupId);
		setSimulationUuid(primaryKey.simulationUuid);
		setJobUuid(primaryKey.jobUuid);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return new SimulationJobStatusPK(_statusSeq, _groupId, _simulationUuid,
			_jobUuid);
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((SimulationJobStatusPK)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return SimulationJobStatus.class;
	}

	@Override
	public String getModelClassName() {
		return SimulationJobStatus.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("statusSeq", getStatusSeq());
		attributes.put("groupId", getGroupId());
		attributes.put("simulationUuid", getSimulationUuid());
		attributes.put("jobUuid", getJobUuid());
		attributes.put("jobStatus", getJobStatus());
		attributes.put("jobStartDt", getJobStartDt());
		attributes.put("jobEndDt", getJobEndDt());
		attributes.put("writeDt", getWriteDt());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long statusSeq = (Long)attributes.get("statusSeq");

		if (statusSeq != null) {
			setStatusSeq(statusSeq);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		String simulationUuid = (String)attributes.get("simulationUuid");

		if (simulationUuid != null) {
			setSimulationUuid(simulationUuid);
		}

		String jobUuid = (String)attributes.get("jobUuid");

		if (jobUuid != null) {
			setJobUuid(jobUuid);
		}

		Long jobStatus = (Long)attributes.get("jobStatus");

		if (jobStatus != null) {
			setJobStatus(jobStatus);
		}

		Date jobStartDt = (Date)attributes.get("jobStartDt");

		if (jobStartDt != null) {
			setJobStartDt(jobStartDt);
		}

		Date jobEndDt = (Date)attributes.get("jobEndDt");

		if (jobEndDt != null) {
			setJobEndDt(jobEndDt);
		}

		Date writeDt = (Date)attributes.get("writeDt");

		if (writeDt != null) {
			setWriteDt(writeDt);
		}
	}

	@JSON
	@Override
	public long getStatusSeq() {
		return _statusSeq;
	}

	@Override
	public void setStatusSeq(long statusSeq) {
		_columnBitmask = -1L;

		_statusSeq = statusSeq;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public String getSimulationUuid() {
		if (_simulationUuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _simulationUuid;
		}
	}

	@Override
	public void setSimulationUuid(String simulationUuid) {
		_columnBitmask |= SIMULATIONUUID_COLUMN_BITMASK;

		if (_originalSimulationUuid == null) {
			_originalSimulationUuid = _simulationUuid;
		}

		_simulationUuid = simulationUuid;
	}

	public String getOriginalSimulationUuid() {
		return GetterUtil.getString(_originalSimulationUuid);
	}

	@JSON
	@Override
	public String getJobUuid() {
		if (_jobUuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _jobUuid;
		}
	}

	@Override
	public void setJobUuid(String jobUuid) {
		_columnBitmask |= JOBUUID_COLUMN_BITMASK;

		if (_originalJobUuid == null) {
			_originalJobUuid = _jobUuid;
		}

		_jobUuid = jobUuid;
	}

	public String getOriginalJobUuid() {
		return GetterUtil.getString(_originalJobUuid);
	}

	@JSON
	@Override
	public long getJobStatus() {
		return _jobStatus;
	}

	@Override
	public void setJobStatus(long jobStatus) {
		_jobStatus = jobStatus;
	}

	@JSON
	@Override
	public Date getJobStartDt() {
		return _jobStartDt;
	}

	@Override
	public void setJobStartDt(Date jobStartDt) {
		_jobStartDt = jobStartDt;
	}

	@JSON
	@Override
	public Date getJobEndDt() {
		return _jobEndDt;
	}

	@Override
	public void setJobEndDt(Date jobEndDt) {
		_jobEndDt = jobEndDt;
	}

	@JSON
	@Override
	public Date getWriteDt() {
		return _writeDt;
	}

	@Override
	public void setWriteDt(Date writeDt) {
		_writeDt = writeDt;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public SimulationJobStatus toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (SimulationJobStatus)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		SimulationJobStatusImpl simulationJobStatusImpl = new SimulationJobStatusImpl();

		simulationJobStatusImpl.setStatusSeq(getStatusSeq());
		simulationJobStatusImpl.setGroupId(getGroupId());
		simulationJobStatusImpl.setSimulationUuid(getSimulationUuid());
		simulationJobStatusImpl.setJobUuid(getJobUuid());
		simulationJobStatusImpl.setJobStatus(getJobStatus());
		simulationJobStatusImpl.setJobStartDt(getJobStartDt());
		simulationJobStatusImpl.setJobEndDt(getJobEndDt());
		simulationJobStatusImpl.setWriteDt(getWriteDt());

		simulationJobStatusImpl.resetOriginalValues();

		return simulationJobStatusImpl;
	}

	@Override
	public int compareTo(SimulationJobStatus simulationJobStatus) {
		int value = 0;

		if (getStatusSeq() < simulationJobStatus.getStatusSeq()) {
			value = -1;
		}
		else if (getStatusSeq() > simulationJobStatus.getStatusSeq()) {
			value = 1;
		}
		else {
			value = 0;
		}

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof SimulationJobStatus)) {
			return false;
		}

		SimulationJobStatus simulationJobStatus = (SimulationJobStatus)obj;

		SimulationJobStatusPK primaryKey = simulationJobStatus.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public void resetOriginalValues() {
		SimulationJobStatusModelImpl simulationJobStatusModelImpl = this;

		simulationJobStatusModelImpl._originalGroupId = simulationJobStatusModelImpl._groupId;

		simulationJobStatusModelImpl._setOriginalGroupId = false;

		simulationJobStatusModelImpl._originalSimulationUuid = simulationJobStatusModelImpl._simulationUuid;

		simulationJobStatusModelImpl._originalJobUuid = simulationJobStatusModelImpl._jobUuid;

		simulationJobStatusModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<SimulationJobStatus> toCacheModel() {
		SimulationJobStatusCacheModel simulationJobStatusCacheModel = new SimulationJobStatusCacheModel();

		simulationJobStatusCacheModel.statusSeq = getStatusSeq();

		simulationJobStatusCacheModel.groupId = getGroupId();

		simulationJobStatusCacheModel.simulationUuid = getSimulationUuid();

		String simulationUuid = simulationJobStatusCacheModel.simulationUuid;

		if ((simulationUuid != null) && (simulationUuid.length() == 0)) {
			simulationJobStatusCacheModel.simulationUuid = null;
		}

		simulationJobStatusCacheModel.jobUuid = getJobUuid();

		String jobUuid = simulationJobStatusCacheModel.jobUuid;

		if ((jobUuid != null) && (jobUuid.length() == 0)) {
			simulationJobStatusCacheModel.jobUuid = null;
		}

		simulationJobStatusCacheModel.jobStatus = getJobStatus();

		Date jobStartDt = getJobStartDt();

		if (jobStartDt != null) {
			simulationJobStatusCacheModel.jobStartDt = jobStartDt.getTime();
		}
		else {
			simulationJobStatusCacheModel.jobStartDt = Long.MIN_VALUE;
		}

		Date jobEndDt = getJobEndDt();

		if (jobEndDt != null) {
			simulationJobStatusCacheModel.jobEndDt = jobEndDt.getTime();
		}
		else {
			simulationJobStatusCacheModel.jobEndDt = Long.MIN_VALUE;
		}

		Date writeDt = getWriteDt();

		if (writeDt != null) {
			simulationJobStatusCacheModel.writeDt = writeDt.getTime();
		}
		else {
			simulationJobStatusCacheModel.writeDt = Long.MIN_VALUE;
		}

		return simulationJobStatusCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(17);

		sb.append("{statusSeq=");
		sb.append(getStatusSeq());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", simulationUuid=");
		sb.append(getSimulationUuid());
		sb.append(", jobUuid=");
		sb.append(getJobUuid());
		sb.append(", jobStatus=");
		sb.append(getJobStatus());
		sb.append(", jobStartDt=");
		sb.append(getJobStartDt());
		sb.append(", jobEndDt=");
		sb.append(getJobEndDt());
		sb.append(", writeDt=");
		sb.append(getWriteDt());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(28);

		sb.append("<model><model-name>");
		sb.append("org.kisti.edison.bestsimulation.model.SimulationJobStatus");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>statusSeq</column-name><column-value><![CDATA[");
		sb.append(getStatusSeq());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>simulationUuid</column-name><column-value><![CDATA[");
		sb.append(getSimulationUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>jobUuid</column-name><column-value><![CDATA[");
		sb.append(getJobUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>jobStatus</column-name><column-value><![CDATA[");
		sb.append(getJobStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>jobStartDt</column-name><column-value><![CDATA[");
		sb.append(getJobStartDt());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>jobEndDt</column-name><column-value><![CDATA[");
		sb.append(getJobEndDt());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>writeDt</column-name><column-value><![CDATA[");
		sb.append(getWriteDt());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = SimulationJobStatus.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			SimulationJobStatus.class
		};
	private long _statusSeq;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private String _simulationUuid;
	private String _originalSimulationUuid;
	private String _jobUuid;
	private String _originalJobUuid;
	private long _jobStatus;
	private Date _jobStartDt;
	private Date _jobEndDt;
	private Date _writeDt;
	private long _columnBitmask;
	private SimulationJobStatus _escapedModel;
}
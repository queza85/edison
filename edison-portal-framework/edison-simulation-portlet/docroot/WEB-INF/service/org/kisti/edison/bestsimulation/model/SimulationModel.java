/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.kisti.edison.bestsimulation.model;

import com.liferay.portal.LocaleException;
import com.liferay.portal.kernel.bean.AutoEscape;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.model.BaseModel;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;

import org.kisti.edison.bestsimulation.service.persistence.SimulationPK;

import java.io.Serializable;

import java.util.Date;
import java.util.Locale;
import java.util.Map;

/**
 * The base model interface for the Simulation service. Represents a row in the &quot;EDSIM_Simulation&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This interface and its corresponding implementation {@link org.kisti.edison.bestsimulation.model.impl.SimulationModelImpl} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link org.kisti.edison.bestsimulation.model.impl.SimulationImpl}.
 * </p>
 *
 * @author EDISON
 * @see Simulation
 * @see org.kisti.edison.bestsimulation.model.impl.SimulationImpl
 * @see org.kisti.edison.bestsimulation.model.impl.SimulationModelImpl
 * @generated
 */
public interface SimulationModel extends BaseModel<Simulation> {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this interface directly. All methods that expect a simulation model instance should use the {@link Simulation} interface instead.
	 */

	/**
	 * Returns the primary key of this simulation.
	 *
	 * @return the primary key of this simulation
	 */
	public SimulationPK getPrimaryKey();

	/**
	 * Sets the primary key of this simulation.
	 *
	 * @param primaryKey the primary key of this simulation
	 */
	public void setPrimaryKey(SimulationPK primaryKey);

	/**
	 * Returns the simulation uuid of this simulation.
	 *
	 * @return the simulation uuid of this simulation
	 */
	@AutoEscape
	public String getSimulationUuid();

	/**
	 * Sets the simulation uuid of this simulation.
	 *
	 * @param simulationUuid the simulation uuid of this simulation
	 */
	public void setSimulationUuid(String simulationUuid);

	/**
	 * Returns the group ID of this simulation.
	 *
	 * @return the group ID of this simulation
	 */
	public long getGroupId();

	/**
	 * Sets the group ID of this simulation.
	 *
	 * @param groupId the group ID of this simulation
	 */
	public void setGroupId(long groupId);

	/**
	 * Returns the user ID of this simulation.
	 *
	 * @return the user ID of this simulation
	 */
	public long getUserId();

	/**
	 * Sets the user ID of this simulation.
	 *
	 * @param userId the user ID of this simulation
	 */
	public void setUserId(long userId);

	/**
	 * Returns the user uuid of this simulation.
	 *
	 * @return the user uuid of this simulation
	 * @throws SystemException if a system exception occurred
	 */
	public String getUserUuid() throws SystemException;

	/**
	 * Sets the user uuid of this simulation.
	 *
	 * @param userUuid the user uuid of this simulation
	 */
	public void setUserUuid(String userUuid);

	/**
	 * Returns the simulation title of this simulation.
	 *
	 * @return the simulation title of this simulation
	 */
	public String getSimulationTitle();

	/**
	 * Returns the localized simulation title of this simulation in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized simulation title of this simulation
	 */
	@AutoEscape
	public String getSimulationTitle(Locale locale);

	/**
	 * Returns the localized simulation title of this simulation in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized simulation title of this simulation. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getSimulationTitle(Locale locale, boolean useDefault);

	/**
	 * Returns the localized simulation title of this simulation in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized simulation title of this simulation
	 */
	@AutoEscape
	public String getSimulationTitle(String languageId);

	/**
	 * Returns the localized simulation title of this simulation in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized simulation title of this simulation
	 */
	@AutoEscape
	public String getSimulationTitle(String languageId, boolean useDefault);

	@AutoEscape
	public String getSimulationTitleCurrentLanguageId();

	@AutoEscape
	public String getSimulationTitleCurrentValue();

	/**
	 * Returns a map of the locales and localized simulation titles of this simulation.
	 *
	 * @return the locales and localized simulation titles of this simulation
	 */
	public Map<Locale, String> getSimulationTitleMap();

	/**
	 * Sets the simulation title of this simulation.
	 *
	 * @param simulationTitle the simulation title of this simulation
	 */
	public void setSimulationTitle(String simulationTitle);

	/**
	 * Sets the localized simulation title of this simulation in the language.
	 *
	 * @param simulationTitle the localized simulation title of this simulation
	 * @param locale the locale of the language
	 */
	public void setSimulationTitle(String simulationTitle, Locale locale);

	/**
	 * Sets the localized simulation title of this simulation in the language, and sets the default locale.
	 *
	 * @param simulationTitle the localized simulation title of this simulation
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setSimulationTitle(String simulationTitle, Locale locale,
		Locale defaultLocale);

	public void setSimulationTitleCurrentLanguageId(String languageId);

	/**
	 * Sets the localized simulation titles of this simulation from the map of locales and localized simulation titles.
	 *
	 * @param simulationTitleMap the locales and localized simulation titles of this simulation
	 */
	public void setSimulationTitleMap(Map<Locale, String> simulationTitleMap);

	/**
	 * Sets the localized simulation titles of this simulation from the map of locales and localized simulation titles, and sets the default locale.
	 *
	 * @param simulationTitleMap the locales and localized simulation titles of this simulation
	 * @param defaultLocale the default locale
	 */
	public void setSimulationTitleMap(Map<Locale, String> simulationTitleMap,
		Locale defaultLocale);

	/**
	 * Returns the simulation description of this simulation.
	 *
	 * @return the simulation description of this simulation
	 */
	public String getSimulationDescription();

	/**
	 * Returns the localized simulation description of this simulation in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized simulation description of this simulation
	 */
	@AutoEscape
	public String getSimulationDescription(Locale locale);

	/**
	 * Returns the localized simulation description of this simulation in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized simulation description of this simulation. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getSimulationDescription(Locale locale, boolean useDefault);

	/**
	 * Returns the localized simulation description of this simulation in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized simulation description of this simulation
	 */
	@AutoEscape
	public String getSimulationDescription(String languageId);

	/**
	 * Returns the localized simulation description of this simulation in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized simulation description of this simulation
	 */
	@AutoEscape
	public String getSimulationDescription(String languageId, boolean useDefault);

	@AutoEscape
	public String getSimulationDescriptionCurrentLanguageId();

	@AutoEscape
	public String getSimulationDescriptionCurrentValue();

	/**
	 * Returns a map of the locales and localized simulation descriptions of this simulation.
	 *
	 * @return the locales and localized simulation descriptions of this simulation
	 */
	public Map<Locale, String> getSimulationDescriptionMap();

	/**
	 * Sets the simulation description of this simulation.
	 *
	 * @param simulationDescription the simulation description of this simulation
	 */
	public void setSimulationDescription(String simulationDescription);

	/**
	 * Sets the localized simulation description of this simulation in the language.
	 *
	 * @param simulationDescription the localized simulation description of this simulation
	 * @param locale the locale of the language
	 */
	public void setSimulationDescription(String simulationDescription,
		Locale locale);

	/**
	 * Sets the localized simulation description of this simulation in the language, and sets the default locale.
	 *
	 * @param simulationDescription the localized simulation description of this simulation
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setSimulationDescription(String simulationDescription,
		Locale locale, Locale defaultLocale);

	public void setSimulationDescriptionCurrentLanguageId(String languageId);

	/**
	 * Sets the localized simulation descriptions of this simulation from the map of locales and localized simulation descriptions.
	 *
	 * @param simulationDescriptionMap the locales and localized simulation descriptions of this simulation
	 */
	public void setSimulationDescriptionMap(
		Map<Locale, String> simulationDescriptionMap);

	/**
	 * Sets the localized simulation descriptions of this simulation from the map of locales and localized simulation descriptions, and sets the default locale.
	 *
	 * @param simulationDescriptionMap the locales and localized simulation descriptions of this simulation
	 * @param defaultLocale the default locale
	 */
	public void setSimulationDescriptionMap(
		Map<Locale, String> simulationDescriptionMap, Locale defaultLocale);

	/**
	 * Returns the science app ID of this simulation.
	 *
	 * @return the science app ID of this simulation
	 */
	@AutoEscape
	public String getScienceAppId();

	/**
	 * Sets the science app ID of this simulation.
	 *
	 * @param scienceAppId the science app ID of this simulation
	 */
	public void setScienceAppId(String scienceAppId);

	/**
	 * Returns the science app name of this simulation.
	 *
	 * @return the science app name of this simulation
	 */
	public String getScienceAppName();

	/**
	 * Returns the localized science app name of this simulation in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized science app name of this simulation
	 */
	@AutoEscape
	public String getScienceAppName(Locale locale);

	/**
	 * Returns the localized science app name of this simulation in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized science app name of this simulation. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getScienceAppName(Locale locale, boolean useDefault);

	/**
	 * Returns the localized science app name of this simulation in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized science app name of this simulation
	 */
	@AutoEscape
	public String getScienceAppName(String languageId);

	/**
	 * Returns the localized science app name of this simulation in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized science app name of this simulation
	 */
	@AutoEscape
	public String getScienceAppName(String languageId, boolean useDefault);

	@AutoEscape
	public String getScienceAppNameCurrentLanguageId();

	@AutoEscape
	public String getScienceAppNameCurrentValue();

	/**
	 * Returns a map of the locales and localized science app names of this simulation.
	 *
	 * @return the locales and localized science app names of this simulation
	 */
	public Map<Locale, String> getScienceAppNameMap();

	/**
	 * Sets the science app name of this simulation.
	 *
	 * @param scienceAppName the science app name of this simulation
	 */
	public void setScienceAppName(String scienceAppName);

	/**
	 * Sets the localized science app name of this simulation in the language.
	 *
	 * @param scienceAppName the localized science app name of this simulation
	 * @param locale the locale of the language
	 */
	public void setScienceAppName(String scienceAppName, Locale locale);

	/**
	 * Sets the localized science app name of this simulation in the language, and sets the default locale.
	 *
	 * @param scienceAppName the localized science app name of this simulation
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setScienceAppName(String scienceAppName, Locale locale,
		Locale defaultLocale);

	public void setScienceAppNameCurrentLanguageId(String languageId);

	/**
	 * Sets the localized science app names of this simulation from the map of locales and localized science app names.
	 *
	 * @param scienceAppNameMap the locales and localized science app names of this simulation
	 */
	public void setScienceAppNameMap(Map<Locale, String> scienceAppNameMap);

	/**
	 * Sets the localized science app names of this simulation from the map of locales and localized science app names, and sets the default locale.
	 *
	 * @param scienceAppNameMap the locales and localized science app names of this simulation
	 * @param defaultLocale the default locale
	 */
	public void setScienceAppNameMap(Map<Locale, String> scienceAppNameMap,
		Locale defaultLocale);

	/**
	 * Returns the simulation create dt of this simulation.
	 *
	 * @return the simulation create dt of this simulation
	 */
	public Date getSimulationCreateDt();

	/**
	 * Sets the simulation create dt of this simulation.
	 *
	 * @param simulationCreateDt the simulation create dt of this simulation
	 */
	public void setSimulationCreateDt(Date simulationCreateDt);

	/**
	 * Returns the cluster of this simulation.
	 *
	 * @return the cluster of this simulation
	 */
	@AutoEscape
	public String getCluster();

	/**
	 * Sets the cluster of this simulation.
	 *
	 * @param cluster the cluster of this simulation
	 */
	public void setCluster(String cluster);

	/**
	 * Returns the test yn of this simulation.
	 *
	 * @return the test yn of this simulation
	 */
	@AutoEscape
	public String getTestYn();

	/**
	 * Sets the test yn of this simulation.
	 *
	 * @param testYn the test yn of this simulation
	 */
	public void setTestYn(String testYn);

	@Override
	public boolean isNew();

	@Override
	public void setNew(boolean n);

	@Override
	public boolean isCachedModel();

	@Override
	public void setCachedModel(boolean cachedModel);

	@Override
	public boolean isEscapedModel();

	@Override
	public Serializable getPrimaryKeyObj();

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj);

	@Override
	public ExpandoBridge getExpandoBridge();

	@Override
	public void setExpandoBridgeAttributes(BaseModel<?> baseModel);

	@Override
	public void setExpandoBridgeAttributes(ExpandoBridge expandoBridge);

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext);

	public String[] getAvailableLanguageIds();

	public String getDefaultLanguageId();

	public void prepareLocalizedFieldsForImport() throws LocaleException;

	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException;

	@Override
	public Object clone();

	@Override
	public int compareTo(
		org.kisti.edison.bestsimulation.model.Simulation simulation);

	@Override
	public int hashCode();

	@Override
	public CacheModel<org.kisti.edison.bestsimulation.model.Simulation> toCacheModel();

	@Override
	public org.kisti.edison.bestsimulation.model.Simulation toEscapedModel();

	@Override
	public org.kisti.edison.bestsimulation.model.Simulation toUnescapedModel();

	@Override
	public String toString();

	@Override
	public String toXmlString();
}
<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
		
<div>
	<div id="runTypeDiv"></div>
	<div id="preprocessorDiv"></div>
</div>

<div id="<portlet:namespace/>jobparameter-dialog" title="Job Detail" class="newWindow" style="padding:0px; display:none; background-color: #f9f9f9;">
	<div class="newWheader">
		<div class="newWtitlebox"><img src="${contextPath}/images/title_newWindow.png" width="34" height="34" />
		<div class="newWtitle">Detail Job</div></div>
		<div class="newWclose"><img id="<portlet:namespace/>jobparameter-dialog-dialog-close-btn" name="<portlet:namespace/>jobparameter-dialog-dialog-close-btn" src="${contextPath}/images/btn_closeWindow.png" width="21" height="21" style="cursor:pointer;"/></div>
	</div>
	<div id="<portlet:namespace/>jobparameter-dialog-content" class="newWcont01" style="width:400px; max-height:500px; background:white; overflow:auto; white-space:pre-wrap; font-size: 15px;">
	</div>
</div>
<style type="text/css">
	.edison h4.subTitle {
		margin-left:10px;
	}
	
</style>
<script type="text/javascript">
$("#<portlet:namespace/>jobparameter-dialog").dialog({
	autoOpen: false,
	width: 'auto',
	height: 'auto',
	modal: true,
	resizable: false,
	show: {effect:'fade', speed: 800}, 
	hide: {effect:'fade', speed: 800},
	open: function(event, ui) {
    	$(this).removeClass("ui-widget-content");
    	$(this).parent().removeClass("ui-widget-content");
    },
    close: function() {
    }
}).dialog("widget").find(".ui-dialog-titlebar").remove();

$("#<portlet:namespace/>jobparameter-dialog-dialog-close-btn").click(function() {
	$("#<portlet:namespace/>jobparameter-dialog").dialog("close");
});

function codeMpiNumberCheck(obj, p_code_mpi_default, p_code_mpi_min, p_code_mpi_max){
	
	var v_code_mpi_min = new Number(nullToStrReplace(p_code_mpi_min, "NULL"));
	var v_code_mpi_max = new Number(nullToStrReplace(p_code_mpi_max, "NULL"));

	var inputCore = new Number(obj.value);

	if(isNaN(inputCore)==true){
		alert("is Only Number");
		obj.value = p_code_mpi_default;	
		return;
	}else{
		if(v_code_mpi_min != "NULL"){
			if(inputCore < v_code_mpi_min){
				alert("Greater than or equals " + v_code_mpi_min);
				obj.value = p_code_mpi_default;	
				return;
			}	
		}
		
		if(p_code_mpi_max != "NULL"){
			if(inputCore >  v_code_mpi_max){
				alert("Less than or equals " + v_code_mpi_max);
				obj.value = p_code_mpi_default;	
				return;
			}
		}
	}
	
	jQuery.ajax({
		type: "POST",
		url: "<%=getCountUserUseCoreURL%>",
		async : false,
		data  : {
				"<portlet:namespace/>groupId": $("#<portlet:namespace/>groupId").val(),
				"<portlet:namespace/>requestCore": inputCore		 
				 },
		success: function(data) {
						
			if(data.checkCore==false){
				
				var msg = "There are no idle resources.";
				msg += "\nAssigned cores : " + data.userAssignmentCores;
				msg += "\nRequest total core : " + data.requestCores;
				msg += "\nInput core : " + inputCore;
				obj.value = "";
			}
			preProcessorCheck();
	
		}//success
	});//jQuery.ajax
	
}


function preprocessorFormCreate(portMapList){
	$("#preprocessorDiv").empty();	
	$("#runTypeDiv").empty();	
	
	preFormCount = 0;
 	if($("#<portlet:namespace/>scienceAppRunType").val() == "<%=ScienceAppConstants.APP_RUNTYPE_SEQUENTIAL%>"){//SINGLE
		$("#runTypeDiv").append(
	  			 				$("<input/>")
											.attr("type","hidden")
											.attr("name","<portlet:namespace/>code_mpi_number")
											.attr("id","<portlet:namespace/>code_mpi_number")
											.val(1)
								);
	}else{//PARALLEL
		var defaultCpu = $("#<portlet:namespace/>scienceAppDefaultCpus").val();
		var maxCpu = $("#<portlet:namespace/>scienceAppMaxCpus").val();
		
		preFormCount++;
			 		
		$mpiTableNode = $("<table/>")
									.attr("width", "100%")
									.attr("border", "0")
									.attr("cellspacing", "0")
									.attr("cellpadding", "2")
									.addClass("table2_list")
									.append(
											$("<colgroup/>")
															.append($("<col>").attr("width", "18%"))
															.append($("<col>"))
											);
			
		$mpiTrNode = $("<tr/>");
			
		$mpiTrNode.append(
							$("<td/>")
									.addClass("title2")
									.append("CPU Number")
							);
		$mpiTrNode.append(
							$("<td/>").append(
											$("<input/>")
														.attr("type","text")
														.attr("name","<portlet:namespace/>code_mpi_number")
														.attr("id","<portlet:namespace/>code_mpi_number")
														.addClass("preValueGroup")
														.css("margin-bottom", "0")
														.attr("onBlur", "codeMpiNumberCheck(this, '"+ defaultCpu +"', '"+ defaultCpu +"', '"+ maxCpu +"')") //수정 필요 mpi 갯수
														.css("width", "30")
														.val((typeof simulationJobData == "undefined") ? defaultCpu : simulationJobData["code_mpi_number"])
											)
									.append(" &nbsp;&nbsp;<font color=\"#7B7B7B\"> Scope : " + defaultCpu + " ~ " + maxCpu + "</font>")
							);					
		$("#runTypeDiv").append('<h4 class="subTitle">MPI Setting</h4>');
		$mpiTableNode.append($mpiTrNode);
		
		$("#runTypeDiv").append($mpiTableNode);
	//	$("#preprocessorDiv").append("<input type=\"button\" onclick=\"<portlet:namespace/>goPortPortlet('" + "edisoninputDeck_WAR_edisonappstore2016portlet" +"'," + 101 + "" + ")\" value=\"test\" >");
	}

 	
 	if(typeof portMapList != "undefined" && portMapList.length > 0) {
		$('#preprocessorDiv').append('<div id="inputport_div">');
		$('#preprocessorDiv').append('<h4 class="subTitle">Input port Setting</h4>');
		
		$inputPortTableNode = $("<table/>")
		.attr("width", "100%")
		.attr("border", "0")
		.attr("cellspacing", "0")
		.attr("cellpadding", "2")
		.addClass("table2_list")
		.append(
				$("<colgroup/>")
								.append($("<col>").attr("width", "20%"))
								.append($("<col>").attr("width", "20%"))
								.append($("<col>").attr("width", "20%"))
								.append($("<col>").attr("width", "20%"))
								.append($("<col>").attr("width", "20%"))
				).append(
				$("<thead/>")
								.append($("<tr/>").append($("<th/>").text(Liferay.Language.get("edison-simulation-execute-port-label-portname"))).append($("<th/>").text(Liferay.Language.get("edison-simulation-execute-port-label-mandatory"))).append($("<th/>").text(Liferay.Language.get("edison-simulation-execute-port-label-insertdata"))).append($("<th/>").text(Liferay.Language.get("edison-simulation-execute-port-label-status"))).append($("<th/>").text(Liferay.Language.get("edison-simulation-execute-port-label-dataview"))))
				);
		
	 	for (var i = 0; i < portMapList.length; i++) {
			var portMap = portMapList[i];
			var portData = "";
			
			if(typeof simulationJobData != "undefined") {
				if(portMap.editorType == "Inputdeck") {
					portData = JSON.stringify(simulationJobData[portMap.portName]);
				} else {
					portData = simulationJobData[portMap.portName];
				}
			}
			
			$inputPortTrNode = $("<tr/>");
			$inputPortTrNode.append($("<td/>").addClass("TC").append(portMap.portName));
			
			if(portMap.mandatory) {
				$inputPortTrNode.append($("<td/>").addClass("TC").append(Liferay.Language.get("edison-simulation-execute-port-true")));
			} else {
				$inputPortTrNode.append($("<td/>").addClass("TC").append(Liferay.Language.get("edison-simulation-execute-port-false")));
			}
			
			$inputPortTrNode.append($("<td/>").addClass("TC").append('<input type="button" id="<portlet:namespace/>' + portMap.portName + '_popup" value="' + Liferay.Language.get("edison-simulation-execute-port-label-insertdata") + '" class="button04" data-portName="' + portMap.portName + '" data-portletId="' + portMap.exeFileName + '" data-portTypeId="' + portMap.port_type_id + '" data-portletURL="' + portMap.token + '" data-portData=\'' + portData + '\'  onClick=\'openEditorWindow(\"'+portMap.exeFileName+'\",\"'+portMap.title+'\",\"'+portMap.port_type_id+'\",\"'+ portMap.portName +'\",\"'+portMap.token+'\",\"'+portMap.plid+'\")\' />'));
			
			if(portData == '""' || portData == '') {
				$inputPortTrNode.append($("<td/>").addClass("TC").append('<span id="<portlet:namespace/>' + portMap.portName + '_info" style="margin:0px 10px;">None</span>'));
				$inputPortTrNode.append($("<td/>").addClass("TC").append('<img id="<portlet:namespace/>' + portMap.portName + '_info_btn" src=\"${contextPath }/images/fileicon.png\" style=\"cursor:pointer;  display:none;\" onclick=\"popupDataInfo(\'' + portMap.portName + '\')" />'));
			} else {
				$inputPortTrNode.append($("<td/>").addClass("TC").append('<span id="<portlet:namespace/>' + portMap.portName + '_info" style="margin:0px 10px; color:green;">SUCCESS</span>'));
				$inputPortTrNode.append($("<td/>").addClass("TC").append('<img id="<portlet:namespace/>' + portMap.portName + '_info_btn" src=\"${contextPath }/images/fileicon.png\" style=\"cursor:pointer; \" onclick=\"popupDataInfo(\'' + portMap.portName + '\')" />'));
			}
			
			$inputPortTrNode.appendTo($inputPortTableNode);
			$('#preprocessorDiv').append('<input type="hidden" id="<portlet:namespace/>portName" value="' + portMap.portName + '" data-mandatory="' + portMap.mandatory + '" data-editorType="' + portMap.editorType + '" />');
			$('#preprocessorDiv').append('<input type="hidden" id="<portlet:namespace/>' + portMap.portName + '" value=\'' + portData + '\'' + ' data-portTypeId=\'' + portMap.port_type_id + '\' />');
			$('#preprocessorDiv').append('<input type="hidden" id="<portlet:namespace/>' + portMap.portName + '_file" value="" />');
			$('#preprocessorDiv').append('<input type="hidden" id="<portlet:namespace/>' + portMap.portName + '_type" value="' + portMap.editorType + '" />');

		}
	 	$inputPortTableNode.appendTo($('#preprocessorDiv'));
	 	
/* 	 	for (var i = 0; i < portMapList.length; i++) {
	 		var portMap = portMapList[i];
	 		
			$('#<portlet:namespace/>' + portMap.name + '_popup').click(function(){
				var portName = $(this).attr("data-portName");
				var portletId = $(this).attr("data-portletId");
				var portTypeId = $(this).attr("data-portTypeId");
				var portlet_RenderURL = $(this).attr("data-portletURL");
				var portData = $(this).attr("data-portData");
				AUI().use("liferay-portlet-url", function(a) {
					var portletURL = Liferay.PortletURL.createURL(portlet_RenderURL);
					portletURL.setPortletId(portletId);
					portletURL.setPortletMode("view");
					portletURL.setWindowState("pop_up");
					portletURL.setParameter("portTypeId", portTypeId);
					portletURL.setParameter("portData", (((portData == "") ? "" : JSON.stringify(JSON.parse(portData)[0]))));
					portletURL.setParameter("portName", portName);
					
					console.log(portletURL);
					Liferay.Util.openWindow({ 
					     dialog: {
					    	 	 cache: false,
					             centered: true, 
					             height: 600, 
					             width: 1000,
					             modal: true,
					             destroyOnClose: true,
					             }, 
					     id: '<portlet:namespace/>' + portName + 'dialog' , 
					     title: 'inputDeck', 
					     uri: portletURL.toString() 
					});
					
					Liferay.provide(
						window,
						'closePopup',
						function(popupIdToClose) {
							Liferay.fire(
										'closeWindow',
										{
										 id:'<portlet:namespace/>' + popupIdToClose + 'dialog'
										}
							);
						},
						['aui-base','liferay-util-window']
					);
				});
			});
		} */
 	}
 	
 	
	$('#preprocessorDiv').append('</div>');
}

function popupDataInfo(id) {
	$('#<portlet:namespace/>jobparameter-dialog-content').empty();
	var type = $('#<portlet:namespace/>' + id + '_type').val();
	var content = $('#<portlet:namespace/>' + id).val();
	
	if(type == "Inputdeck") {
		content = JSON.parse(content);
		for (var i = 0; i < content.length; i++) {
			$('#<portlet:namespace/>jobparameter-dialog-content').append(content[i]["file-content"]);
		}
	} else {
		$('#<portlet:namespace/>jobparameter-dialog-content').append(id + " : " + content);
	}
	$("#<portlet:namespace/>jobparameter-dialog").dialog("open");
}

function preProcessorCheck(){
	var returnValue = true;
	
	var inputPortJson = $("#<portlet:namespace/>inputPortJson").val();
	if(inputPortJson != "") {
		inputPortJson = JSON.parse(inputPortJson);
		var portNameList = Object.keys(inputPortJson);
		console.log(portNameList);
		
		for (var i = 0; i < portNameList.length; i++) {
			var portName = portNameList[i];
			var mandatory = inputPortJson[portName]["mandatory"];
			console.log("message : " + mandatory + " , " + portName);
			if(mandatory == true) {
				var message = $('#<portlet:namespace/>' + portName).val();
				
				if(message == "") {
					returnValue = false;
					break;
				}
			}
		}
	}
	
	if(returnValue) {
		var isSubmit = $("#<portlet:namespace/>isSubmit").val();
		if(isSubmit == "false") {
			createJobForm();
		}
		return returnValue;
	} else {
		return returnValue;
	}
}	
	

function getServerFileList(cmd_directory, name, node){
	$.ajax({
		type: "POST",
   		url: "<%=getServerFileListURL%>",
   		
   		async : false,
   		dataType: 'json',
   		data  : {
   				"<portlet:namespace/>groupId":  $("#<portlet:namespace/>groupId").val(),
   				"<portlet:namespace/>cmd_directory": cmd_directory,
   				"<portlet:namespace/>cluster" : $("#<portlet:namespace/>cluster").val()
   				},
   		success: function(data) {
			$selectNode = $("<select/>").attr("name","<portlet:namespace/>"+name )
										.attr("id","<portlet:namespace/>"+name )
										.appendTo(node.find("td"));
			
			if(data.count.count!=0){
				for(var i = 0 ; i <data.count; i++){
	   				$selectNode.append($("<option/>").val(data.files[i].id).text(data.files[i].name));
	   			}
				
   				$selectNode.addClass("preValueGroup");
   				$selectNode.attr("onChange", "preProcessorCheck()");
   			}
   		},error:function(data,e){ 
   			alert("ServerFileList Search Error"); 
   			return false;
   		},complete:function(){

		}
    });       
}

function myFilePopup(responseFormId, responseFileName,simulationWorkflowType){
	$("#"+responseFormId).val("").change();
	$("#"+responseFileName).val("").change();
		
	var <portlet:namespace/>url = "${preprocessorPopupRenderURL}&${preprocessorPortletNamespace}returnId="+responseFormId+"&${preprocessorPortletNamespace}returnFileName="+responseFileName+"&${preprocessorPortletNamespace}cluster="+$("#<portlet:namespace/>cluster").val()+"&${preprocessorPortletNamespace}workflowType="+simulationWorkflowType;
	var <portlet:namespace/>width = 1000;
	var <portlet:namespace/>height = 800;
	var <portlet:namespace/>top = (screen.availHeight / 2) - (<portlet:namespace/>height / 2);
	var <portlet:namespace/>left = (screen.availWidth / 2) - (<portlet:namespace/>width / 2); 
	var <portlet:namespace/>popupWindowName = "myFilePopup";
	var <portlet:namespace/>popupOption = "directories=no, width="+<portlet:namespace/>width+", height="+<portlet:namespace/>height+", top="+<portlet:namespace/>top+", left="+<portlet:namespace/>left+", location=0, menubar=0, resizable=0, scrollbars=1, status=0, toolbar=0"

	var popup = window.open(<portlet:namespace/>url, <portlet:namespace/>popupWindowName, <portlet:namespace/>popupOption);
	
	popup.focus();
}


</script>

<aui:script>
function openEditorWindow(portletId, portletTitle, taskId, portName, token, plid)
{
	var portData = $("#<portlet:namespace/>" + portName).val();
	var portType = $("#<portlet:namespace/>" + portName + "_type").val();
	var portTypeId = $("#<portlet:namespace/>" + portName).attr("data-portTypeId");
	
	AUI().use("liferay-portlet-url", function(a) {
	var renderURL = Liferay.PortletURL.createRenderURL();
	  	renderURL.setPortletId( portletId );
	  	renderURL.setPlid(plid);
  	renderURL.setParameter("taskId", taskId);
  	renderURL.setParameter("portTypeId", portTypeId);
  	renderURL.setParameter("portName", portName);
  	renderURL.setParameter("portletTitle", portletTitle);
  	renderURL.setParameter("token", token);
  	
  	if(portType == "Inputdeck") {
	  	renderURL.setParameter("width", 900);
	  	renderURL.setParameter("height", 600);
	  	renderURL.setParameter("portData", (((portData == "") ? "" : JSON.stringify(JSON.parse(portData)[0]))));
  	} else {
	  	renderURL.setParameter("width", 400);
	  	renderURL.setParameter("height", 230);
	  	renderURL.setParameter("portData", portData);
  	}
  	openWindow(renderURL);
	});
}

function openWindow(renderURL)
{
	var dialogId = 	renderURL.params.portName+Date.now();
					renderURL.setName("Popup");
				  	renderURL.setWindowState("pop_up"); 
				  	renderURL.setParameter("dialogId", dialogId);
				 	renderURL.setParameter("workflowType", "workflow");
	 	
	 	var url = renderURL.toString();
	Liferay.Util.openWindow({
		dialog: {
			cache: false,
          	destroyOnClose: true,
			centered: true,
			modal: true,
			resizable: false,
			width:renderURL.params.width, 
			height:renderURL.params.height
		},
		id: dialogId ,
		title: renderURL.params.portletTitle,
		uri : url+ '&p_p_auth='+ renderURL.params.token
	});
}

</aui:script>
/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.kisti.edison.science.model;

import com.liferay.portal.LocaleException;
import com.liferay.portal.kernel.bean.AutoEscape;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.model.BaseModel;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;

import org.kisti.edison.science.service.persistence.DeveloperRequestPK;

import java.io.Serializable;

import java.util.Date;
import java.util.Locale;
import java.util.Map;

/**
 * The base model interface for the DeveloperRequest service. Represents a row in the &quot;EDAPP_DeveloperRequest&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This interface and its corresponding implementation {@link org.kisti.edison.science.model.impl.DeveloperRequestModelImpl} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link org.kisti.edison.science.model.impl.DeveloperRequestImpl}.
 * </p>
 *
 * @author EDISON
 * @see DeveloperRequest
 * @see org.kisti.edison.science.model.impl.DeveloperRequestImpl
 * @see org.kisti.edison.science.model.impl.DeveloperRequestModelImpl
 * @generated
 */
public interface DeveloperRequestModel extends BaseModel<DeveloperRequest> {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this interface directly. All methods that expect a developer request model instance should use the {@link DeveloperRequest} interface instead.
	 */

	/**
	 * Returns the primary key of this developer request.
	 *
	 * @return the primary key of this developer request
	 */
	public DeveloperRequestPK getPrimaryKey();

	/**
	 * Sets the primary key of this developer request.
	 *
	 * @param primaryKey the primary key of this developer request
	 */
	public void setPrimaryKey(DeveloperRequestPK primaryKey);

	/**
	 * Returns the request seq of this developer request.
	 *
	 * @return the request seq of this developer request
	 */
	public long getRequestSeq();

	/**
	 * Sets the request seq of this developer request.
	 *
	 * @param requestSeq the request seq of this developer request
	 */
	public void setRequestSeq(long requestSeq);

	/**
	 * Returns the user ID of this developer request.
	 *
	 * @return the user ID of this developer request
	 */
	public long getUserId();

	/**
	 * Sets the user ID of this developer request.
	 *
	 * @param userId the user ID of this developer request
	 */
	public void setUserId(long userId);

	/**
	 * Returns the user uuid of this developer request.
	 *
	 * @return the user uuid of this developer request
	 * @throws SystemException if a system exception occurred
	 */
	public String getUserUuid() throws SystemException;

	/**
	 * Sets the user uuid of this developer request.
	 *
	 * @param userUuid the user uuid of this developer request
	 */
	public void setUserUuid(String userUuid);

	/**
	 * Returns the group ID of this developer request.
	 *
	 * @return the group ID of this developer request
	 */
	public long getGroupId();

	/**
	 * Sets the group ID of this developer request.
	 *
	 * @param groupId the group ID of this developer request
	 */
	public void setGroupId(long groupId);

	/**
	 * Returns the request sort of this developer request.
	 *
	 * @return the request sort of this developer request
	 */
	@AutoEscape
	public String getRequestSort();

	/**
	 * Sets the request sort of this developer request.
	 *
	 * @param requestSort the request sort of this developer request
	 */
	public void setRequestSort(String requestSort);

	/**
	 * Returns the request date of this developer request.
	 *
	 * @return the request date of this developer request
	 */
	public Date getRequestDate();

	/**
	 * Sets the request date of this developer request.
	 *
	 * @param requestDate the request date of this developer request
	 */
	public void setRequestDate(Date requestDate);

	/**
	 * Returns the request note of this developer request.
	 *
	 * @return the request note of this developer request
	 */
	public String getRequestNote();

	/**
	 * Returns the localized request note of this developer request in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized request note of this developer request
	 */
	@AutoEscape
	public String getRequestNote(Locale locale);

	/**
	 * Returns the localized request note of this developer request in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized request note of this developer request. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getRequestNote(Locale locale, boolean useDefault);

	/**
	 * Returns the localized request note of this developer request in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized request note of this developer request
	 */
	@AutoEscape
	public String getRequestNote(String languageId);

	/**
	 * Returns the localized request note of this developer request in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized request note of this developer request
	 */
	@AutoEscape
	public String getRequestNote(String languageId, boolean useDefault);

	@AutoEscape
	public String getRequestNoteCurrentLanguageId();

	@AutoEscape
	public String getRequestNoteCurrentValue();

	/**
	 * Returns a map of the locales and localized request notes of this developer request.
	 *
	 * @return the locales and localized request notes of this developer request
	 */
	public Map<Locale, String> getRequestNoteMap();

	/**
	 * Sets the request note of this developer request.
	 *
	 * @param requestNote the request note of this developer request
	 */
	public void setRequestNote(String requestNote);

	/**
	 * Sets the localized request note of this developer request in the language.
	 *
	 * @param requestNote the localized request note of this developer request
	 * @param locale the locale of the language
	 */
	public void setRequestNote(String requestNote, Locale locale);

	/**
	 * Sets the localized request note of this developer request in the language, and sets the default locale.
	 *
	 * @param requestNote the localized request note of this developer request
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setRequestNote(String requestNote, Locale locale,
		Locale defaultLocale);

	public void setRequestNoteCurrentLanguageId(String languageId);

	/**
	 * Sets the localized request notes of this developer request from the map of locales and localized request notes.
	 *
	 * @param requestNoteMap the locales and localized request notes of this developer request
	 */
	public void setRequestNoteMap(Map<Locale, String> requestNoteMap);

	/**
	 * Sets the localized request notes of this developer request from the map of locales and localized request notes, and sets the default locale.
	 *
	 * @param requestNoteMap the locales and localized request notes of this developer request
	 * @param defaultLocale the default locale
	 */
	public void setRequestNoteMap(Map<Locale, String> requestNoteMap,
		Locale defaultLocale);

	/**
	 * Returns the request status of this developer request.
	 *
	 * @return the request status of this developer request
	 */
	@AutoEscape
	public String getRequestStatus();

	/**
	 * Sets the request status of this developer request.
	 *
	 * @param requestStatus the request status of this developer request
	 */
	public void setRequestStatus(String requestStatus);

	/**
	 * Returns the process date of this developer request.
	 *
	 * @return the process date of this developer request
	 */
	public Date getProcessDate();

	/**
	 * Sets the process date of this developer request.
	 *
	 * @param processDate the process date of this developer request
	 */
	public void setProcessDate(Date processDate);

	/**
	 * Returns the process note of this developer request.
	 *
	 * @return the process note of this developer request
	 */
	public String getProcessNote();

	/**
	 * Returns the localized process note of this developer request in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized process note of this developer request
	 */
	@AutoEscape
	public String getProcessNote(Locale locale);

	/**
	 * Returns the localized process note of this developer request in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized process note of this developer request. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getProcessNote(Locale locale, boolean useDefault);

	/**
	 * Returns the localized process note of this developer request in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized process note of this developer request
	 */
	@AutoEscape
	public String getProcessNote(String languageId);

	/**
	 * Returns the localized process note of this developer request in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized process note of this developer request
	 */
	@AutoEscape
	public String getProcessNote(String languageId, boolean useDefault);

	@AutoEscape
	public String getProcessNoteCurrentLanguageId();

	@AutoEscape
	public String getProcessNoteCurrentValue();

	/**
	 * Returns a map of the locales and localized process notes of this developer request.
	 *
	 * @return the locales and localized process notes of this developer request
	 */
	public Map<Locale, String> getProcessNoteMap();

	/**
	 * Sets the process note of this developer request.
	 *
	 * @param processNote the process note of this developer request
	 */
	public void setProcessNote(String processNote);

	/**
	 * Sets the localized process note of this developer request in the language.
	 *
	 * @param processNote the localized process note of this developer request
	 * @param locale the locale of the language
	 */
	public void setProcessNote(String processNote, Locale locale);

	/**
	 * Sets the localized process note of this developer request in the language, and sets the default locale.
	 *
	 * @param processNote the localized process note of this developer request
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setProcessNote(String processNote, Locale locale,
		Locale defaultLocale);

	public void setProcessNoteCurrentLanguageId(String languageId);

	/**
	 * Sets the localized process notes of this developer request from the map of locales and localized process notes.
	 *
	 * @param processNoteMap the locales and localized process notes of this developer request
	 */
	public void setProcessNoteMap(Map<Locale, String> processNoteMap);

	/**
	 * Sets the localized process notes of this developer request from the map of locales and localized process notes, and sets the default locale.
	 *
	 * @param processNoteMap the locales and localized process notes of this developer request
	 * @param defaultLocale the default locale
	 */
	public void setProcessNoteMap(Map<Locale, String> processNoteMap,
		Locale defaultLocale);

	/**
	 * Returns the insert ID of this developer request.
	 *
	 * @return the insert ID of this developer request
	 */
	public long getInsertId();

	/**
	 * Sets the insert ID of this developer request.
	 *
	 * @param insertId the insert ID of this developer request
	 */
	public void setInsertId(long insertId);

	/**
	 * Returns the insert date of this developer request.
	 *
	 * @return the insert date of this developer request
	 */
	public Date getInsertDate();

	/**
	 * Sets the insert date of this developer request.
	 *
	 * @param insertDate the insert date of this developer request
	 */
	public void setInsertDate(Date insertDate);

	/**
	 * Returns the update ID of this developer request.
	 *
	 * @return the update ID of this developer request
	 */
	public long getUpdateId();

	/**
	 * Sets the update ID of this developer request.
	 *
	 * @param updateId the update ID of this developer request
	 */
	public void setUpdateId(long updateId);

	/**
	 * Returns the update date of this developer request.
	 *
	 * @return the update date of this developer request
	 */
	public Date getUpdateDate();

	/**
	 * Sets the update date of this developer request.
	 *
	 * @param updateDate the update date of this developer request
	 */
	public void setUpdateDate(Date updateDate);

	@Override
	public boolean isNew();

	@Override
	public void setNew(boolean n);

	@Override
	public boolean isCachedModel();

	@Override
	public void setCachedModel(boolean cachedModel);

	@Override
	public boolean isEscapedModel();

	@Override
	public Serializable getPrimaryKeyObj();

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj);

	@Override
	public ExpandoBridge getExpandoBridge();

	@Override
	public void setExpandoBridgeAttributes(BaseModel<?> baseModel);

	@Override
	public void setExpandoBridgeAttributes(ExpandoBridge expandoBridge);

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext);

	public String[] getAvailableLanguageIds();

	public String getDefaultLanguageId();

	public void prepareLocalizedFieldsForImport() throws LocaleException;

	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException;

	@Override
	public Object clone();

	@Override
	public int compareTo(
		org.kisti.edison.science.model.DeveloperRequest developerRequest);

	@Override
	public int hashCode();

	@Override
	public CacheModel<org.kisti.edison.science.model.DeveloperRequest> toCacheModel();

	@Override
	public org.kisti.edison.science.model.DeveloperRequest toEscapedModel();

	@Override
	public org.kisti.edison.science.model.DeveloperRequest toUnescapedModel();

	@Override
	public String toString();

	@Override
	public String toXmlString();
}
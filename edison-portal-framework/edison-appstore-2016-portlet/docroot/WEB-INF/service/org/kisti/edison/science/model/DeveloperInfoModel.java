/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.kisti.edison.science.model;

import com.liferay.portal.LocaleException;
import com.liferay.portal.kernel.bean.AutoEscape;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.model.BaseModel;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;

import org.kisti.edison.science.service.persistence.DeveloperInfoPK;

import java.io.Serializable;

import java.util.Date;
import java.util.Locale;
import java.util.Map;

/**
 * The base model interface for the DeveloperInfo service. Represents a row in the &quot;EDAPP_DeveloperInfo&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This interface and its corresponding implementation {@link org.kisti.edison.science.model.impl.DeveloperInfoModelImpl} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link org.kisti.edison.science.model.impl.DeveloperInfoImpl}.
 * </p>
 *
 * @author EDISON
 * @see DeveloperInfo
 * @see org.kisti.edison.science.model.impl.DeveloperInfoImpl
 * @see org.kisti.edison.science.model.impl.DeveloperInfoModelImpl
 * @generated
 */
public interface DeveloperInfoModel extends BaseModel<DeveloperInfo> {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this interface directly. All methods that expect a developer info model instance should use the {@link DeveloperInfo} interface instead.
	 */

	/**
	 * Returns the primary key of this developer info.
	 *
	 * @return the primary key of this developer info
	 */
	public DeveloperInfoPK getPrimaryKey();

	/**
	 * Sets the primary key of this developer info.
	 *
	 * @param primaryKey the primary key of this developer info
	 */
	public void setPrimaryKey(DeveloperInfoPK primaryKey);

	/**
	 * Returns the user ID of this developer info.
	 *
	 * @return the user ID of this developer info
	 */
	public long getUserId();

	/**
	 * Sets the user ID of this developer info.
	 *
	 * @param userId the user ID of this developer info
	 */
	public void setUserId(long userId);

	/**
	 * Returns the user uuid of this developer info.
	 *
	 * @return the user uuid of this developer info
	 * @throws SystemException if a system exception occurred
	 */
	public String getUserUuid() throws SystemException;

	/**
	 * Sets the user uuid of this developer info.
	 *
	 * @param userUuid the user uuid of this developer info
	 */
	public void setUserUuid(String userUuid);

	/**
	 * Returns the group ID of this developer info.
	 *
	 * @return the group ID of this developer info
	 */
	public long getGroupId();

	/**
	 * Sets the group ID of this developer info.
	 *
	 * @param groupId the group ID of this developer info
	 */
	public void setGroupId(long groupId);

	/**
	 * Returns the screen name of this developer info.
	 *
	 * @return the screen name of this developer info
	 */
	@AutoEscape
	public String getScreenName();

	/**
	 * Sets the screen name of this developer info.
	 *
	 * @param screenName the screen name of this developer info
	 */
	public void setScreenName(String screenName);

	/**
	 * Returns the first name of this developer info.
	 *
	 * @return the first name of this developer info
	 */
	@AutoEscape
	public String getFirstName();

	/**
	 * Sets the first name of this developer info.
	 *
	 * @param firstName the first name of this developer info
	 */
	public void setFirstName(String firstName);

	/**
	 * Returns the email address of this developer info.
	 *
	 * @return the email address of this developer info
	 */
	@AutoEscape
	public String getEmailAddress();

	/**
	 * Sets the email address of this developer info.
	 *
	 * @param emailAddress the email address of this developer info
	 */
	public void setEmailAddress(String emailAddress);

	/**
	 * Returns the university field of this developer info.
	 *
	 * @return the university field of this developer info
	 */
	@AutoEscape
	public String getUniversityField();

	/**
	 * Sets the university field of this developer info.
	 *
	 * @param universityField the university field of this developer info
	 */
	public void setUniversityField(String universityField);

	/**
	 * Returns the major field of this developer info.
	 *
	 * @return the major field of this developer info
	 */
	@AutoEscape
	public String getMajorField();

	/**
	 * Sets the major field of this developer info.
	 *
	 * @param majorField the major field of this developer info
	 */
	public void setMajorField(String majorField);

	/**
	 * Returns the use start of this developer info.
	 *
	 * @return the use start of this developer info
	 */
	@AutoEscape
	public String getUseStart();

	/**
	 * Sets the use start of this developer info.
	 *
	 * @param useStart the use start of this developer info
	 */
	public void setUseStart(String useStart);

	/**
	 * Returns the use end of this developer info.
	 *
	 * @return the use end of this developer info
	 */
	@AutoEscape
	public String getUseEnd();

	/**
	 * Sets the use end of this developer info.
	 *
	 * @param useEnd the use end of this developer info
	 */
	public void setUseEnd(String useEnd);

	/**
	 * Returns the developer sort of this developer info.
	 *
	 * @return the developer sort of this developer info
	 */
	@AutoEscape
	public String getDeveloperSort();

	/**
	 * Sets the developer sort of this developer info.
	 *
	 * @param developerSort the developer sort of this developer info
	 */
	public void setDeveloperSort(String developerSort);

	/**
	 * Returns the language fortran of this developer info.
	 *
	 * @return the language fortran of this developer info
	 */
	public boolean getLanguageFortran();

	/**
	 * Returns <code>true</code> if this developer info is language fortran.
	 *
	 * @return <code>true</code> if this developer info is language fortran; <code>false</code> otherwise
	 */
	public boolean isLanguageFortran();

	/**
	 * Sets whether this developer info is language fortran.
	 *
	 * @param languageFortran the language fortran of this developer info
	 */
	public void setLanguageFortran(boolean languageFortran);

	/**
	 * Returns the language cpp of this developer info.
	 *
	 * @return the language cpp of this developer info
	 */
	public boolean getLanguageCpp();

	/**
	 * Returns <code>true</code> if this developer info is language cpp.
	 *
	 * @return <code>true</code> if this developer info is language cpp; <code>false</code> otherwise
	 */
	public boolean isLanguageCpp();

	/**
	 * Sets whether this developer info is language cpp.
	 *
	 * @param languageCpp the language cpp of this developer info
	 */
	public void setLanguageCpp(boolean languageCpp);

	/**
	 * Returns the language python of this developer info.
	 *
	 * @return the language python of this developer info
	 */
	public boolean getLanguagePython();

	/**
	 * Returns <code>true</code> if this developer info is language python.
	 *
	 * @return <code>true</code> if this developer info is language python; <code>false</code> otherwise
	 */
	public boolean isLanguagePython();

	/**
	 * Sets whether this developer info is language python.
	 *
	 * @param languagePython the language python of this developer info
	 */
	public void setLanguagePython(boolean languagePython);

	/**
	 * Returns the language java of this developer info.
	 *
	 * @return the language java of this developer info
	 */
	public boolean getLanguageJava();

	/**
	 * Returns <code>true</code> if this developer info is language java.
	 *
	 * @return <code>true</code> if this developer info is language java; <code>false</code> otherwise
	 */
	public boolean isLanguageJava();

	/**
	 * Sets whether this developer info is language java.
	 *
	 * @param languageJava the language java of this developer info
	 */
	public void setLanguageJava(boolean languageJava);

	/**
	 * Returns the language other of this developer info.
	 *
	 * @return the language other of this developer info
	 */
	public boolean getLanguageOther();

	/**
	 * Returns <code>true</code> if this developer info is language other.
	 *
	 * @return <code>true</code> if this developer info is language other; <code>false</code> otherwise
	 */
	public boolean isLanguageOther();

	/**
	 * Sets whether this developer info is language other.
	 *
	 * @param languageOther the language other of this developer info
	 */
	public void setLanguageOther(boolean languageOther);

	/**
	 * Returns the language other description of this developer info.
	 *
	 * @return the language other description of this developer info
	 */
	@AutoEscape
	public String getLanguageOtherDescription();

	/**
	 * Sets the language other description of this developer info.
	 *
	 * @param languageOtherDescription the language other description of this developer info
	 */
	public void setLanguageOtherDescription(String languageOtherDescription);

	/**
	 * Returns the rem of this developer info.
	 *
	 * @return the rem of this developer info
	 */
	public String getRem();

	/**
	 * Returns the localized rem of this developer info in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized rem of this developer info
	 */
	@AutoEscape
	public String getRem(Locale locale);

	/**
	 * Returns the localized rem of this developer info in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized rem of this developer info. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getRem(Locale locale, boolean useDefault);

	/**
	 * Returns the localized rem of this developer info in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized rem of this developer info
	 */
	@AutoEscape
	public String getRem(String languageId);

	/**
	 * Returns the localized rem of this developer info in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized rem of this developer info
	 */
	@AutoEscape
	public String getRem(String languageId, boolean useDefault);

	@AutoEscape
	public String getRemCurrentLanguageId();

	@AutoEscape
	public String getRemCurrentValue();

	/**
	 * Returns a map of the locales and localized rems of this developer info.
	 *
	 * @return the locales and localized rems of this developer info
	 */
	public Map<Locale, String> getRemMap();

	/**
	 * Sets the rem of this developer info.
	 *
	 * @param rem the rem of this developer info
	 */
	public void setRem(String rem);

	/**
	 * Sets the localized rem of this developer info in the language.
	 *
	 * @param rem the localized rem of this developer info
	 * @param locale the locale of the language
	 */
	public void setRem(String rem, Locale locale);

	/**
	 * Sets the localized rem of this developer info in the language, and sets the default locale.
	 *
	 * @param rem the localized rem of this developer info
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setRem(String rem, Locale locale, Locale defaultLocale);

	public void setRemCurrentLanguageId(String languageId);

	/**
	 * Sets the localized rems of this developer info from the map of locales and localized rems.
	 *
	 * @param remMap the locales and localized rems of this developer info
	 */
	public void setRemMap(Map<Locale, String> remMap);

	/**
	 * Sets the localized rems of this developer info from the map of locales and localized rems, and sets the default locale.
	 *
	 * @param remMap the locales and localized rems of this developer info
	 * @param defaultLocale the default locale
	 */
	public void setRemMap(Map<Locale, String> remMap, Locale defaultLocale);

	/**
	 * Returns the agreement yn of this developer info.
	 *
	 * @return the agreement yn of this developer info
	 */
	public boolean getAgreementYn();

	/**
	 * Returns <code>true</code> if this developer info is agreement yn.
	 *
	 * @return <code>true</code> if this developer info is agreement yn; <code>false</code> otherwise
	 */
	public boolean isAgreementYn();

	/**
	 * Sets whether this developer info is agreement yn.
	 *
	 * @param agreementYn the agreement yn of this developer info
	 */
	public void setAgreementYn(boolean agreementYn);

	/**
	 * Returns the written oath logical of this developer info.
	 *
	 * @return the written oath logical of this developer info
	 */
	@AutoEscape
	public String getWrittenOathLogical();

	/**
	 * Sets the written oath logical of this developer info.
	 *
	 * @param writtenOathLogical the written oath logical of this developer info
	 */
	public void setWrittenOathLogical(String writtenOathLogical);

	/**
	 * Returns the written oath physical of this developer info.
	 *
	 * @return the written oath physical of this developer info
	 */
	@AutoEscape
	public String getWrittenOathPhysical();

	/**
	 * Sets the written oath physical of this developer info.
	 *
	 * @param writtenOathPhysical the written oath physical of this developer info
	 */
	public void setWrittenOathPhysical(String writtenOathPhysical);

	/**
	 * Returns the detail ip of this developer info.
	 *
	 * @return the detail ip of this developer info
	 */
	@AutoEscape
	public String getDetailIp();

	/**
	 * Sets the detail ip of this developer info.
	 *
	 * @param detailIp the detail ip of this developer info
	 */
	public void setDetailIp(String detailIp);

	/**
	 * Returns the detail os of this developer info.
	 *
	 * @return the detail os of this developer info
	 */
	@AutoEscape
	public String getDetailOs();

	/**
	 * Sets the detail os of this developer info.
	 *
	 * @param detailOs the detail os of this developer info
	 */
	public void setDetailOs(String detailOs);

	/**
	 * Returns the detail cpu of this developer info.
	 *
	 * @return the detail cpu of this developer info
	 */
	@AutoEscape
	public String getDetailCpu();

	/**
	 * Sets the detail cpu of this developer info.
	 *
	 * @param detailCpu the detail cpu of this developer info
	 */
	public void setDetailCpu(String detailCpu);

	/**
	 * Returns the detail storate of this developer info.
	 *
	 * @return the detail storate of this developer info
	 */
	@AutoEscape
	public String getDetailStorate();

	/**
	 * Sets the detail storate of this developer info.
	 *
	 * @param detailStorate the detail storate of this developer info
	 */
	public void setDetailStorate(String detailStorate);

	/**
	 * Returns the detail library of this developer info.
	 *
	 * @return the detail library of this developer info
	 */
	@AutoEscape
	public String getDetailLibrary();

	/**
	 * Sets the detail library of this developer info.
	 *
	 * @param detailLibrary the detail library of this developer info
	 */
	public void setDetailLibrary(String detailLibrary);

	/**
	 * Returns the insert ID of this developer info.
	 *
	 * @return the insert ID of this developer info
	 */
	public long getInsertId();

	/**
	 * Sets the insert ID of this developer info.
	 *
	 * @param insertId the insert ID of this developer info
	 */
	public void setInsertId(long insertId);

	/**
	 * Returns the insert date of this developer info.
	 *
	 * @return the insert date of this developer info
	 */
	public Date getInsertDate();

	/**
	 * Sets the insert date of this developer info.
	 *
	 * @param insertDate the insert date of this developer info
	 */
	public void setInsertDate(Date insertDate);

	/**
	 * Returns the update ID of this developer info.
	 *
	 * @return the update ID of this developer info
	 */
	public long getUpdateId();

	/**
	 * Sets the update ID of this developer info.
	 *
	 * @param updateId the update ID of this developer info
	 */
	public void setUpdateId(long updateId);

	/**
	 * Returns the update date of this developer info.
	 *
	 * @return the update date of this developer info
	 */
	public Date getUpdateDate();

	/**
	 * Sets the update date of this developer info.
	 *
	 * @param updateDate the update date of this developer info
	 */
	public void setUpdateDate(Date updateDate);

	/**
	 * Returns the etc of this developer info.
	 *
	 * @return the etc of this developer info
	 */
	public String getEtc();

	/**
	 * Returns the localized etc of this developer info in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized etc of this developer info
	 */
	@AutoEscape
	public String getEtc(Locale locale);

	/**
	 * Returns the localized etc of this developer info in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized etc of this developer info. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getEtc(Locale locale, boolean useDefault);

	/**
	 * Returns the localized etc of this developer info in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized etc of this developer info
	 */
	@AutoEscape
	public String getEtc(String languageId);

	/**
	 * Returns the localized etc of this developer info in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized etc of this developer info
	 */
	@AutoEscape
	public String getEtc(String languageId, boolean useDefault);

	@AutoEscape
	public String getEtcCurrentLanguageId();

	@AutoEscape
	public String getEtcCurrentValue();

	/**
	 * Returns a map of the locales and localized etcs of this developer info.
	 *
	 * @return the locales and localized etcs of this developer info
	 */
	public Map<Locale, String> getEtcMap();

	/**
	 * Sets the etc of this developer info.
	 *
	 * @param etc the etc of this developer info
	 */
	public void setEtc(String etc);

	/**
	 * Sets the localized etc of this developer info in the language.
	 *
	 * @param etc the localized etc of this developer info
	 * @param locale the locale of the language
	 */
	public void setEtc(String etc, Locale locale);

	/**
	 * Sets the localized etc of this developer info in the language, and sets the default locale.
	 *
	 * @param etc the localized etc of this developer info
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setEtc(String etc, Locale locale, Locale defaultLocale);

	public void setEtcCurrentLanguageId(String languageId);

	/**
	 * Sets the localized etcs of this developer info from the map of locales and localized etcs.
	 *
	 * @param etcMap the locales and localized etcs of this developer info
	 */
	public void setEtcMap(Map<Locale, String> etcMap);

	/**
	 * Sets the localized etcs of this developer info from the map of locales and localized etcs, and sets the default locale.
	 *
	 * @param etcMap the locales and localized etcs of this developer info
	 * @param defaultLocale the default locale
	 */
	public void setEtcMap(Map<Locale, String> etcMap, Locale defaultLocale);

	/**
	 * Returns the developer ID of this developer info.
	 *
	 * @return the developer ID of this developer info
	 */
	@AutoEscape
	public String getDeveloperId();

	/**
	 * Sets the developer ID of this developer info.
	 *
	 * @param developerId the developer ID of this developer info
	 */
	public void setDeveloperId(String developerId);

	/**
	 * Returns the developer password of this developer info.
	 *
	 * @return the developer password of this developer info
	 */
	@AutoEscape
	public String getDeveloperPassword();

	/**
	 * Sets the developer password of this developer info.
	 *
	 * @param developerPassword the developer password of this developer info
	 */
	public void setDeveloperPassword(String developerPassword);

	@Override
	public boolean isNew();

	@Override
	public void setNew(boolean n);

	@Override
	public boolean isCachedModel();

	@Override
	public void setCachedModel(boolean cachedModel);

	@Override
	public boolean isEscapedModel();

	@Override
	public Serializable getPrimaryKeyObj();

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj);

	@Override
	public ExpandoBridge getExpandoBridge();

	@Override
	public void setExpandoBridgeAttributes(BaseModel<?> baseModel);

	@Override
	public void setExpandoBridgeAttributes(ExpandoBridge expandoBridge);

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext);

	public String[] getAvailableLanguageIds();

	public String getDefaultLanguageId();

	public void prepareLocalizedFieldsForImport() throws LocaleException;

	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException;

	@Override
	public Object clone();

	@Override
	public int compareTo(
		org.kisti.edison.science.model.DeveloperInfo developerInfo);

	@Override
	public int hashCode();

	@Override
	public CacheModel<org.kisti.edison.science.model.DeveloperInfo> toCacheModel();

	@Override
	public org.kisti.edison.science.model.DeveloperInfo toEscapedModel();

	@Override
	public org.kisti.edison.science.model.DeveloperInfo toUnescapedModel();

	@Override
	public String toString();

	@Override
	public String toXmlString();
}
/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.kisti.edison.science.model;

import com.liferay.portal.LocaleException;
import com.liferay.portal.kernel.bean.AutoEscape;
import com.liferay.portal.model.BaseModel;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;

import java.io.Serializable;

import java.util.Date;
import java.util.Locale;
import java.util.Map;

/**
 * The base model interface for the ScienceAppDescription service. Represents a row in the &quot;EDAPP_ScienceAppDescription&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This interface and its corresponding implementation {@link org.kisti.edison.science.model.impl.ScienceAppDescriptionModelImpl} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link org.kisti.edison.science.model.impl.ScienceAppDescriptionImpl}.
 * </p>
 *
 * @author EDISON
 * @see ScienceAppDescription
 * @see org.kisti.edison.science.model.impl.ScienceAppDescriptionImpl
 * @see org.kisti.edison.science.model.impl.ScienceAppDescriptionModelImpl
 * @generated
 */
public interface ScienceAppDescriptionModel extends BaseModel<ScienceAppDescription> {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this interface directly. All methods that expect a science app description model instance should use the {@link ScienceAppDescription} interface instead.
	 */

	/**
	 * Returns the primary key of this science app description.
	 *
	 * @return the primary key of this science app description
	 */
	public long getPrimaryKey();

	/**
	 * Sets the primary key of this science app description.
	 *
	 * @param primaryKey the primary key of this science app description
	 */
	public void setPrimaryKey(long primaryKey);

	/**
	 * Returns the description ID of this science app description.
	 *
	 * @return the description ID of this science app description
	 */
	public long getDescriptionId();

	/**
	 * Sets the description ID of this science app description.
	 *
	 * @param descriptionId the description ID of this science app description
	 */
	public void setDescriptionId(long descriptionId);

	/**
	 * Returns the content of this science app description.
	 *
	 * @return the content of this science app description
	 */
	public String getContent();

	/**
	 * Returns the localized content of this science app description in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized content of this science app description
	 */
	@AutoEscape
	public String getContent(Locale locale);

	/**
	 * Returns the localized content of this science app description in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized content of this science app description. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getContent(Locale locale, boolean useDefault);

	/**
	 * Returns the localized content of this science app description in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized content of this science app description
	 */
	@AutoEscape
	public String getContent(String languageId);

	/**
	 * Returns the localized content of this science app description in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized content of this science app description
	 */
	@AutoEscape
	public String getContent(String languageId, boolean useDefault);

	@AutoEscape
	public String getContentCurrentLanguageId();

	@AutoEscape
	public String getContentCurrentValue();

	/**
	 * Returns a map of the locales and localized contents of this science app description.
	 *
	 * @return the locales and localized contents of this science app description
	 */
	public Map<Locale, String> getContentMap();

	/**
	 * Sets the content of this science app description.
	 *
	 * @param content the content of this science app description
	 */
	public void setContent(String content);

	/**
	 * Sets the localized content of this science app description in the language.
	 *
	 * @param content the localized content of this science app description
	 * @param locale the locale of the language
	 */
	public void setContent(String content, Locale locale);

	/**
	 * Sets the localized content of this science app description in the language, and sets the default locale.
	 *
	 * @param content the localized content of this science app description
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setContent(String content, Locale locale, Locale defaultLocale);

	public void setContentCurrentLanguageId(String languageId);

	/**
	 * Sets the localized contents of this science app description from the map of locales and localized contents.
	 *
	 * @param contentMap the locales and localized contents of this science app description
	 */
	public void setContentMap(Map<Locale, String> contentMap);

	/**
	 * Sets the localized contents of this science app description from the map of locales and localized contents, and sets the default locale.
	 *
	 * @param contentMap the locales and localized contents of this science app description
	 * @param defaultLocale the default locale
	 */
	public void setContentMap(Map<Locale, String> contentMap,
		Locale defaultLocale);

	/**
	 * Returns the insert ID of this science app description.
	 *
	 * @return the insert ID of this science app description
	 */
	public long getInsertId();

	/**
	 * Sets the insert ID of this science app description.
	 *
	 * @param insertId the insert ID of this science app description
	 */
	public void setInsertId(long insertId);

	/**
	 * Returns the insert dt of this science app description.
	 *
	 * @return the insert dt of this science app description
	 */
	public Date getInsertDt();

	/**
	 * Sets the insert dt of this science app description.
	 *
	 * @param insertDt the insert dt of this science app description
	 */
	public void setInsertDt(Date insertDt);

	/**
	 * Returns the update ID of this science app description.
	 *
	 * @return the update ID of this science app description
	 */
	public long getUpdateId();

	/**
	 * Sets the update ID of this science app description.
	 *
	 * @param updateId the update ID of this science app description
	 */
	public void setUpdateId(long updateId);

	/**
	 * Returns the update dt of this science app description.
	 *
	 * @return the update dt of this science app description
	 */
	public Date getUpdateDt();

	/**
	 * Sets the update dt of this science app description.
	 *
	 * @param updateDt the update dt of this science app description
	 */
	public void setUpdateDt(Date updateDt);

	@Override
	public boolean isNew();

	@Override
	public void setNew(boolean n);

	@Override
	public boolean isCachedModel();

	@Override
	public void setCachedModel(boolean cachedModel);

	@Override
	public boolean isEscapedModel();

	@Override
	public Serializable getPrimaryKeyObj();

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj);

	@Override
	public ExpandoBridge getExpandoBridge();

	@Override
	public void setExpandoBridgeAttributes(BaseModel<?> baseModel);

	@Override
	public void setExpandoBridgeAttributes(ExpandoBridge expandoBridge);

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext);

	public String[] getAvailableLanguageIds();

	public String getDefaultLanguageId();

	public void prepareLocalizedFieldsForImport() throws LocaleException;

	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException;

	@Override
	public Object clone();

	@Override
	public int compareTo(
		org.kisti.edison.science.model.ScienceAppDescription scienceAppDescription);

	@Override
	public int hashCode();

	@Override
	public CacheModel<org.kisti.edison.science.model.ScienceAppDescription> toCacheModel();

	@Override
	public org.kisti.edison.science.model.ScienceAppDescription toEscapedModel();

	@Override
	public org.kisti.edison.science.model.ScienceAppDescription toUnescapedModel();

	@Override
	public String toString();

	@Override
	public String toXmlString();
}
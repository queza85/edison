/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.kisti.edison.science.model.impl;

import com.liferay.portal.LocaleException;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.LocaleUtil;
import com.liferay.portal.kernel.util.LocalizationUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.kernel.util.Validator;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import org.kisti.edison.science.model.ScienceAppDescription;
import org.kisti.edison.science.model.ScienceAppDescriptionModel;
import org.kisti.edison.science.model.ScienceAppDescriptionSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;

/**
 * The base model implementation for the ScienceAppDescription service. Represents a row in the &quot;EDAPP_ScienceAppDescription&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link org.kisti.edison.science.model.ScienceAppDescriptionModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ScienceAppDescriptionImpl}.
 * </p>
 *
 * @author EDISON
 * @see ScienceAppDescriptionImpl
 * @see org.kisti.edison.science.model.ScienceAppDescription
 * @see org.kisti.edison.science.model.ScienceAppDescriptionModel
 * @generated
 */
@JSON(strict = true)
public class ScienceAppDescriptionModelImpl extends BaseModelImpl<ScienceAppDescription>
	implements ScienceAppDescriptionModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a science app description model instance should use the {@link org.kisti.edison.science.model.ScienceAppDescription} interface instead.
	 */
	public static final String TABLE_NAME = "EDAPP_ScienceAppDescription";
	public static final Object[][] TABLE_COLUMNS = {
			{ "descriptionId", Types.BIGINT },
			{ "content", Types.VARCHAR },
			{ "insertId", Types.BIGINT },
			{ "insertDt", Types.TIMESTAMP },
			{ "updateId", Types.BIGINT },
			{ "updateDt", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table EDAPP_ScienceAppDescription (descriptionId LONG not null primary key,content STRING null,insertId LONG,insertDt DATE null,updateId LONG,updateDt DATE null)";
	public static final String TABLE_SQL_DROP = "drop table EDAPP_ScienceAppDescription";
	public static final String ORDER_BY_JPQL = " ORDER BY scienceAppDescription.insertDt ASC";
	public static final String ORDER_BY_SQL = " ORDER BY EDAPP_ScienceAppDescription.insertDt ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.org.kisti.edison.science.model.ScienceAppDescription"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.org.kisti.edison.science.model.ScienceAppDescription"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static ScienceAppDescription toModel(
		ScienceAppDescriptionSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		ScienceAppDescription model = new ScienceAppDescriptionImpl();

		model.setDescriptionId(soapModel.getDescriptionId());
		model.setContent(soapModel.getContent());
		model.setInsertId(soapModel.getInsertId());
		model.setInsertDt(soapModel.getInsertDt());
		model.setUpdateId(soapModel.getUpdateId());
		model.setUpdateDt(soapModel.getUpdateDt());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<ScienceAppDescription> toModels(
		ScienceAppDescriptionSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<ScienceAppDescription> models = new ArrayList<ScienceAppDescription>(soapModels.length);

		for (ScienceAppDescriptionSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.org.kisti.edison.science.model.ScienceAppDescription"));

	public ScienceAppDescriptionModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _descriptionId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setDescriptionId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _descriptionId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ScienceAppDescription.class;
	}

	@Override
	public String getModelClassName() {
		return ScienceAppDescription.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("descriptionId", getDescriptionId());
		attributes.put("content", getContent());
		attributes.put("insertId", getInsertId());
		attributes.put("insertDt", getInsertDt());
		attributes.put("updateId", getUpdateId());
		attributes.put("updateDt", getUpdateDt());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long descriptionId = (Long)attributes.get("descriptionId");

		if (descriptionId != null) {
			setDescriptionId(descriptionId);
		}

		String content = (String)attributes.get("content");

		if (content != null) {
			setContent(content);
		}

		Long insertId = (Long)attributes.get("insertId");

		if (insertId != null) {
			setInsertId(insertId);
		}

		Date insertDt = (Date)attributes.get("insertDt");

		if (insertDt != null) {
			setInsertDt(insertDt);
		}

		Long updateId = (Long)attributes.get("updateId");

		if (updateId != null) {
			setUpdateId(updateId);
		}

		Date updateDt = (Date)attributes.get("updateDt");

		if (updateDt != null) {
			setUpdateDt(updateDt);
		}
	}

	@JSON
	@Override
	public long getDescriptionId() {
		return _descriptionId;
	}

	@Override
	public void setDescriptionId(long descriptionId) {
		_descriptionId = descriptionId;
	}

	@JSON
	@Override
	public String getContent() {
		if (_content == null) {
			return StringPool.BLANK;
		}
		else {
			return _content;
		}
	}

	@Override
	public String getContent(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getContent(languageId);
	}

	@Override
	public String getContent(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getContent(languageId, useDefault);
	}

	@Override
	public String getContent(String languageId) {
		return LocalizationUtil.getLocalization(getContent(), languageId);
	}

	@Override
	public String getContent(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(getContent(), languageId,
			useDefault);
	}

	@Override
	public String getContentCurrentLanguageId() {
		return _contentCurrentLanguageId;
	}

	@JSON
	@Override
	public String getContentCurrentValue() {
		Locale locale = getLocale(_contentCurrentLanguageId);

		return getContent(locale);
	}

	@Override
	public Map<Locale, String> getContentMap() {
		return LocalizationUtil.getLocalizationMap(getContent());
	}

	@Override
	public void setContent(String content) {
		_content = content;
	}

	@Override
	public void setContent(String content, Locale locale) {
		setContent(content, locale, LocaleUtil.getDefault());
	}

	@Override
	public void setContent(String content, Locale locale, Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(content)) {
			setContent(LocalizationUtil.updateLocalization(getContent(),
					"Content", content, languageId, defaultLanguageId));
		}
		else {
			setContent(LocalizationUtil.removeLocalization(getContent(),
					"Content", languageId));
		}
	}

	@Override
	public void setContentCurrentLanguageId(String languageId) {
		_contentCurrentLanguageId = languageId;
	}

	@Override
	public void setContentMap(Map<Locale, String> contentMap) {
		setContentMap(contentMap, LocaleUtil.getDefault());
	}

	@Override
	public void setContentMap(Map<Locale, String> contentMap,
		Locale defaultLocale) {
		if (contentMap == null) {
			return;
		}

		setContent(LocalizationUtil.updateLocalization(contentMap,
				getContent(), "Content", LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public long getInsertId() {
		return _insertId;
	}

	@Override
	public void setInsertId(long insertId) {
		_insertId = insertId;
	}

	@JSON
	@Override
	public Date getInsertDt() {
		return _insertDt;
	}

	@Override
	public void setInsertDt(Date insertDt) {
		_insertDt = insertDt;
	}

	@JSON
	@Override
	public long getUpdateId() {
		return _updateId;
	}

	@Override
	public void setUpdateId(long updateId) {
		_updateId = updateId;
	}

	@JSON
	@Override
	public Date getUpdateDt() {
		return _updateDt;
	}

	@Override
	public void setUpdateDt(Date updateDt) {
		_updateDt = updateDt;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			ScienceAppDescription.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public String[] getAvailableLanguageIds() {
		Set<String> availableLanguageIds = new TreeSet<String>();

		Map<Locale, String> contentMap = getContentMap();

		for (Map.Entry<Locale, String> entry : contentMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		return availableLanguageIds.toArray(new String[availableLanguageIds.size()]);
	}

	@Override
	public String getDefaultLanguageId() {
		String xml = getContent();

		if (xml == null) {
			return StringPool.BLANK;
		}

		Locale defaultLocale = LocaleUtil.getDefault();

		return LocalizationUtil.getDefaultLanguageId(xml, defaultLocale);
	}

	@Override
	public void prepareLocalizedFieldsForImport() throws LocaleException {
		prepareLocalizedFieldsForImport(null);
	}

	@Override
	@SuppressWarnings("unused")
	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException {
		Locale defaultLocale = LocaleUtil.getDefault();

		String modelDefaultLanguageId = getDefaultLanguageId();

		String content = getContent(defaultLocale);

		if (Validator.isNull(content)) {
			setContent(getContent(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setContent(getContent(defaultLocale), defaultLocale, defaultLocale);
		}
	}

	@Override
	public ScienceAppDescription toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ScienceAppDescription)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ScienceAppDescriptionImpl scienceAppDescriptionImpl = new ScienceAppDescriptionImpl();

		scienceAppDescriptionImpl.setDescriptionId(getDescriptionId());
		scienceAppDescriptionImpl.setContent(getContent());
		scienceAppDescriptionImpl.setInsertId(getInsertId());
		scienceAppDescriptionImpl.setInsertDt(getInsertDt());
		scienceAppDescriptionImpl.setUpdateId(getUpdateId());
		scienceAppDescriptionImpl.setUpdateDt(getUpdateDt());

		scienceAppDescriptionImpl.resetOriginalValues();

		return scienceAppDescriptionImpl;
	}

	@Override
	public int compareTo(ScienceAppDescription scienceAppDescription) {
		int value = 0;

		value = DateUtil.compareTo(getInsertDt(),
				scienceAppDescription.getInsertDt());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ScienceAppDescription)) {
			return false;
		}

		ScienceAppDescription scienceAppDescription = (ScienceAppDescription)obj;

		long primaryKey = scienceAppDescription.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<ScienceAppDescription> toCacheModel() {
		ScienceAppDescriptionCacheModel scienceAppDescriptionCacheModel = new ScienceAppDescriptionCacheModel();

		scienceAppDescriptionCacheModel.descriptionId = getDescriptionId();

		scienceAppDescriptionCacheModel.content = getContent();

		String content = scienceAppDescriptionCacheModel.content;

		if ((content != null) && (content.length() == 0)) {
			scienceAppDescriptionCacheModel.content = null;
		}

		scienceAppDescriptionCacheModel.insertId = getInsertId();

		Date insertDt = getInsertDt();

		if (insertDt != null) {
			scienceAppDescriptionCacheModel.insertDt = insertDt.getTime();
		}
		else {
			scienceAppDescriptionCacheModel.insertDt = Long.MIN_VALUE;
		}

		scienceAppDescriptionCacheModel.updateId = getUpdateId();

		Date updateDt = getUpdateDt();

		if (updateDt != null) {
			scienceAppDescriptionCacheModel.updateDt = updateDt.getTime();
		}
		else {
			scienceAppDescriptionCacheModel.updateDt = Long.MIN_VALUE;
		}

		return scienceAppDescriptionCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(13);

		sb.append("{descriptionId=");
		sb.append(getDescriptionId());
		sb.append(", content=");
		sb.append(getContent());
		sb.append(", insertId=");
		sb.append(getInsertId());
		sb.append(", insertDt=");
		sb.append(getInsertDt());
		sb.append(", updateId=");
		sb.append(getUpdateId());
		sb.append(", updateDt=");
		sb.append(getUpdateDt());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(22);

		sb.append("<model><model-name>");
		sb.append("org.kisti.edison.science.model.ScienceAppDescription");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>descriptionId</column-name><column-value><![CDATA[");
		sb.append(getDescriptionId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>content</column-name><column-value><![CDATA[");
		sb.append(getContent());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>insertId</column-name><column-value><![CDATA[");
		sb.append(getInsertId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>insertDt</column-name><column-value><![CDATA[");
		sb.append(getInsertDt());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>updateId</column-name><column-value><![CDATA[");
		sb.append(getUpdateId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>updateDt</column-name><column-value><![CDATA[");
		sb.append(getUpdateDt());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = ScienceAppDescription.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			ScienceAppDescription.class
		};
	private long _descriptionId;
	private String _content;
	private String _contentCurrentLanguageId;
	private long _insertId;
	private Date _insertDt;
	private long _updateId;
	private Date _updateDt;
	private ScienceAppDescription _escapedModel;
}
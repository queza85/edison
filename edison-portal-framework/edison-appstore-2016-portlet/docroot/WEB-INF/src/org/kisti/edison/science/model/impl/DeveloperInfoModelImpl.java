/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.kisti.edison.science.model.impl;

import com.liferay.portal.LocaleException;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.LocaleUtil;
import com.liferay.portal.kernel.util.LocalizationUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.kernel.util.Validator;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.util.PortalUtil;

import org.kisti.edison.science.model.DeveloperInfo;
import org.kisti.edison.science.model.DeveloperInfoModel;
import org.kisti.edison.science.model.DeveloperInfoSoap;
import org.kisti.edison.science.service.persistence.DeveloperInfoPK;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;

/**
 * The base model implementation for the DeveloperInfo service. Represents a row in the &quot;EDAPP_DeveloperInfo&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link org.kisti.edison.science.model.DeveloperInfoModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DeveloperInfoImpl}.
 * </p>
 *
 * @author EDISON
 * @see DeveloperInfoImpl
 * @see org.kisti.edison.science.model.DeveloperInfo
 * @see org.kisti.edison.science.model.DeveloperInfoModel
 * @generated
 */
@JSON(strict = true)
public class DeveloperInfoModelImpl extends BaseModelImpl<DeveloperInfo>
	implements DeveloperInfoModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a developer info model instance should use the {@link org.kisti.edison.science.model.DeveloperInfo} interface instead.
	 */
	public static final String TABLE_NAME = "EDAPP_DeveloperInfo";
	public static final Object[][] TABLE_COLUMNS = {
			{ "userId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "screenName", Types.VARCHAR },
			{ "firstName", Types.VARCHAR },
			{ "emailAddress", Types.VARCHAR },
			{ "universityField", Types.VARCHAR },
			{ "majorField", Types.VARCHAR },
			{ "useStart", Types.VARCHAR },
			{ "useEnd", Types.VARCHAR },
			{ "developerSort", Types.VARCHAR },
			{ "languageFortran", Types.BOOLEAN },
			{ "languageCpp", Types.BOOLEAN },
			{ "languagePython", Types.BOOLEAN },
			{ "languageJava", Types.BOOLEAN },
			{ "languageOther", Types.BOOLEAN },
			{ "languageOtherDescription", Types.VARCHAR },
			{ "rem", Types.VARCHAR },
			{ "agreementYn", Types.BOOLEAN },
			{ "writtenOathLogical", Types.VARCHAR },
			{ "writtenOathPhysical", Types.VARCHAR },
			{ "detailIp", Types.VARCHAR },
			{ "detailOs", Types.VARCHAR },
			{ "detailCpu", Types.VARCHAR },
			{ "detailStorate", Types.VARCHAR },
			{ "detailLibrary", Types.VARCHAR },
			{ "insertId", Types.BIGINT },
			{ "insertDate", Types.TIMESTAMP },
			{ "updateId", Types.BIGINT },
			{ "updateDate", Types.TIMESTAMP },
			{ "etc", Types.VARCHAR },
			{ "developerId", Types.VARCHAR },
			{ "developerPassword", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table EDAPP_DeveloperInfo (userId LONG not null,groupId LONG not null,screenName VARCHAR(75) null,firstName VARCHAR(75) null,emailAddress VARCHAR(75) null,universityField VARCHAR(75) null,majorField VARCHAR(75) null,useStart VARCHAR(75) null,useEnd VARCHAR(75) null,developerSort VARCHAR(75) null,languageFortran BOOLEAN,languageCpp BOOLEAN,languagePython BOOLEAN,languageJava BOOLEAN,languageOther BOOLEAN,languageOtherDescription VARCHAR(75) null,rem STRING null,agreementYn BOOLEAN,writtenOathLogical VARCHAR(75) null,writtenOathPhysical VARCHAR(75) null,detailIp VARCHAR(75) null,detailOs VARCHAR(75) null,detailCpu VARCHAR(75) null,detailStorate VARCHAR(75) null,detailLibrary VARCHAR(75) null,insertId LONG,insertDate DATE null,updateId LONG,updateDate DATE null,etc STRING null,developerId VARCHAR(75) null,developerPassword VARCHAR(75) null,primary key (userId, groupId))";
	public static final String TABLE_SQL_DROP = "drop table EDAPP_DeveloperInfo";
	public static final String ORDER_BY_JPQL = " ORDER BY developerInfo.id.userId ASC, developerInfo.id.groupId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY EDAPP_DeveloperInfo.userId ASC, EDAPP_DeveloperInfo.groupId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.org.kisti.edison.science.model.DeveloperInfo"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.org.kisti.edison.science.model.DeveloperInfo"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.org.kisti.edison.science.model.DeveloperInfo"),
			true);
	public static long USERID_COLUMN_BITMASK = 1L;
	public static long GROUPID_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static DeveloperInfo toModel(DeveloperInfoSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		DeveloperInfo model = new DeveloperInfoImpl();

		model.setUserId(soapModel.getUserId());
		model.setGroupId(soapModel.getGroupId());
		model.setScreenName(soapModel.getScreenName());
		model.setFirstName(soapModel.getFirstName());
		model.setEmailAddress(soapModel.getEmailAddress());
		model.setUniversityField(soapModel.getUniversityField());
		model.setMajorField(soapModel.getMajorField());
		model.setUseStart(soapModel.getUseStart());
		model.setUseEnd(soapModel.getUseEnd());
		model.setDeveloperSort(soapModel.getDeveloperSort());
		model.setLanguageFortran(soapModel.getLanguageFortran());
		model.setLanguageCpp(soapModel.getLanguageCpp());
		model.setLanguagePython(soapModel.getLanguagePython());
		model.setLanguageJava(soapModel.getLanguageJava());
		model.setLanguageOther(soapModel.getLanguageOther());
		model.setLanguageOtherDescription(soapModel.getLanguageOtherDescription());
		model.setRem(soapModel.getRem());
		model.setAgreementYn(soapModel.getAgreementYn());
		model.setWrittenOathLogical(soapModel.getWrittenOathLogical());
		model.setWrittenOathPhysical(soapModel.getWrittenOathPhysical());
		model.setDetailIp(soapModel.getDetailIp());
		model.setDetailOs(soapModel.getDetailOs());
		model.setDetailCpu(soapModel.getDetailCpu());
		model.setDetailStorate(soapModel.getDetailStorate());
		model.setDetailLibrary(soapModel.getDetailLibrary());
		model.setInsertId(soapModel.getInsertId());
		model.setInsertDate(soapModel.getInsertDate());
		model.setUpdateId(soapModel.getUpdateId());
		model.setUpdateDate(soapModel.getUpdateDate());
		model.setEtc(soapModel.getEtc());
		model.setDeveloperId(soapModel.getDeveloperId());
		model.setDeveloperPassword(soapModel.getDeveloperPassword());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<DeveloperInfo> toModels(DeveloperInfoSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<DeveloperInfo> models = new ArrayList<DeveloperInfo>(soapModels.length);

		for (DeveloperInfoSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.org.kisti.edison.science.model.DeveloperInfo"));

	public DeveloperInfoModelImpl() {
	}

	@Override
	public DeveloperInfoPK getPrimaryKey() {
		return new DeveloperInfoPK(_userId, _groupId);
	}

	@Override
	public void setPrimaryKey(DeveloperInfoPK primaryKey) {
		setUserId(primaryKey.userId);
		setGroupId(primaryKey.groupId);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return new DeveloperInfoPK(_userId, _groupId);
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((DeveloperInfoPK)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return DeveloperInfo.class;
	}

	@Override
	public String getModelClassName() {
		return DeveloperInfo.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("userId", getUserId());
		attributes.put("groupId", getGroupId());
		attributes.put("screenName", getScreenName());
		attributes.put("firstName", getFirstName());
		attributes.put("emailAddress", getEmailAddress());
		attributes.put("universityField", getUniversityField());
		attributes.put("majorField", getMajorField());
		attributes.put("useStart", getUseStart());
		attributes.put("useEnd", getUseEnd());
		attributes.put("developerSort", getDeveloperSort());
		attributes.put("languageFortran", getLanguageFortran());
		attributes.put("languageCpp", getLanguageCpp());
		attributes.put("languagePython", getLanguagePython());
		attributes.put("languageJava", getLanguageJava());
		attributes.put("languageOther", getLanguageOther());
		attributes.put("languageOtherDescription", getLanguageOtherDescription());
		attributes.put("rem", getRem());
		attributes.put("agreementYn", getAgreementYn());
		attributes.put("writtenOathLogical", getWrittenOathLogical());
		attributes.put("writtenOathPhysical", getWrittenOathPhysical());
		attributes.put("detailIp", getDetailIp());
		attributes.put("detailOs", getDetailOs());
		attributes.put("detailCpu", getDetailCpu());
		attributes.put("detailStorate", getDetailStorate());
		attributes.put("detailLibrary", getDetailLibrary());
		attributes.put("insertId", getInsertId());
		attributes.put("insertDate", getInsertDate());
		attributes.put("updateId", getUpdateId());
		attributes.put("updateDate", getUpdateDate());
		attributes.put("etc", getEtc());
		attributes.put("developerId", getDeveloperId());
		attributes.put("developerPassword", getDeveloperPassword());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		String screenName = (String)attributes.get("screenName");

		if (screenName != null) {
			setScreenName(screenName);
		}

		String firstName = (String)attributes.get("firstName");

		if (firstName != null) {
			setFirstName(firstName);
		}

		String emailAddress = (String)attributes.get("emailAddress");

		if (emailAddress != null) {
			setEmailAddress(emailAddress);
		}

		String universityField = (String)attributes.get("universityField");

		if (universityField != null) {
			setUniversityField(universityField);
		}

		String majorField = (String)attributes.get("majorField");

		if (majorField != null) {
			setMajorField(majorField);
		}

		String useStart = (String)attributes.get("useStart");

		if (useStart != null) {
			setUseStart(useStart);
		}

		String useEnd = (String)attributes.get("useEnd");

		if (useEnd != null) {
			setUseEnd(useEnd);
		}

		String developerSort = (String)attributes.get("developerSort");

		if (developerSort != null) {
			setDeveloperSort(developerSort);
		}

		Boolean languageFortran = (Boolean)attributes.get("languageFortran");

		if (languageFortran != null) {
			setLanguageFortran(languageFortran);
		}

		Boolean languageCpp = (Boolean)attributes.get("languageCpp");

		if (languageCpp != null) {
			setLanguageCpp(languageCpp);
		}

		Boolean languagePython = (Boolean)attributes.get("languagePython");

		if (languagePython != null) {
			setLanguagePython(languagePython);
		}

		Boolean languageJava = (Boolean)attributes.get("languageJava");

		if (languageJava != null) {
			setLanguageJava(languageJava);
		}

		Boolean languageOther = (Boolean)attributes.get("languageOther");

		if (languageOther != null) {
			setLanguageOther(languageOther);
		}

		String languageOtherDescription = (String)attributes.get(
				"languageOtherDescription");

		if (languageOtherDescription != null) {
			setLanguageOtherDescription(languageOtherDescription);
		}

		String rem = (String)attributes.get("rem");

		if (rem != null) {
			setRem(rem);
		}

		Boolean agreementYn = (Boolean)attributes.get("agreementYn");

		if (agreementYn != null) {
			setAgreementYn(agreementYn);
		}

		String writtenOathLogical = (String)attributes.get("writtenOathLogical");

		if (writtenOathLogical != null) {
			setWrittenOathLogical(writtenOathLogical);
		}

		String writtenOathPhysical = (String)attributes.get(
				"writtenOathPhysical");

		if (writtenOathPhysical != null) {
			setWrittenOathPhysical(writtenOathPhysical);
		}

		String detailIp = (String)attributes.get("detailIp");

		if (detailIp != null) {
			setDetailIp(detailIp);
		}

		String detailOs = (String)attributes.get("detailOs");

		if (detailOs != null) {
			setDetailOs(detailOs);
		}

		String detailCpu = (String)attributes.get("detailCpu");

		if (detailCpu != null) {
			setDetailCpu(detailCpu);
		}

		String detailStorate = (String)attributes.get("detailStorate");

		if (detailStorate != null) {
			setDetailStorate(detailStorate);
		}

		String detailLibrary = (String)attributes.get("detailLibrary");

		if (detailLibrary != null) {
			setDetailLibrary(detailLibrary);
		}

		Long insertId = (Long)attributes.get("insertId");

		if (insertId != null) {
			setInsertId(insertId);
		}

		Date insertDate = (Date)attributes.get("insertDate");

		if (insertDate != null) {
			setInsertDate(insertDate);
		}

		Long updateId = (Long)attributes.get("updateId");

		if (updateId != null) {
			setUpdateId(updateId);
		}

		Date updateDate = (Date)attributes.get("updateDate");

		if (updateDate != null) {
			setUpdateDate(updateDate);
		}

		String etc = (String)attributes.get("etc");

		if (etc != null) {
			setEtc(etc);
		}

		String developerId = (String)attributes.get("developerId");

		if (developerId != null) {
			setDeveloperId(developerId);
		}

		String developerPassword = (String)attributes.get("developerPassword");

		if (developerPassword != null) {
			setDeveloperPassword(developerPassword);
		}
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@JSON
	@Override
	public String getScreenName() {
		if (_screenName == null) {
			return StringPool.BLANK;
		}
		else {
			return _screenName;
		}
	}

	@Override
	public void setScreenName(String screenName) {
		_screenName = screenName;
	}

	@JSON
	@Override
	public String getFirstName() {
		if (_firstName == null) {
			return StringPool.BLANK;
		}
		else {
			return _firstName;
		}
	}

	@Override
	public void setFirstName(String firstName) {
		_firstName = firstName;
	}

	@JSON
	@Override
	public String getEmailAddress() {
		if (_emailAddress == null) {
			return StringPool.BLANK;
		}
		else {
			return _emailAddress;
		}
	}

	@Override
	public void setEmailAddress(String emailAddress) {
		_emailAddress = emailAddress;
	}

	@JSON
	@Override
	public String getUniversityField() {
		if (_universityField == null) {
			return StringPool.BLANK;
		}
		else {
			return _universityField;
		}
	}

	@Override
	public void setUniversityField(String universityField) {
		_universityField = universityField;
	}

	@JSON
	@Override
	public String getMajorField() {
		if (_majorField == null) {
			return StringPool.BLANK;
		}
		else {
			return _majorField;
		}
	}

	@Override
	public void setMajorField(String majorField) {
		_majorField = majorField;
	}

	@JSON
	@Override
	public String getUseStart() {
		if (_useStart == null) {
			return StringPool.BLANK;
		}
		else {
			return _useStart;
		}
	}

	@Override
	public void setUseStart(String useStart) {
		_useStart = useStart;
	}

	@JSON
	@Override
	public String getUseEnd() {
		if (_useEnd == null) {
			return StringPool.BLANK;
		}
		else {
			return _useEnd;
		}
	}

	@Override
	public void setUseEnd(String useEnd) {
		_useEnd = useEnd;
	}

	@JSON
	@Override
	public String getDeveloperSort() {
		if (_developerSort == null) {
			return StringPool.BLANK;
		}
		else {
			return _developerSort;
		}
	}

	@Override
	public void setDeveloperSort(String developerSort) {
		_developerSort = developerSort;
	}

	@JSON
	@Override
	public boolean getLanguageFortran() {
		return _languageFortran;
	}

	@Override
	public boolean isLanguageFortran() {
		return _languageFortran;
	}

	@Override
	public void setLanguageFortran(boolean languageFortran) {
		_languageFortran = languageFortran;
	}

	@JSON
	@Override
	public boolean getLanguageCpp() {
		return _languageCpp;
	}

	@Override
	public boolean isLanguageCpp() {
		return _languageCpp;
	}

	@Override
	public void setLanguageCpp(boolean languageCpp) {
		_languageCpp = languageCpp;
	}

	@JSON
	@Override
	public boolean getLanguagePython() {
		return _languagePython;
	}

	@Override
	public boolean isLanguagePython() {
		return _languagePython;
	}

	@Override
	public void setLanguagePython(boolean languagePython) {
		_languagePython = languagePython;
	}

	@JSON
	@Override
	public boolean getLanguageJava() {
		return _languageJava;
	}

	@Override
	public boolean isLanguageJava() {
		return _languageJava;
	}

	@Override
	public void setLanguageJava(boolean languageJava) {
		_languageJava = languageJava;
	}

	@JSON
	@Override
	public boolean getLanguageOther() {
		return _languageOther;
	}

	@Override
	public boolean isLanguageOther() {
		return _languageOther;
	}

	@Override
	public void setLanguageOther(boolean languageOther) {
		_languageOther = languageOther;
	}

	@JSON
	@Override
	public String getLanguageOtherDescription() {
		if (_languageOtherDescription == null) {
			return StringPool.BLANK;
		}
		else {
			return _languageOtherDescription;
		}
	}

	@Override
	public void setLanguageOtherDescription(String languageOtherDescription) {
		_languageOtherDescription = languageOtherDescription;
	}

	@JSON
	@Override
	public String getRem() {
		if (_rem == null) {
			return StringPool.BLANK;
		}
		else {
			return _rem;
		}
	}

	@Override
	public String getRem(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getRem(languageId);
	}

	@Override
	public String getRem(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getRem(languageId, useDefault);
	}

	@Override
	public String getRem(String languageId) {
		return LocalizationUtil.getLocalization(getRem(), languageId);
	}

	@Override
	public String getRem(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(getRem(), languageId, useDefault);
	}

	@Override
	public String getRemCurrentLanguageId() {
		return _remCurrentLanguageId;
	}

	@JSON
	@Override
	public String getRemCurrentValue() {
		Locale locale = getLocale(_remCurrentLanguageId);

		return getRem(locale);
	}

	@Override
	public Map<Locale, String> getRemMap() {
		return LocalizationUtil.getLocalizationMap(getRem());
	}

	@Override
	public void setRem(String rem) {
		_rem = rem;
	}

	@Override
	public void setRem(String rem, Locale locale) {
		setRem(rem, locale, LocaleUtil.getDefault());
	}

	@Override
	public void setRem(String rem, Locale locale, Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(rem)) {
			setRem(LocalizationUtil.updateLocalization(getRem(), "Rem", rem,
					languageId, defaultLanguageId));
		}
		else {
			setRem(LocalizationUtil.removeLocalization(getRem(), "Rem",
					languageId));
		}
	}

	@Override
	public void setRemCurrentLanguageId(String languageId) {
		_remCurrentLanguageId = languageId;
	}

	@Override
	public void setRemMap(Map<Locale, String> remMap) {
		setRemMap(remMap, LocaleUtil.getDefault());
	}

	@Override
	public void setRemMap(Map<Locale, String> remMap, Locale defaultLocale) {
		if (remMap == null) {
			return;
		}

		setRem(LocalizationUtil.updateLocalization(remMap, getRem(), "Rem",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public boolean getAgreementYn() {
		return _agreementYn;
	}

	@Override
	public boolean isAgreementYn() {
		return _agreementYn;
	}

	@Override
	public void setAgreementYn(boolean agreementYn) {
		_agreementYn = agreementYn;
	}

	@JSON
	@Override
	public String getWrittenOathLogical() {
		if (_writtenOathLogical == null) {
			return StringPool.BLANK;
		}
		else {
			return _writtenOathLogical;
		}
	}

	@Override
	public void setWrittenOathLogical(String writtenOathLogical) {
		_writtenOathLogical = writtenOathLogical;
	}

	@JSON
	@Override
	public String getWrittenOathPhysical() {
		if (_writtenOathPhysical == null) {
			return StringPool.BLANK;
		}
		else {
			return _writtenOathPhysical;
		}
	}

	@Override
	public void setWrittenOathPhysical(String writtenOathPhysical) {
		_writtenOathPhysical = writtenOathPhysical;
	}

	@JSON
	@Override
	public String getDetailIp() {
		if (_detailIp == null) {
			return StringPool.BLANK;
		}
		else {
			return _detailIp;
		}
	}

	@Override
	public void setDetailIp(String detailIp) {
		_detailIp = detailIp;
	}

	@JSON
	@Override
	public String getDetailOs() {
		if (_detailOs == null) {
			return StringPool.BLANK;
		}
		else {
			return _detailOs;
		}
	}

	@Override
	public void setDetailOs(String detailOs) {
		_detailOs = detailOs;
	}

	@JSON
	@Override
	public String getDetailCpu() {
		if (_detailCpu == null) {
			return StringPool.BLANK;
		}
		else {
			return _detailCpu;
		}
	}

	@Override
	public void setDetailCpu(String detailCpu) {
		_detailCpu = detailCpu;
	}

	@JSON
	@Override
	public String getDetailStorate() {
		if (_detailStorate == null) {
			return StringPool.BLANK;
		}
		else {
			return _detailStorate;
		}
	}

	@Override
	public void setDetailStorate(String detailStorate) {
		_detailStorate = detailStorate;
	}

	@JSON
	@Override
	public String getDetailLibrary() {
		if (_detailLibrary == null) {
			return StringPool.BLANK;
		}
		else {
			return _detailLibrary;
		}
	}

	@Override
	public void setDetailLibrary(String detailLibrary) {
		_detailLibrary = detailLibrary;
	}

	@JSON
	@Override
	public long getInsertId() {
		return _insertId;
	}

	@Override
	public void setInsertId(long insertId) {
		_insertId = insertId;
	}

	@JSON
	@Override
	public Date getInsertDate() {
		return _insertDate;
	}

	@Override
	public void setInsertDate(Date insertDate) {
		_insertDate = insertDate;
	}

	@JSON
	@Override
	public long getUpdateId() {
		return _updateId;
	}

	@Override
	public void setUpdateId(long updateId) {
		_updateId = updateId;
	}

	@JSON
	@Override
	public Date getUpdateDate() {
		return _updateDate;
	}

	@Override
	public void setUpdateDate(Date updateDate) {
		_updateDate = updateDate;
	}

	@JSON
	@Override
	public String getEtc() {
		if (_etc == null) {
			return StringPool.BLANK;
		}
		else {
			return _etc;
		}
	}

	@Override
	public String getEtc(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getEtc(languageId);
	}

	@Override
	public String getEtc(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getEtc(languageId, useDefault);
	}

	@Override
	public String getEtc(String languageId) {
		return LocalizationUtil.getLocalization(getEtc(), languageId);
	}

	@Override
	public String getEtc(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(getEtc(), languageId, useDefault);
	}

	@Override
	public String getEtcCurrentLanguageId() {
		return _etcCurrentLanguageId;
	}

	@JSON
	@Override
	public String getEtcCurrentValue() {
		Locale locale = getLocale(_etcCurrentLanguageId);

		return getEtc(locale);
	}

	@Override
	public Map<Locale, String> getEtcMap() {
		return LocalizationUtil.getLocalizationMap(getEtc());
	}

	@Override
	public void setEtc(String etc) {
		_etc = etc;
	}

	@Override
	public void setEtc(String etc, Locale locale) {
		setEtc(etc, locale, LocaleUtil.getDefault());
	}

	@Override
	public void setEtc(String etc, Locale locale, Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(etc)) {
			setEtc(LocalizationUtil.updateLocalization(getEtc(), "Etc", etc,
					languageId, defaultLanguageId));
		}
		else {
			setEtc(LocalizationUtil.removeLocalization(getEtc(), "Etc",
					languageId));
		}
	}

	@Override
	public void setEtcCurrentLanguageId(String languageId) {
		_etcCurrentLanguageId = languageId;
	}

	@Override
	public void setEtcMap(Map<Locale, String> etcMap) {
		setEtcMap(etcMap, LocaleUtil.getDefault());
	}

	@Override
	public void setEtcMap(Map<Locale, String> etcMap, Locale defaultLocale) {
		if (etcMap == null) {
			return;
		}

		setEtc(LocalizationUtil.updateLocalization(etcMap, getEtc(), "Etc",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getDeveloperId() {
		if (_developerId == null) {
			return StringPool.BLANK;
		}
		else {
			return _developerId;
		}
	}

	@Override
	public void setDeveloperId(String developerId) {
		_developerId = developerId;
	}

	@JSON
	@Override
	public String getDeveloperPassword() {
		if (_developerPassword == null) {
			return StringPool.BLANK;
		}
		else {
			return _developerPassword;
		}
	}

	@Override
	public void setDeveloperPassword(String developerPassword) {
		_developerPassword = developerPassword;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public String[] getAvailableLanguageIds() {
		Set<String> availableLanguageIds = new TreeSet<String>();

		Map<Locale, String> remMap = getRemMap();

		for (Map.Entry<Locale, String> entry : remMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> etcMap = getEtcMap();

		for (Map.Entry<Locale, String> entry : etcMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		return availableLanguageIds.toArray(new String[availableLanguageIds.size()]);
	}

	@Override
	public String getDefaultLanguageId() {
		String xml = getRem();

		if (xml == null) {
			return StringPool.BLANK;
		}

		Locale defaultLocale = LocaleUtil.getDefault();

		return LocalizationUtil.getDefaultLanguageId(xml, defaultLocale);
	}

	@Override
	public void prepareLocalizedFieldsForImport() throws LocaleException {
		prepareLocalizedFieldsForImport(null);
	}

	@Override
	@SuppressWarnings("unused")
	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException {
		Locale defaultLocale = LocaleUtil.getDefault();

		String modelDefaultLanguageId = getDefaultLanguageId();

		String rem = getRem(defaultLocale);

		if (Validator.isNull(rem)) {
			setRem(getRem(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setRem(getRem(defaultLocale), defaultLocale, defaultLocale);
		}

		String etc = getEtc(defaultLocale);

		if (Validator.isNull(etc)) {
			setEtc(getEtc(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setEtc(getEtc(defaultLocale), defaultLocale, defaultLocale);
		}
	}

	@Override
	public DeveloperInfo toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (DeveloperInfo)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		DeveloperInfoImpl developerInfoImpl = new DeveloperInfoImpl();

		developerInfoImpl.setUserId(getUserId());
		developerInfoImpl.setGroupId(getGroupId());
		developerInfoImpl.setScreenName(getScreenName());
		developerInfoImpl.setFirstName(getFirstName());
		developerInfoImpl.setEmailAddress(getEmailAddress());
		developerInfoImpl.setUniversityField(getUniversityField());
		developerInfoImpl.setMajorField(getMajorField());
		developerInfoImpl.setUseStart(getUseStart());
		developerInfoImpl.setUseEnd(getUseEnd());
		developerInfoImpl.setDeveloperSort(getDeveloperSort());
		developerInfoImpl.setLanguageFortran(getLanguageFortran());
		developerInfoImpl.setLanguageCpp(getLanguageCpp());
		developerInfoImpl.setLanguagePython(getLanguagePython());
		developerInfoImpl.setLanguageJava(getLanguageJava());
		developerInfoImpl.setLanguageOther(getLanguageOther());
		developerInfoImpl.setLanguageOtherDescription(getLanguageOtherDescription());
		developerInfoImpl.setRem(getRem());
		developerInfoImpl.setAgreementYn(getAgreementYn());
		developerInfoImpl.setWrittenOathLogical(getWrittenOathLogical());
		developerInfoImpl.setWrittenOathPhysical(getWrittenOathPhysical());
		developerInfoImpl.setDetailIp(getDetailIp());
		developerInfoImpl.setDetailOs(getDetailOs());
		developerInfoImpl.setDetailCpu(getDetailCpu());
		developerInfoImpl.setDetailStorate(getDetailStorate());
		developerInfoImpl.setDetailLibrary(getDetailLibrary());
		developerInfoImpl.setInsertId(getInsertId());
		developerInfoImpl.setInsertDate(getInsertDate());
		developerInfoImpl.setUpdateId(getUpdateId());
		developerInfoImpl.setUpdateDate(getUpdateDate());
		developerInfoImpl.setEtc(getEtc());
		developerInfoImpl.setDeveloperId(getDeveloperId());
		developerInfoImpl.setDeveloperPassword(getDeveloperPassword());

		developerInfoImpl.resetOriginalValues();

		return developerInfoImpl;
	}

	@Override
	public int compareTo(DeveloperInfo developerInfo) {
		DeveloperInfoPK primaryKey = developerInfo.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof DeveloperInfo)) {
			return false;
		}

		DeveloperInfo developerInfo = (DeveloperInfo)obj;

		DeveloperInfoPK primaryKey = developerInfo.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public void resetOriginalValues() {
		DeveloperInfoModelImpl developerInfoModelImpl = this;

		developerInfoModelImpl._originalUserId = developerInfoModelImpl._userId;

		developerInfoModelImpl._setOriginalUserId = false;

		developerInfoModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<DeveloperInfo> toCacheModel() {
		DeveloperInfoCacheModel developerInfoCacheModel = new DeveloperInfoCacheModel();

		developerInfoCacheModel.userId = getUserId();

		developerInfoCacheModel.groupId = getGroupId();

		developerInfoCacheModel.screenName = getScreenName();

		String screenName = developerInfoCacheModel.screenName;

		if ((screenName != null) && (screenName.length() == 0)) {
			developerInfoCacheModel.screenName = null;
		}

		developerInfoCacheModel.firstName = getFirstName();

		String firstName = developerInfoCacheModel.firstName;

		if ((firstName != null) && (firstName.length() == 0)) {
			developerInfoCacheModel.firstName = null;
		}

		developerInfoCacheModel.emailAddress = getEmailAddress();

		String emailAddress = developerInfoCacheModel.emailAddress;

		if ((emailAddress != null) && (emailAddress.length() == 0)) {
			developerInfoCacheModel.emailAddress = null;
		}

		developerInfoCacheModel.universityField = getUniversityField();

		String universityField = developerInfoCacheModel.universityField;

		if ((universityField != null) && (universityField.length() == 0)) {
			developerInfoCacheModel.universityField = null;
		}

		developerInfoCacheModel.majorField = getMajorField();

		String majorField = developerInfoCacheModel.majorField;

		if ((majorField != null) && (majorField.length() == 0)) {
			developerInfoCacheModel.majorField = null;
		}

		developerInfoCacheModel.useStart = getUseStart();

		String useStart = developerInfoCacheModel.useStart;

		if ((useStart != null) && (useStart.length() == 0)) {
			developerInfoCacheModel.useStart = null;
		}

		developerInfoCacheModel.useEnd = getUseEnd();

		String useEnd = developerInfoCacheModel.useEnd;

		if ((useEnd != null) && (useEnd.length() == 0)) {
			developerInfoCacheModel.useEnd = null;
		}

		developerInfoCacheModel.developerSort = getDeveloperSort();

		String developerSort = developerInfoCacheModel.developerSort;

		if ((developerSort != null) && (developerSort.length() == 0)) {
			developerInfoCacheModel.developerSort = null;
		}

		developerInfoCacheModel.languageFortran = getLanguageFortran();

		developerInfoCacheModel.languageCpp = getLanguageCpp();

		developerInfoCacheModel.languagePython = getLanguagePython();

		developerInfoCacheModel.languageJava = getLanguageJava();

		developerInfoCacheModel.languageOther = getLanguageOther();

		developerInfoCacheModel.languageOtherDescription = getLanguageOtherDescription();

		String languageOtherDescription = developerInfoCacheModel.languageOtherDescription;

		if ((languageOtherDescription != null) &&
				(languageOtherDescription.length() == 0)) {
			developerInfoCacheModel.languageOtherDescription = null;
		}

		developerInfoCacheModel.rem = getRem();

		String rem = developerInfoCacheModel.rem;

		if ((rem != null) && (rem.length() == 0)) {
			developerInfoCacheModel.rem = null;
		}

		developerInfoCacheModel.agreementYn = getAgreementYn();

		developerInfoCacheModel.writtenOathLogical = getWrittenOathLogical();

		String writtenOathLogical = developerInfoCacheModel.writtenOathLogical;

		if ((writtenOathLogical != null) && (writtenOathLogical.length() == 0)) {
			developerInfoCacheModel.writtenOathLogical = null;
		}

		developerInfoCacheModel.writtenOathPhysical = getWrittenOathPhysical();

		String writtenOathPhysical = developerInfoCacheModel.writtenOathPhysical;

		if ((writtenOathPhysical != null) &&
				(writtenOathPhysical.length() == 0)) {
			developerInfoCacheModel.writtenOathPhysical = null;
		}

		developerInfoCacheModel.detailIp = getDetailIp();

		String detailIp = developerInfoCacheModel.detailIp;

		if ((detailIp != null) && (detailIp.length() == 0)) {
			developerInfoCacheModel.detailIp = null;
		}

		developerInfoCacheModel.detailOs = getDetailOs();

		String detailOs = developerInfoCacheModel.detailOs;

		if ((detailOs != null) && (detailOs.length() == 0)) {
			developerInfoCacheModel.detailOs = null;
		}

		developerInfoCacheModel.detailCpu = getDetailCpu();

		String detailCpu = developerInfoCacheModel.detailCpu;

		if ((detailCpu != null) && (detailCpu.length() == 0)) {
			developerInfoCacheModel.detailCpu = null;
		}

		developerInfoCacheModel.detailStorate = getDetailStorate();

		String detailStorate = developerInfoCacheModel.detailStorate;

		if ((detailStorate != null) && (detailStorate.length() == 0)) {
			developerInfoCacheModel.detailStorate = null;
		}

		developerInfoCacheModel.detailLibrary = getDetailLibrary();

		String detailLibrary = developerInfoCacheModel.detailLibrary;

		if ((detailLibrary != null) && (detailLibrary.length() == 0)) {
			developerInfoCacheModel.detailLibrary = null;
		}

		developerInfoCacheModel.insertId = getInsertId();

		Date insertDate = getInsertDate();

		if (insertDate != null) {
			developerInfoCacheModel.insertDate = insertDate.getTime();
		}
		else {
			developerInfoCacheModel.insertDate = Long.MIN_VALUE;
		}

		developerInfoCacheModel.updateId = getUpdateId();

		Date updateDate = getUpdateDate();

		if (updateDate != null) {
			developerInfoCacheModel.updateDate = updateDate.getTime();
		}
		else {
			developerInfoCacheModel.updateDate = Long.MIN_VALUE;
		}

		developerInfoCacheModel.etc = getEtc();

		String etc = developerInfoCacheModel.etc;

		if ((etc != null) && (etc.length() == 0)) {
			developerInfoCacheModel.etc = null;
		}

		developerInfoCacheModel.developerId = getDeveloperId();

		String developerId = developerInfoCacheModel.developerId;

		if ((developerId != null) && (developerId.length() == 0)) {
			developerInfoCacheModel.developerId = null;
		}

		developerInfoCacheModel.developerPassword = getDeveloperPassword();

		String developerPassword = developerInfoCacheModel.developerPassword;

		if ((developerPassword != null) && (developerPassword.length() == 0)) {
			developerInfoCacheModel.developerPassword = null;
		}

		return developerInfoCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(65);

		sb.append("{userId=");
		sb.append(getUserId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", screenName=");
		sb.append(getScreenName());
		sb.append(", firstName=");
		sb.append(getFirstName());
		sb.append(", emailAddress=");
		sb.append(getEmailAddress());
		sb.append(", universityField=");
		sb.append(getUniversityField());
		sb.append(", majorField=");
		sb.append(getMajorField());
		sb.append(", useStart=");
		sb.append(getUseStart());
		sb.append(", useEnd=");
		sb.append(getUseEnd());
		sb.append(", developerSort=");
		sb.append(getDeveloperSort());
		sb.append(", languageFortran=");
		sb.append(getLanguageFortran());
		sb.append(", languageCpp=");
		sb.append(getLanguageCpp());
		sb.append(", languagePython=");
		sb.append(getLanguagePython());
		sb.append(", languageJava=");
		sb.append(getLanguageJava());
		sb.append(", languageOther=");
		sb.append(getLanguageOther());
		sb.append(", languageOtherDescription=");
		sb.append(getLanguageOtherDescription());
		sb.append(", rem=");
		sb.append(getRem());
		sb.append(", agreementYn=");
		sb.append(getAgreementYn());
		sb.append(", writtenOathLogical=");
		sb.append(getWrittenOathLogical());
		sb.append(", writtenOathPhysical=");
		sb.append(getWrittenOathPhysical());
		sb.append(", detailIp=");
		sb.append(getDetailIp());
		sb.append(", detailOs=");
		sb.append(getDetailOs());
		sb.append(", detailCpu=");
		sb.append(getDetailCpu());
		sb.append(", detailStorate=");
		sb.append(getDetailStorate());
		sb.append(", detailLibrary=");
		sb.append(getDetailLibrary());
		sb.append(", insertId=");
		sb.append(getInsertId());
		sb.append(", insertDate=");
		sb.append(getInsertDate());
		sb.append(", updateId=");
		sb.append(getUpdateId());
		sb.append(", updateDate=");
		sb.append(getUpdateDate());
		sb.append(", etc=");
		sb.append(getEtc());
		sb.append(", developerId=");
		sb.append(getDeveloperId());
		sb.append(", developerPassword=");
		sb.append(getDeveloperPassword());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(100);

		sb.append("<model><model-name>");
		sb.append("org.kisti.edison.science.model.DeveloperInfo");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>screenName</column-name><column-value><![CDATA[");
		sb.append(getScreenName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>firstName</column-name><column-value><![CDATA[");
		sb.append(getFirstName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>emailAddress</column-name><column-value><![CDATA[");
		sb.append(getEmailAddress());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>universityField</column-name><column-value><![CDATA[");
		sb.append(getUniversityField());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>majorField</column-name><column-value><![CDATA[");
		sb.append(getMajorField());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>useStart</column-name><column-value><![CDATA[");
		sb.append(getUseStart());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>useEnd</column-name><column-value><![CDATA[");
		sb.append(getUseEnd());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>developerSort</column-name><column-value><![CDATA[");
		sb.append(getDeveloperSort());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>languageFortran</column-name><column-value><![CDATA[");
		sb.append(getLanguageFortran());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>languageCpp</column-name><column-value><![CDATA[");
		sb.append(getLanguageCpp());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>languagePython</column-name><column-value><![CDATA[");
		sb.append(getLanguagePython());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>languageJava</column-name><column-value><![CDATA[");
		sb.append(getLanguageJava());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>languageOther</column-name><column-value><![CDATA[");
		sb.append(getLanguageOther());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>languageOtherDescription</column-name><column-value><![CDATA[");
		sb.append(getLanguageOtherDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>rem</column-name><column-value><![CDATA[");
		sb.append(getRem());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>agreementYn</column-name><column-value><![CDATA[");
		sb.append(getAgreementYn());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>writtenOathLogical</column-name><column-value><![CDATA[");
		sb.append(getWrittenOathLogical());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>writtenOathPhysical</column-name><column-value><![CDATA[");
		sb.append(getWrittenOathPhysical());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>detailIp</column-name><column-value><![CDATA[");
		sb.append(getDetailIp());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>detailOs</column-name><column-value><![CDATA[");
		sb.append(getDetailOs());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>detailCpu</column-name><column-value><![CDATA[");
		sb.append(getDetailCpu());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>detailStorate</column-name><column-value><![CDATA[");
		sb.append(getDetailStorate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>detailLibrary</column-name><column-value><![CDATA[");
		sb.append(getDetailLibrary());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>insertId</column-name><column-value><![CDATA[");
		sb.append(getInsertId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>insertDate</column-name><column-value><![CDATA[");
		sb.append(getInsertDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>updateId</column-name><column-value><![CDATA[");
		sb.append(getUpdateId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>updateDate</column-name><column-value><![CDATA[");
		sb.append(getUpdateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>etc</column-name><column-value><![CDATA[");
		sb.append(getEtc());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>developerId</column-name><column-value><![CDATA[");
		sb.append(getDeveloperId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>developerPassword</column-name><column-value><![CDATA[");
		sb.append(getDeveloperPassword());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = DeveloperInfo.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			DeveloperInfo.class
		};
	private long _userId;
	private String _userUuid;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private long _groupId;
	private String _screenName;
	private String _firstName;
	private String _emailAddress;
	private String _universityField;
	private String _majorField;
	private String _useStart;
	private String _useEnd;
	private String _developerSort;
	private boolean _languageFortran;
	private boolean _languageCpp;
	private boolean _languagePython;
	private boolean _languageJava;
	private boolean _languageOther;
	private String _languageOtherDescription;
	private String _rem;
	private String _remCurrentLanguageId;
	private boolean _agreementYn;
	private String _writtenOathLogical;
	private String _writtenOathPhysical;
	private String _detailIp;
	private String _detailOs;
	private String _detailCpu;
	private String _detailStorate;
	private String _detailLibrary;
	private long _insertId;
	private Date _insertDate;
	private long _updateId;
	private Date _updateDate;
	private String _etc;
	private String _etcCurrentLanguageId;
	private String _developerId;
	private String _developerPassword;
	private long _columnBitmask;
	private DeveloperInfo _escapedModel;
}
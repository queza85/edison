/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.kisti.edison.science.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import org.kisti.edison.science.model.CommonLib;
import org.kisti.edison.science.model.CommonLibModel;
import org.kisti.edison.science.model.CommonLibSoap;
import org.kisti.edison.science.service.persistence.CommonLibPK;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the CommonLib service. Represents a row in the &quot;EDAPP_CommonLib&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link org.kisti.edison.science.model.CommonLibModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CommonLibImpl}.
 * </p>
 *
 * @author EDISON
 * @see CommonLibImpl
 * @see org.kisti.edison.science.model.CommonLib
 * @see org.kisti.edison.science.model.CommonLibModel
 * @generated
 */
@JSON(strict = true)
public class CommonLibModelImpl extends BaseModelImpl<CommonLib>
	implements CommonLibModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a common lib model instance should use the {@link org.kisti.edison.science.model.CommonLib} interface instead.
	 */
	public static final String TABLE_NAME = "EDAPP_CommonLib";
	public static final Object[][] TABLE_COLUMNS = {
			{ "libName", Types.VARCHAR },
			{ "libPath", Types.VARCHAR },
			{ "libraryVersion", Types.VARCHAR },
			{ "cLibVer", Types.VARCHAR },
			{ "sysArch", Types.VARCHAR },
			{ "kernelVer", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table EDAPP_CommonLib (libName VARCHAR(75) not null,libPath VARCHAR(75) not null,libraryVersion VARCHAR(75) null,cLibVer VARCHAR(75) null,sysArch VARCHAR(75) null,kernelVer VARCHAR(75) null,primary key (libName, libPath))";
	public static final String TABLE_SQL_DROP = "drop table EDAPP_CommonLib";
	public static final String ORDER_BY_JPQL = " ORDER BY commonLib.id.libName ASC, commonLib.id.libPath ASC";
	public static final String ORDER_BY_SQL = " ORDER BY EDAPP_CommonLib.libName ASC, EDAPP_CommonLib.libPath ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.org.kisti.edison.science.model.CommonLib"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.org.kisti.edison.science.model.CommonLib"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.org.kisti.edison.science.model.CommonLib"),
			true);
	public static long LIBNAME_COLUMN_BITMASK = 1L;
	public static long LIBPATH_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static CommonLib toModel(CommonLibSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		CommonLib model = new CommonLibImpl();

		model.setLibName(soapModel.getLibName());
		model.setLibPath(soapModel.getLibPath());
		model.setLibraryVersion(soapModel.getLibraryVersion());
		model.setCLibVer(soapModel.getCLibVer());
		model.setSysArch(soapModel.getSysArch());
		model.setKernelVer(soapModel.getKernelVer());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<CommonLib> toModels(CommonLibSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<CommonLib> models = new ArrayList<CommonLib>(soapModels.length);

		for (CommonLibSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.org.kisti.edison.science.model.CommonLib"));

	public CommonLibModelImpl() {
	}

	@Override
	public CommonLibPK getPrimaryKey() {
		return new CommonLibPK(_libName, _libPath);
	}

	@Override
	public void setPrimaryKey(CommonLibPK primaryKey) {
		setLibName(primaryKey.libName);
		setLibPath(primaryKey.libPath);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return new CommonLibPK(_libName, _libPath);
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((CommonLibPK)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return CommonLib.class;
	}

	@Override
	public String getModelClassName() {
		return CommonLib.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("libName", getLibName());
		attributes.put("libPath", getLibPath());
		attributes.put("libraryVersion", getLibraryVersion());
		attributes.put("cLibVer", getCLibVer());
		attributes.put("sysArch", getSysArch());
		attributes.put("kernelVer", getKernelVer());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String libName = (String)attributes.get("libName");

		if (libName != null) {
			setLibName(libName);
		}

		String libPath = (String)attributes.get("libPath");

		if (libPath != null) {
			setLibPath(libPath);
		}

		String libraryVersion = (String)attributes.get("libraryVersion");

		if (libraryVersion != null) {
			setLibraryVersion(libraryVersion);
		}

		String cLibVer = (String)attributes.get("cLibVer");

		if (cLibVer != null) {
			setCLibVer(cLibVer);
		}

		String sysArch = (String)attributes.get("sysArch");

		if (sysArch != null) {
			setSysArch(sysArch);
		}

		String kernelVer = (String)attributes.get("kernelVer");

		if (kernelVer != null) {
			setKernelVer(kernelVer);
		}
	}

	@JSON
	@Override
	public String getLibName() {
		if (_libName == null) {
			return StringPool.BLANK;
		}
		else {
			return _libName;
		}
	}

	@Override
	public void setLibName(String libName) {
		_columnBitmask |= LIBNAME_COLUMN_BITMASK;

		if (_originalLibName == null) {
			_originalLibName = _libName;
		}

		_libName = libName;
	}

	public String getOriginalLibName() {
		return GetterUtil.getString(_originalLibName);
	}

	@JSON
	@Override
	public String getLibPath() {
		if (_libPath == null) {
			return StringPool.BLANK;
		}
		else {
			return _libPath;
		}
	}

	@Override
	public void setLibPath(String libPath) {
		_libPath = libPath;
	}

	@JSON
	@Override
	public String getLibraryVersion() {
		if (_libraryVersion == null) {
			return StringPool.BLANK;
		}
		else {
			return _libraryVersion;
		}
	}

	@Override
	public void setLibraryVersion(String libraryVersion) {
		_libraryVersion = libraryVersion;
	}

	@JSON
	@Override
	public String getCLibVer() {
		if (_cLibVer == null) {
			return StringPool.BLANK;
		}
		else {
			return _cLibVer;
		}
	}

	@Override
	public void setCLibVer(String cLibVer) {
		_cLibVer = cLibVer;
	}

	@JSON
	@Override
	public String getSysArch() {
		if (_sysArch == null) {
			return StringPool.BLANK;
		}
		else {
			return _sysArch;
		}
	}

	@Override
	public void setSysArch(String sysArch) {
		_sysArch = sysArch;
	}

	@JSON
	@Override
	public String getKernelVer() {
		if (_kernelVer == null) {
			return StringPool.BLANK;
		}
		else {
			return _kernelVer;
		}
	}

	@Override
	public void setKernelVer(String kernelVer) {
		_kernelVer = kernelVer;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public CommonLib toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (CommonLib)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CommonLibImpl commonLibImpl = new CommonLibImpl();

		commonLibImpl.setLibName(getLibName());
		commonLibImpl.setLibPath(getLibPath());
		commonLibImpl.setLibraryVersion(getLibraryVersion());
		commonLibImpl.setCLibVer(getCLibVer());
		commonLibImpl.setSysArch(getSysArch());
		commonLibImpl.setKernelVer(getKernelVer());

		commonLibImpl.resetOriginalValues();

		return commonLibImpl;
	}

	@Override
	public int compareTo(CommonLib commonLib) {
		CommonLibPK primaryKey = commonLib.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof CommonLib)) {
			return false;
		}

		CommonLib commonLib = (CommonLib)obj;

		CommonLibPK primaryKey = commonLib.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public void resetOriginalValues() {
		CommonLibModelImpl commonLibModelImpl = this;

		commonLibModelImpl._originalLibName = commonLibModelImpl._libName;

		commonLibModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<CommonLib> toCacheModel() {
		CommonLibCacheModel commonLibCacheModel = new CommonLibCacheModel();

		commonLibCacheModel.libName = getLibName();

		String libName = commonLibCacheModel.libName;

		if ((libName != null) && (libName.length() == 0)) {
			commonLibCacheModel.libName = null;
		}

		commonLibCacheModel.libPath = getLibPath();

		String libPath = commonLibCacheModel.libPath;

		if ((libPath != null) && (libPath.length() == 0)) {
			commonLibCacheModel.libPath = null;
		}

		commonLibCacheModel.libraryVersion = getLibraryVersion();

		String libraryVersion = commonLibCacheModel.libraryVersion;

		if ((libraryVersion != null) && (libraryVersion.length() == 0)) {
			commonLibCacheModel.libraryVersion = null;
		}

		commonLibCacheModel.cLibVer = getCLibVer();

		String cLibVer = commonLibCacheModel.cLibVer;

		if ((cLibVer != null) && (cLibVer.length() == 0)) {
			commonLibCacheModel.cLibVer = null;
		}

		commonLibCacheModel.sysArch = getSysArch();

		String sysArch = commonLibCacheModel.sysArch;

		if ((sysArch != null) && (sysArch.length() == 0)) {
			commonLibCacheModel.sysArch = null;
		}

		commonLibCacheModel.kernelVer = getKernelVer();

		String kernelVer = commonLibCacheModel.kernelVer;

		if ((kernelVer != null) && (kernelVer.length() == 0)) {
			commonLibCacheModel.kernelVer = null;
		}

		return commonLibCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(13);

		sb.append("{libName=");
		sb.append(getLibName());
		sb.append(", libPath=");
		sb.append(getLibPath());
		sb.append(", libraryVersion=");
		sb.append(getLibraryVersion());
		sb.append(", cLibVer=");
		sb.append(getCLibVer());
		sb.append(", sysArch=");
		sb.append(getSysArch());
		sb.append(", kernelVer=");
		sb.append(getKernelVer());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(22);

		sb.append("<model><model-name>");
		sb.append("org.kisti.edison.science.model.CommonLib");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>libName</column-name><column-value><![CDATA[");
		sb.append(getLibName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>libPath</column-name><column-value><![CDATA[");
		sb.append(getLibPath());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>libraryVersion</column-name><column-value><![CDATA[");
		sb.append(getLibraryVersion());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>cLibVer</column-name><column-value><![CDATA[");
		sb.append(getCLibVer());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sysArch</column-name><column-value><![CDATA[");
		sb.append(getSysArch());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>kernelVer</column-name><column-value><![CDATA[");
		sb.append(getKernelVer());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = CommonLib.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			CommonLib.class
		};
	private String _libName;
	private String _originalLibName;
	private String _libPath;
	private String _libraryVersion;
	private String _cLibVer;
	private String _sysArch;
	private String _kernelVer;
	private long _columnBitmask;
	private CommonLib _escapedModel;
}
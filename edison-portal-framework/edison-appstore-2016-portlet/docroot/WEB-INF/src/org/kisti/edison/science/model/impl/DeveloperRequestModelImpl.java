/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.kisti.edison.science.model.impl;

import com.liferay.portal.LocaleException;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.LocaleUtil;
import com.liferay.portal.kernel.util.LocalizationUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.kernel.util.Validator;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.util.PortalUtil;

import org.kisti.edison.science.model.DeveloperRequest;
import org.kisti.edison.science.model.DeveloperRequestModel;
import org.kisti.edison.science.model.DeveloperRequestSoap;
import org.kisti.edison.science.service.persistence.DeveloperRequestPK;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;

/**
 * The base model implementation for the DeveloperRequest service. Represents a row in the &quot;EDAPP_DeveloperRequest&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link org.kisti.edison.science.model.DeveloperRequestModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DeveloperRequestImpl}.
 * </p>
 *
 * @author EDISON
 * @see DeveloperRequestImpl
 * @see org.kisti.edison.science.model.DeveloperRequest
 * @see org.kisti.edison.science.model.DeveloperRequestModel
 * @generated
 */
@JSON(strict = true)
public class DeveloperRequestModelImpl extends BaseModelImpl<DeveloperRequest>
	implements DeveloperRequestModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a developer request model instance should use the {@link org.kisti.edison.science.model.DeveloperRequest} interface instead.
	 */
	public static final String TABLE_NAME = "EDAPP_DeveloperRequest";
	public static final Object[][] TABLE_COLUMNS = {
			{ "requestSeq", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "requestSort", Types.VARCHAR },
			{ "requestDate", Types.TIMESTAMP },
			{ "requestNote", Types.VARCHAR },
			{ "requestStatus", Types.VARCHAR },
			{ "processDate", Types.TIMESTAMP },
			{ "processNote", Types.VARCHAR },
			{ "insertId", Types.BIGINT },
			{ "insertDate", Types.TIMESTAMP },
			{ "updateId", Types.BIGINT },
			{ "updateDate", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table EDAPP_DeveloperRequest (requestSeq LONG not null,userId LONG not null,groupId LONG not null,requestSort VARCHAR(75) null,requestDate DATE null,requestNote STRING null,requestStatus VARCHAR(75) null,processDate DATE null,processNote STRING null,insertId LONG,insertDate DATE null,updateId LONG,updateDate DATE null,primary key (requestSeq, userId, groupId))";
	public static final String TABLE_SQL_DROP = "drop table EDAPP_DeveloperRequest";
	public static final String ORDER_BY_JPQL = " ORDER BY developerRequest.insertDate DESC";
	public static final String ORDER_BY_SQL = " ORDER BY EDAPP_DeveloperRequest.insertDate DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.org.kisti.edison.science.model.DeveloperRequest"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.org.kisti.edison.science.model.DeveloperRequest"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.org.kisti.edison.science.model.DeveloperRequest"),
			true);
	public static long GROUPID_COLUMN_BITMASK = 1L;
	public static long REQUESTSEQ_COLUMN_BITMASK = 2L;
	public static long USERID_COLUMN_BITMASK = 4L;
	public static long INSERTDATE_COLUMN_BITMASK = 8L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static DeveloperRequest toModel(DeveloperRequestSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		DeveloperRequest model = new DeveloperRequestImpl();

		model.setRequestSeq(soapModel.getRequestSeq());
		model.setUserId(soapModel.getUserId());
		model.setGroupId(soapModel.getGroupId());
		model.setRequestSort(soapModel.getRequestSort());
		model.setRequestDate(soapModel.getRequestDate());
		model.setRequestNote(soapModel.getRequestNote());
		model.setRequestStatus(soapModel.getRequestStatus());
		model.setProcessDate(soapModel.getProcessDate());
		model.setProcessNote(soapModel.getProcessNote());
		model.setInsertId(soapModel.getInsertId());
		model.setInsertDate(soapModel.getInsertDate());
		model.setUpdateId(soapModel.getUpdateId());
		model.setUpdateDate(soapModel.getUpdateDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<DeveloperRequest> toModels(
		DeveloperRequestSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<DeveloperRequest> models = new ArrayList<DeveloperRequest>(soapModels.length);

		for (DeveloperRequestSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.org.kisti.edison.science.model.DeveloperRequest"));

	public DeveloperRequestModelImpl() {
	}

	@Override
	public DeveloperRequestPK getPrimaryKey() {
		return new DeveloperRequestPK(_requestSeq, _userId, _groupId);
	}

	@Override
	public void setPrimaryKey(DeveloperRequestPK primaryKey) {
		setRequestSeq(primaryKey.requestSeq);
		setUserId(primaryKey.userId);
		setGroupId(primaryKey.groupId);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return new DeveloperRequestPK(_requestSeq, _userId, _groupId);
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((DeveloperRequestPK)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return DeveloperRequest.class;
	}

	@Override
	public String getModelClassName() {
		return DeveloperRequest.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("requestSeq", getRequestSeq());
		attributes.put("userId", getUserId());
		attributes.put("groupId", getGroupId());
		attributes.put("requestSort", getRequestSort());
		attributes.put("requestDate", getRequestDate());
		attributes.put("requestNote", getRequestNote());
		attributes.put("requestStatus", getRequestStatus());
		attributes.put("processDate", getProcessDate());
		attributes.put("processNote", getProcessNote());
		attributes.put("insertId", getInsertId());
		attributes.put("insertDate", getInsertDate());
		attributes.put("updateId", getUpdateId());
		attributes.put("updateDate", getUpdateDate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long requestSeq = (Long)attributes.get("requestSeq");

		if (requestSeq != null) {
			setRequestSeq(requestSeq);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		String requestSort = (String)attributes.get("requestSort");

		if (requestSort != null) {
			setRequestSort(requestSort);
		}

		Date requestDate = (Date)attributes.get("requestDate");

		if (requestDate != null) {
			setRequestDate(requestDate);
		}

		String requestNote = (String)attributes.get("requestNote");

		if (requestNote != null) {
			setRequestNote(requestNote);
		}

		String requestStatus = (String)attributes.get("requestStatus");

		if (requestStatus != null) {
			setRequestStatus(requestStatus);
		}

		Date processDate = (Date)attributes.get("processDate");

		if (processDate != null) {
			setProcessDate(processDate);
		}

		String processNote = (String)attributes.get("processNote");

		if (processNote != null) {
			setProcessNote(processNote);
		}

		Long insertId = (Long)attributes.get("insertId");

		if (insertId != null) {
			setInsertId(insertId);
		}

		Date insertDate = (Date)attributes.get("insertDate");

		if (insertDate != null) {
			setInsertDate(insertDate);
		}

		Long updateId = (Long)attributes.get("updateId");

		if (updateId != null) {
			setUpdateId(updateId);
		}

		Date updateDate = (Date)attributes.get("updateDate");

		if (updateDate != null) {
			setUpdateDate(updateDate);
		}
	}

	@JSON
	@Override
	public long getRequestSeq() {
		return _requestSeq;
	}

	@Override
	public void setRequestSeq(long requestSeq) {
		_columnBitmask |= REQUESTSEQ_COLUMN_BITMASK;

		if (!_setOriginalRequestSeq) {
			_setOriginalRequestSeq = true;

			_originalRequestSeq = _requestSeq;
		}

		_requestSeq = requestSeq;
	}

	public long getOriginalRequestSeq() {
		return _originalRequestSeq;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public String getRequestSort() {
		if (_requestSort == null) {
			return StringPool.BLANK;
		}
		else {
			return _requestSort;
		}
	}

	@Override
	public void setRequestSort(String requestSort) {
		_requestSort = requestSort;
	}

	@JSON
	@Override
	public Date getRequestDate() {
		return _requestDate;
	}

	@Override
	public void setRequestDate(Date requestDate) {
		_requestDate = requestDate;
	}

	@JSON
	@Override
	public String getRequestNote() {
		if (_requestNote == null) {
			return StringPool.BLANK;
		}
		else {
			return _requestNote;
		}
	}

	@Override
	public String getRequestNote(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getRequestNote(languageId);
	}

	@Override
	public String getRequestNote(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getRequestNote(languageId, useDefault);
	}

	@Override
	public String getRequestNote(String languageId) {
		return LocalizationUtil.getLocalization(getRequestNote(), languageId);
	}

	@Override
	public String getRequestNote(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(getRequestNote(), languageId,
			useDefault);
	}

	@Override
	public String getRequestNoteCurrentLanguageId() {
		return _requestNoteCurrentLanguageId;
	}

	@JSON
	@Override
	public String getRequestNoteCurrentValue() {
		Locale locale = getLocale(_requestNoteCurrentLanguageId);

		return getRequestNote(locale);
	}

	@Override
	public Map<Locale, String> getRequestNoteMap() {
		return LocalizationUtil.getLocalizationMap(getRequestNote());
	}

	@Override
	public void setRequestNote(String requestNote) {
		_requestNote = requestNote;
	}

	@Override
	public void setRequestNote(String requestNote, Locale locale) {
		setRequestNote(requestNote, locale, LocaleUtil.getDefault());
	}

	@Override
	public void setRequestNote(String requestNote, Locale locale,
		Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(requestNote)) {
			setRequestNote(LocalizationUtil.updateLocalization(
					getRequestNote(), "RequestNote", requestNote, languageId,
					defaultLanguageId));
		}
		else {
			setRequestNote(LocalizationUtil.removeLocalization(
					getRequestNote(), "RequestNote", languageId));
		}
	}

	@Override
	public void setRequestNoteCurrentLanguageId(String languageId) {
		_requestNoteCurrentLanguageId = languageId;
	}

	@Override
	public void setRequestNoteMap(Map<Locale, String> requestNoteMap) {
		setRequestNoteMap(requestNoteMap, LocaleUtil.getDefault());
	}

	@Override
	public void setRequestNoteMap(Map<Locale, String> requestNoteMap,
		Locale defaultLocale) {
		if (requestNoteMap == null) {
			return;
		}

		setRequestNote(LocalizationUtil.updateLocalization(requestNoteMap,
				getRequestNote(), "RequestNote",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getRequestStatus() {
		if (_requestStatus == null) {
			return StringPool.BLANK;
		}
		else {
			return _requestStatus;
		}
	}

	@Override
	public void setRequestStatus(String requestStatus) {
		_requestStatus = requestStatus;
	}

	@JSON
	@Override
	public Date getProcessDate() {
		return _processDate;
	}

	@Override
	public void setProcessDate(Date processDate) {
		_processDate = processDate;
	}

	@JSON
	@Override
	public String getProcessNote() {
		if (_processNote == null) {
			return StringPool.BLANK;
		}
		else {
			return _processNote;
		}
	}

	@Override
	public String getProcessNote(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getProcessNote(languageId);
	}

	@Override
	public String getProcessNote(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getProcessNote(languageId, useDefault);
	}

	@Override
	public String getProcessNote(String languageId) {
		return LocalizationUtil.getLocalization(getProcessNote(), languageId);
	}

	@Override
	public String getProcessNote(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(getProcessNote(), languageId,
			useDefault);
	}

	@Override
	public String getProcessNoteCurrentLanguageId() {
		return _processNoteCurrentLanguageId;
	}

	@JSON
	@Override
	public String getProcessNoteCurrentValue() {
		Locale locale = getLocale(_processNoteCurrentLanguageId);

		return getProcessNote(locale);
	}

	@Override
	public Map<Locale, String> getProcessNoteMap() {
		return LocalizationUtil.getLocalizationMap(getProcessNote());
	}

	@Override
	public void setProcessNote(String processNote) {
		_processNote = processNote;
	}

	@Override
	public void setProcessNote(String processNote, Locale locale) {
		setProcessNote(processNote, locale, LocaleUtil.getDefault());
	}

	@Override
	public void setProcessNote(String processNote, Locale locale,
		Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(processNote)) {
			setProcessNote(LocalizationUtil.updateLocalization(
					getProcessNote(), "ProcessNote", processNote, languageId,
					defaultLanguageId));
		}
		else {
			setProcessNote(LocalizationUtil.removeLocalization(
					getProcessNote(), "ProcessNote", languageId));
		}
	}

	@Override
	public void setProcessNoteCurrentLanguageId(String languageId) {
		_processNoteCurrentLanguageId = languageId;
	}

	@Override
	public void setProcessNoteMap(Map<Locale, String> processNoteMap) {
		setProcessNoteMap(processNoteMap, LocaleUtil.getDefault());
	}

	@Override
	public void setProcessNoteMap(Map<Locale, String> processNoteMap,
		Locale defaultLocale) {
		if (processNoteMap == null) {
			return;
		}

		setProcessNote(LocalizationUtil.updateLocalization(processNoteMap,
				getProcessNote(), "ProcessNote",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public long getInsertId() {
		return _insertId;
	}

	@Override
	public void setInsertId(long insertId) {
		_insertId = insertId;
	}

	@JSON
	@Override
	public Date getInsertDate() {
		return _insertDate;
	}

	@Override
	public void setInsertDate(Date insertDate) {
		_columnBitmask = -1L;

		_insertDate = insertDate;
	}

	@JSON
	@Override
	public long getUpdateId() {
		return _updateId;
	}

	@Override
	public void setUpdateId(long updateId) {
		_updateId = updateId;
	}

	@JSON
	@Override
	public Date getUpdateDate() {
		return _updateDate;
	}

	@Override
	public void setUpdateDate(Date updateDate) {
		_updateDate = updateDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public String[] getAvailableLanguageIds() {
		Set<String> availableLanguageIds = new TreeSet<String>();

		Map<Locale, String> requestNoteMap = getRequestNoteMap();

		for (Map.Entry<Locale, String> entry : requestNoteMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> processNoteMap = getProcessNoteMap();

		for (Map.Entry<Locale, String> entry : processNoteMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		return availableLanguageIds.toArray(new String[availableLanguageIds.size()]);
	}

	@Override
	public String getDefaultLanguageId() {
		String xml = getRequestNote();

		if (xml == null) {
			return StringPool.BLANK;
		}

		Locale defaultLocale = LocaleUtil.getDefault();

		return LocalizationUtil.getDefaultLanguageId(xml, defaultLocale);
	}

	@Override
	public void prepareLocalizedFieldsForImport() throws LocaleException {
		prepareLocalizedFieldsForImport(null);
	}

	@Override
	@SuppressWarnings("unused")
	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException {
		Locale defaultLocale = LocaleUtil.getDefault();

		String modelDefaultLanguageId = getDefaultLanguageId();

		String requestNote = getRequestNote(defaultLocale);

		if (Validator.isNull(requestNote)) {
			setRequestNote(getRequestNote(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setRequestNote(getRequestNote(defaultLocale), defaultLocale,
				defaultLocale);
		}

		String processNote = getProcessNote(defaultLocale);

		if (Validator.isNull(processNote)) {
			setProcessNote(getProcessNote(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setProcessNote(getProcessNote(defaultLocale), defaultLocale,
				defaultLocale);
		}
	}

	@Override
	public DeveloperRequest toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (DeveloperRequest)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		DeveloperRequestImpl developerRequestImpl = new DeveloperRequestImpl();

		developerRequestImpl.setRequestSeq(getRequestSeq());
		developerRequestImpl.setUserId(getUserId());
		developerRequestImpl.setGroupId(getGroupId());
		developerRequestImpl.setRequestSort(getRequestSort());
		developerRequestImpl.setRequestDate(getRequestDate());
		developerRequestImpl.setRequestNote(getRequestNote());
		developerRequestImpl.setRequestStatus(getRequestStatus());
		developerRequestImpl.setProcessDate(getProcessDate());
		developerRequestImpl.setProcessNote(getProcessNote());
		developerRequestImpl.setInsertId(getInsertId());
		developerRequestImpl.setInsertDate(getInsertDate());
		developerRequestImpl.setUpdateId(getUpdateId());
		developerRequestImpl.setUpdateDate(getUpdateDate());

		developerRequestImpl.resetOriginalValues();

		return developerRequestImpl;
	}

	@Override
	public int compareTo(DeveloperRequest developerRequest) {
		int value = 0;

		value = DateUtil.compareTo(getInsertDate(),
				developerRequest.getInsertDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof DeveloperRequest)) {
			return false;
		}

		DeveloperRequest developerRequest = (DeveloperRequest)obj;

		DeveloperRequestPK primaryKey = developerRequest.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public void resetOriginalValues() {
		DeveloperRequestModelImpl developerRequestModelImpl = this;

		developerRequestModelImpl._originalRequestSeq = developerRequestModelImpl._requestSeq;

		developerRequestModelImpl._setOriginalRequestSeq = false;

		developerRequestModelImpl._originalUserId = developerRequestModelImpl._userId;

		developerRequestModelImpl._setOriginalUserId = false;

		developerRequestModelImpl._originalGroupId = developerRequestModelImpl._groupId;

		developerRequestModelImpl._setOriginalGroupId = false;

		developerRequestModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<DeveloperRequest> toCacheModel() {
		DeveloperRequestCacheModel developerRequestCacheModel = new DeveloperRequestCacheModel();

		developerRequestCacheModel.requestSeq = getRequestSeq();

		developerRequestCacheModel.userId = getUserId();

		developerRequestCacheModel.groupId = getGroupId();

		developerRequestCacheModel.requestSort = getRequestSort();

		String requestSort = developerRequestCacheModel.requestSort;

		if ((requestSort != null) && (requestSort.length() == 0)) {
			developerRequestCacheModel.requestSort = null;
		}

		Date requestDate = getRequestDate();

		if (requestDate != null) {
			developerRequestCacheModel.requestDate = requestDate.getTime();
		}
		else {
			developerRequestCacheModel.requestDate = Long.MIN_VALUE;
		}

		developerRequestCacheModel.requestNote = getRequestNote();

		String requestNote = developerRequestCacheModel.requestNote;

		if ((requestNote != null) && (requestNote.length() == 0)) {
			developerRequestCacheModel.requestNote = null;
		}

		developerRequestCacheModel.requestStatus = getRequestStatus();

		String requestStatus = developerRequestCacheModel.requestStatus;

		if ((requestStatus != null) && (requestStatus.length() == 0)) {
			developerRequestCacheModel.requestStatus = null;
		}

		Date processDate = getProcessDate();

		if (processDate != null) {
			developerRequestCacheModel.processDate = processDate.getTime();
		}
		else {
			developerRequestCacheModel.processDate = Long.MIN_VALUE;
		}

		developerRequestCacheModel.processNote = getProcessNote();

		String processNote = developerRequestCacheModel.processNote;

		if ((processNote != null) && (processNote.length() == 0)) {
			developerRequestCacheModel.processNote = null;
		}

		developerRequestCacheModel.insertId = getInsertId();

		Date insertDate = getInsertDate();

		if (insertDate != null) {
			developerRequestCacheModel.insertDate = insertDate.getTime();
		}
		else {
			developerRequestCacheModel.insertDate = Long.MIN_VALUE;
		}

		developerRequestCacheModel.updateId = getUpdateId();

		Date updateDate = getUpdateDate();

		if (updateDate != null) {
			developerRequestCacheModel.updateDate = updateDate.getTime();
		}
		else {
			developerRequestCacheModel.updateDate = Long.MIN_VALUE;
		}

		return developerRequestCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(27);

		sb.append("{requestSeq=");
		sb.append(getRequestSeq());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", requestSort=");
		sb.append(getRequestSort());
		sb.append(", requestDate=");
		sb.append(getRequestDate());
		sb.append(", requestNote=");
		sb.append(getRequestNote());
		sb.append(", requestStatus=");
		sb.append(getRequestStatus());
		sb.append(", processDate=");
		sb.append(getProcessDate());
		sb.append(", processNote=");
		sb.append(getProcessNote());
		sb.append(", insertId=");
		sb.append(getInsertId());
		sb.append(", insertDate=");
		sb.append(getInsertDate());
		sb.append(", updateId=");
		sb.append(getUpdateId());
		sb.append(", updateDate=");
		sb.append(getUpdateDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(43);

		sb.append("<model><model-name>");
		sb.append("org.kisti.edison.science.model.DeveloperRequest");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>requestSeq</column-name><column-value><![CDATA[");
		sb.append(getRequestSeq());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>requestSort</column-name><column-value><![CDATA[");
		sb.append(getRequestSort());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>requestDate</column-name><column-value><![CDATA[");
		sb.append(getRequestDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>requestNote</column-name><column-value><![CDATA[");
		sb.append(getRequestNote());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>requestStatus</column-name><column-value><![CDATA[");
		sb.append(getRequestStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>processDate</column-name><column-value><![CDATA[");
		sb.append(getProcessDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>processNote</column-name><column-value><![CDATA[");
		sb.append(getProcessNote());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>insertId</column-name><column-value><![CDATA[");
		sb.append(getInsertId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>insertDate</column-name><column-value><![CDATA[");
		sb.append(getInsertDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>updateId</column-name><column-value><![CDATA[");
		sb.append(getUpdateId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>updateDate</column-name><column-value><![CDATA[");
		sb.append(getUpdateDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = DeveloperRequest.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			DeveloperRequest.class
		};
	private long _requestSeq;
	private long _originalRequestSeq;
	private boolean _setOriginalRequestSeq;
	private long _userId;
	private String _userUuid;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private String _requestSort;
	private Date _requestDate;
	private String _requestNote;
	private String _requestNoteCurrentLanguageId;
	private String _requestStatus;
	private Date _processDate;
	private String _processNote;
	private String _processNoteCurrentLanguageId;
	private long _insertId;
	private Date _insertDate;
	private long _updateId;
	private Date _updateDate;
	private long _columnBitmask;
	private DeveloperRequest _escapedModel;
}
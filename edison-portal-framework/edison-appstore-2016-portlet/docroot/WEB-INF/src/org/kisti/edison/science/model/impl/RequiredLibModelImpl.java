/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.kisti.edison.science.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import org.kisti.edison.science.model.RequiredLib;
import org.kisti.edison.science.model.RequiredLibModel;
import org.kisti.edison.science.model.RequiredLibSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the RequiredLib service. Represents a row in the &quot;EDAPP_RequiredLib&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link org.kisti.edison.science.model.RequiredLibModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link RequiredLibImpl}.
 * </p>
 *
 * @author EDISON
 * @see RequiredLibImpl
 * @see org.kisti.edison.science.model.RequiredLib
 * @see org.kisti.edison.science.model.RequiredLibModel
 * @generated
 */
@JSON(strict = true)
public class RequiredLibModelImpl extends BaseModelImpl<RequiredLib>
	implements RequiredLibModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a required lib model instance should use the {@link org.kisti.edison.science.model.RequiredLib} interface instead.
	 */
	public static final String TABLE_NAME = "EDAPP_RequiredLib";
	public static final Object[][] TABLE_COLUMNS = {
			{ "requiredLibId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "libraryName", Types.VARCHAR },
			{ "libraryVersion", Types.VARCHAR },
			{ "libraryType", Types.VARCHAR },
			{ "librarySrcPath", Types.VARCHAR },
			{ "installScript", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table EDAPP_RequiredLib (requiredLibId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,createDate DATE null,modifiedDate DATE null,libraryName VARCHAR(256) null,libraryVersion VARCHAR(75) null,libraryType VARCHAR(75) null,librarySrcPath VARCHAR(75) null,installScript TEXT null)";
	public static final String TABLE_SQL_DROP = "drop table EDAPP_RequiredLib";
	public static final String ORDER_BY_JPQL = " ORDER BY requiredLib.requiredLibId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY EDAPP_RequiredLib.requiredLibId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.org.kisti.edison.science.model.RequiredLib"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.org.kisti.edison.science.model.RequiredLib"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static RequiredLib toModel(RequiredLibSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		RequiredLib model = new RequiredLibImpl();

		model.setRequiredLibId(soapModel.getRequiredLibId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setLibraryName(soapModel.getLibraryName());
		model.setLibraryVersion(soapModel.getLibraryVersion());
		model.setLibraryType(soapModel.getLibraryType());
		model.setLibrarySrcPath(soapModel.getLibrarySrcPath());
		model.setInstallScript(soapModel.getInstallScript());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<RequiredLib> toModels(RequiredLibSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<RequiredLib> models = new ArrayList<RequiredLib>(soapModels.length);

		for (RequiredLibSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.org.kisti.edison.science.model.RequiredLib"));

	public RequiredLibModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _requiredLibId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setRequiredLibId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _requiredLibId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return RequiredLib.class;
	}

	@Override
	public String getModelClassName() {
		return RequiredLib.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("requiredLibId", getRequiredLibId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("libraryName", getLibraryName());
		attributes.put("libraryVersion", getLibraryVersion());
		attributes.put("libraryType", getLibraryType());
		attributes.put("librarySrcPath", getLibrarySrcPath());
		attributes.put("installScript", getInstallScript());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long requiredLibId = (Long)attributes.get("requiredLibId");

		if (requiredLibId != null) {
			setRequiredLibId(requiredLibId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String libraryName = (String)attributes.get("libraryName");

		if (libraryName != null) {
			setLibraryName(libraryName);
		}

		String libraryVersion = (String)attributes.get("libraryVersion");

		if (libraryVersion != null) {
			setLibraryVersion(libraryVersion);
		}

		String libraryType = (String)attributes.get("libraryType");

		if (libraryType != null) {
			setLibraryType(libraryType);
		}

		String librarySrcPath = (String)attributes.get("librarySrcPath");

		if (librarySrcPath != null) {
			setLibrarySrcPath(librarySrcPath);
		}

		String installScript = (String)attributes.get("installScript");

		if (installScript != null) {
			setInstallScript(installScript);
		}
	}

	@JSON
	@Override
	public long getRequiredLibId() {
		return _requiredLibId;
	}

	@Override
	public void setRequiredLibId(long requiredLibId) {
		_requiredLibId = requiredLibId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getLibraryName() {
		if (_libraryName == null) {
			return StringPool.BLANK;
		}
		else {
			return _libraryName;
		}
	}

	@Override
	public void setLibraryName(String libraryName) {
		_libraryName = libraryName;
	}

	@JSON
	@Override
	public String getLibraryVersion() {
		if (_libraryVersion == null) {
			return StringPool.BLANK;
		}
		else {
			return _libraryVersion;
		}
	}

	@Override
	public void setLibraryVersion(String libraryVersion) {
		_libraryVersion = libraryVersion;
	}

	@JSON
	@Override
	public String getLibraryType() {
		if (_libraryType == null) {
			return StringPool.BLANK;
		}
		else {
			return _libraryType;
		}
	}

	@Override
	public void setLibraryType(String libraryType) {
		_libraryType = libraryType;
	}

	@JSON
	@Override
	public String getLibrarySrcPath() {
		if (_librarySrcPath == null) {
			return StringPool.BLANK;
		}
		else {
			return _librarySrcPath;
		}
	}

	@Override
	public void setLibrarySrcPath(String librarySrcPath) {
		_librarySrcPath = librarySrcPath;
	}

	@JSON
	@Override
	public String getInstallScript() {
		if (_installScript == null) {
			return StringPool.BLANK;
		}
		else {
			return _installScript;
		}
	}

	@Override
	public void setInstallScript(String installScript) {
		_installScript = installScript;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			RequiredLib.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public RequiredLib toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (RequiredLib)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		RequiredLibImpl requiredLibImpl = new RequiredLibImpl();

		requiredLibImpl.setRequiredLibId(getRequiredLibId());
		requiredLibImpl.setGroupId(getGroupId());
		requiredLibImpl.setCompanyId(getCompanyId());
		requiredLibImpl.setUserId(getUserId());
		requiredLibImpl.setCreateDate(getCreateDate());
		requiredLibImpl.setModifiedDate(getModifiedDate());
		requiredLibImpl.setLibraryName(getLibraryName());
		requiredLibImpl.setLibraryVersion(getLibraryVersion());
		requiredLibImpl.setLibraryType(getLibraryType());
		requiredLibImpl.setLibrarySrcPath(getLibrarySrcPath());
		requiredLibImpl.setInstallScript(getInstallScript());

		requiredLibImpl.resetOriginalValues();

		return requiredLibImpl;
	}

	@Override
	public int compareTo(RequiredLib requiredLib) {
		long primaryKey = requiredLib.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof RequiredLib)) {
			return false;
		}

		RequiredLib requiredLib = (RequiredLib)obj;

		long primaryKey = requiredLib.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<RequiredLib> toCacheModel() {
		RequiredLibCacheModel requiredLibCacheModel = new RequiredLibCacheModel();

		requiredLibCacheModel.requiredLibId = getRequiredLibId();

		requiredLibCacheModel.groupId = getGroupId();

		requiredLibCacheModel.companyId = getCompanyId();

		requiredLibCacheModel.userId = getUserId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			requiredLibCacheModel.createDate = createDate.getTime();
		}
		else {
			requiredLibCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			requiredLibCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			requiredLibCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		requiredLibCacheModel.libraryName = getLibraryName();

		String libraryName = requiredLibCacheModel.libraryName;

		if ((libraryName != null) && (libraryName.length() == 0)) {
			requiredLibCacheModel.libraryName = null;
		}

		requiredLibCacheModel.libraryVersion = getLibraryVersion();

		String libraryVersion = requiredLibCacheModel.libraryVersion;

		if ((libraryVersion != null) && (libraryVersion.length() == 0)) {
			requiredLibCacheModel.libraryVersion = null;
		}

		requiredLibCacheModel.libraryType = getLibraryType();

		String libraryType = requiredLibCacheModel.libraryType;

		if ((libraryType != null) && (libraryType.length() == 0)) {
			requiredLibCacheModel.libraryType = null;
		}

		requiredLibCacheModel.librarySrcPath = getLibrarySrcPath();

		String librarySrcPath = requiredLibCacheModel.librarySrcPath;

		if ((librarySrcPath != null) && (librarySrcPath.length() == 0)) {
			requiredLibCacheModel.librarySrcPath = null;
		}

		requiredLibCacheModel.installScript = getInstallScript();

		String installScript = requiredLibCacheModel.installScript;

		if ((installScript != null) && (installScript.length() == 0)) {
			requiredLibCacheModel.installScript = null;
		}

		return requiredLibCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(23);

		sb.append("{requiredLibId=");
		sb.append(getRequiredLibId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", libraryName=");
		sb.append(getLibraryName());
		sb.append(", libraryVersion=");
		sb.append(getLibraryVersion());
		sb.append(", libraryType=");
		sb.append(getLibraryType());
		sb.append(", librarySrcPath=");
		sb.append(getLibrarySrcPath());
		sb.append(", installScript=");
		sb.append(getInstallScript());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(37);

		sb.append("<model><model-name>");
		sb.append("org.kisti.edison.science.model.RequiredLib");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>requiredLibId</column-name><column-value><![CDATA[");
		sb.append(getRequiredLibId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>libraryName</column-name><column-value><![CDATA[");
		sb.append(getLibraryName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>libraryVersion</column-name><column-value><![CDATA[");
		sb.append(getLibraryVersion());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>libraryType</column-name><column-value><![CDATA[");
		sb.append(getLibraryType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>librarySrcPath</column-name><column-value><![CDATA[");
		sb.append(getLibrarySrcPath());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>installScript</column-name><column-value><![CDATA[");
		sb.append(getInstallScript());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = RequiredLib.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			RequiredLib.class
		};
	private long _requiredLibId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userUuid;
	private Date _createDate;
	private Date _modifiedDate;
	private String _libraryName;
	private String _libraryVersion;
	private String _libraryType;
	private String _librarySrcPath;
	private String _installScript;
	private RequiredLib _escapedModel;
}
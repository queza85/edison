/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.kisti.edison.science.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.util.PortalUtil;

import org.kisti.edison.science.model.ScienceAppFavorite;
import org.kisti.edison.science.model.ScienceAppFavoriteModel;
import org.kisti.edison.science.model.ScienceAppFavoriteSoap;
import org.kisti.edison.science.service.persistence.ScienceAppFavoritePK;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the ScienceAppFavorite service. Represents a row in the &quot;EDAPP_ScienceAppFavorite&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link org.kisti.edison.science.model.ScienceAppFavoriteModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ScienceAppFavoriteImpl}.
 * </p>
 *
 * @author EDISON
 * @see ScienceAppFavoriteImpl
 * @see org.kisti.edison.science.model.ScienceAppFavorite
 * @see org.kisti.edison.science.model.ScienceAppFavoriteModel
 * @generated
 */
@JSON(strict = true)
public class ScienceAppFavoriteModelImpl extends BaseModelImpl<ScienceAppFavorite>
	implements ScienceAppFavoriteModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a science app favorite model instance should use the {@link org.kisti.edison.science.model.ScienceAppFavorite} interface instead.
	 */
	public static final String TABLE_NAME = "EDAPP_ScienceAppFavorite";
	public static final Object[][] TABLE_COLUMNS = {
			{ "scienceAppId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "groupId", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table EDAPP_ScienceAppFavorite (scienceAppId LONG not null,userId LONG not null,groupId LONG,primary key (scienceAppId, userId))";
	public static final String TABLE_SQL_DROP = "drop table EDAPP_ScienceAppFavorite";
	public static final String ORDER_BY_JPQL = " ORDER BY scienceAppFavorite.id.scienceAppId ASC, scienceAppFavorite.id.userId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY EDAPP_ScienceAppFavorite.scienceAppId ASC, EDAPP_ScienceAppFavorite.userId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.org.kisti.edison.science.model.ScienceAppFavorite"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.org.kisti.edison.science.model.ScienceAppFavorite"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.org.kisti.edison.science.model.ScienceAppFavorite"),
			true);
	public static long SCIENCEAPPID_COLUMN_BITMASK = 1L;
	public static long USERID_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static ScienceAppFavorite toModel(ScienceAppFavoriteSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		ScienceAppFavorite model = new ScienceAppFavoriteImpl();

		model.setScienceAppId(soapModel.getScienceAppId());
		model.setUserId(soapModel.getUserId());
		model.setGroupId(soapModel.getGroupId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<ScienceAppFavorite> toModels(
		ScienceAppFavoriteSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<ScienceAppFavorite> models = new ArrayList<ScienceAppFavorite>(soapModels.length);

		for (ScienceAppFavoriteSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.org.kisti.edison.science.model.ScienceAppFavorite"));

	public ScienceAppFavoriteModelImpl() {
	}

	@Override
	public ScienceAppFavoritePK getPrimaryKey() {
		return new ScienceAppFavoritePK(_scienceAppId, _userId);
	}

	@Override
	public void setPrimaryKey(ScienceAppFavoritePK primaryKey) {
		setScienceAppId(primaryKey.scienceAppId);
		setUserId(primaryKey.userId);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return new ScienceAppFavoritePK(_scienceAppId, _userId);
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((ScienceAppFavoritePK)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return ScienceAppFavorite.class;
	}

	@Override
	public String getModelClassName() {
		return ScienceAppFavorite.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("scienceAppId", getScienceAppId());
		attributes.put("userId", getUserId());
		attributes.put("groupId", getGroupId());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long scienceAppId = (Long)attributes.get("scienceAppId");

		if (scienceAppId != null) {
			setScienceAppId(scienceAppId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}
	}

	@JSON
	@Override
	public long getScienceAppId() {
		return _scienceAppId;
	}

	@Override
	public void setScienceAppId(long scienceAppId) {
		_columnBitmask |= SCIENCEAPPID_COLUMN_BITMASK;

		if (!_setOriginalScienceAppId) {
			_setOriginalScienceAppId = true;

			_originalScienceAppId = _scienceAppId;
		}

		_scienceAppId = scienceAppId;
	}

	public long getOriginalScienceAppId() {
		return _originalScienceAppId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ScienceAppFavorite toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ScienceAppFavorite)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ScienceAppFavoriteImpl scienceAppFavoriteImpl = new ScienceAppFavoriteImpl();

		scienceAppFavoriteImpl.setScienceAppId(getScienceAppId());
		scienceAppFavoriteImpl.setUserId(getUserId());
		scienceAppFavoriteImpl.setGroupId(getGroupId());

		scienceAppFavoriteImpl.resetOriginalValues();

		return scienceAppFavoriteImpl;
	}

	@Override
	public int compareTo(ScienceAppFavorite scienceAppFavorite) {
		ScienceAppFavoritePK primaryKey = scienceAppFavorite.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ScienceAppFavorite)) {
			return false;
		}

		ScienceAppFavorite scienceAppFavorite = (ScienceAppFavorite)obj;

		ScienceAppFavoritePK primaryKey = scienceAppFavorite.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public void resetOriginalValues() {
		ScienceAppFavoriteModelImpl scienceAppFavoriteModelImpl = this;

		scienceAppFavoriteModelImpl._originalScienceAppId = scienceAppFavoriteModelImpl._scienceAppId;

		scienceAppFavoriteModelImpl._setOriginalScienceAppId = false;

		scienceAppFavoriteModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<ScienceAppFavorite> toCacheModel() {
		ScienceAppFavoriteCacheModel scienceAppFavoriteCacheModel = new ScienceAppFavoriteCacheModel();

		scienceAppFavoriteCacheModel.scienceAppId = getScienceAppId();

		scienceAppFavoriteCacheModel.userId = getUserId();

		scienceAppFavoriteCacheModel.groupId = getGroupId();

		return scienceAppFavoriteCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(7);

		sb.append("{scienceAppId=");
		sb.append(getScienceAppId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(13);

		sb.append("<model><model-name>");
		sb.append("org.kisti.edison.science.model.ScienceAppFavorite");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>scienceAppId</column-name><column-value><![CDATA[");
		sb.append(getScienceAppId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = ScienceAppFavorite.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			ScienceAppFavorite.class
		};
	private long _scienceAppId;
	private long _originalScienceAppId;
	private boolean _setOriginalScienceAppId;
	private long _userId;
	private String _userUuid;
	private long _groupId;
	private long _columnBitmask;
	private ScienceAppFavorite _escapedModel;
}
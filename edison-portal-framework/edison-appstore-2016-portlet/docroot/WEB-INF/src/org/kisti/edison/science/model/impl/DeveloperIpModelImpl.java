/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.kisti.edison.science.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.util.PortalUtil;

import org.kisti.edison.science.model.DeveloperIp;
import org.kisti.edison.science.model.DeveloperIpModel;
import org.kisti.edison.science.model.DeveloperIpSoap;
import org.kisti.edison.science.service.persistence.DeveloperIpPK;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the DeveloperIp service. Represents a row in the &quot;EDAPP_DeveloperIp&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link org.kisti.edison.science.model.DeveloperIpModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DeveloperIpImpl}.
 * </p>
 *
 * @author EDISON
 * @see DeveloperIpImpl
 * @see org.kisti.edison.science.model.DeveloperIp
 * @see org.kisti.edison.science.model.DeveloperIpModel
 * @generated
 */
@JSON(strict = true)
public class DeveloperIpModelImpl extends BaseModelImpl<DeveloperIp>
	implements DeveloperIpModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a developer ip model instance should use the {@link org.kisti.edison.science.model.DeveloperIp} interface instead.
	 */
	public static final String TABLE_NAME = "EDAPP_DeveloperIp";
	public static final Object[][] TABLE_COLUMNS = {
			{ "ipSeq", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "ip1", Types.VARCHAR },
			{ "ip2", Types.VARCHAR },
			{ "ip3", Types.VARCHAR },
			{ "ip4", Types.VARCHAR },
			{ "insertId", Types.BIGINT },
			{ "insertDate", Types.TIMESTAMP },
			{ "updateId", Types.BIGINT },
			{ "updateDate", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table EDAPP_DeveloperIp (ipSeq LONG not null,userId LONG not null,groupId LONG not null,ip1 VARCHAR(75) null,ip2 VARCHAR(75) null,ip3 VARCHAR(75) null,ip4 VARCHAR(75) null,insertId LONG,insertDate DATE null,updateId LONG,updateDate DATE null,primary key (ipSeq, userId, groupId))";
	public static final String TABLE_SQL_DROP = "drop table EDAPP_DeveloperIp";
	public static final String ORDER_BY_JPQL = " ORDER BY developerIp.id.ipSeq ASC";
	public static final String ORDER_BY_SQL = " ORDER BY EDAPP_DeveloperIp.ipSeq ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.org.kisti.edison.science.model.DeveloperIp"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.org.kisti.edison.science.model.DeveloperIp"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.org.kisti.edison.science.model.DeveloperIp"),
			true);
	public static long GROUPID_COLUMN_BITMASK = 1L;
	public static long USERID_COLUMN_BITMASK = 2L;
	public static long IPSEQ_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static DeveloperIp toModel(DeveloperIpSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		DeveloperIp model = new DeveloperIpImpl();

		model.setIpSeq(soapModel.getIpSeq());
		model.setUserId(soapModel.getUserId());
		model.setGroupId(soapModel.getGroupId());
		model.setIp1(soapModel.getIp1());
		model.setIp2(soapModel.getIp2());
		model.setIp3(soapModel.getIp3());
		model.setIp4(soapModel.getIp4());
		model.setInsertId(soapModel.getInsertId());
		model.setInsertDate(soapModel.getInsertDate());
		model.setUpdateId(soapModel.getUpdateId());
		model.setUpdateDate(soapModel.getUpdateDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<DeveloperIp> toModels(DeveloperIpSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<DeveloperIp> models = new ArrayList<DeveloperIp>(soapModels.length);

		for (DeveloperIpSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.org.kisti.edison.science.model.DeveloperIp"));

	public DeveloperIpModelImpl() {
	}

	@Override
	public DeveloperIpPK getPrimaryKey() {
		return new DeveloperIpPK(_ipSeq, _userId, _groupId);
	}

	@Override
	public void setPrimaryKey(DeveloperIpPK primaryKey) {
		setIpSeq(primaryKey.ipSeq);
		setUserId(primaryKey.userId);
		setGroupId(primaryKey.groupId);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return new DeveloperIpPK(_ipSeq, _userId, _groupId);
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((DeveloperIpPK)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return DeveloperIp.class;
	}

	@Override
	public String getModelClassName() {
		return DeveloperIp.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("ipSeq", getIpSeq());
		attributes.put("userId", getUserId());
		attributes.put("groupId", getGroupId());
		attributes.put("ip1", getIp1());
		attributes.put("ip2", getIp2());
		attributes.put("ip3", getIp3());
		attributes.put("ip4", getIp4());
		attributes.put("insertId", getInsertId());
		attributes.put("insertDate", getInsertDate());
		attributes.put("updateId", getUpdateId());
		attributes.put("updateDate", getUpdateDate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long ipSeq = (Long)attributes.get("ipSeq");

		if (ipSeq != null) {
			setIpSeq(ipSeq);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		String ip1 = (String)attributes.get("ip1");

		if (ip1 != null) {
			setIp1(ip1);
		}

		String ip2 = (String)attributes.get("ip2");

		if (ip2 != null) {
			setIp2(ip2);
		}

		String ip3 = (String)attributes.get("ip3");

		if (ip3 != null) {
			setIp3(ip3);
		}

		String ip4 = (String)attributes.get("ip4");

		if (ip4 != null) {
			setIp4(ip4);
		}

		Long insertId = (Long)attributes.get("insertId");

		if (insertId != null) {
			setInsertId(insertId);
		}

		Date insertDate = (Date)attributes.get("insertDate");

		if (insertDate != null) {
			setInsertDate(insertDate);
		}

		Long updateId = (Long)attributes.get("updateId");

		if (updateId != null) {
			setUpdateId(updateId);
		}

		Date updateDate = (Date)attributes.get("updateDate");

		if (updateDate != null) {
			setUpdateDate(updateDate);
		}
	}

	@JSON
	@Override
	public long getIpSeq() {
		return _ipSeq;
	}

	@Override
	public void setIpSeq(long ipSeq) {
		_columnBitmask = -1L;

		_ipSeq = ipSeq;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public String getIp1() {
		if (_ip1 == null) {
			return StringPool.BLANK;
		}
		else {
			return _ip1;
		}
	}

	@Override
	public void setIp1(String ip1) {
		_ip1 = ip1;
	}

	@JSON
	@Override
	public String getIp2() {
		if (_ip2 == null) {
			return StringPool.BLANK;
		}
		else {
			return _ip2;
		}
	}

	@Override
	public void setIp2(String ip2) {
		_ip2 = ip2;
	}

	@JSON
	@Override
	public String getIp3() {
		if (_ip3 == null) {
			return StringPool.BLANK;
		}
		else {
			return _ip3;
		}
	}

	@Override
	public void setIp3(String ip3) {
		_ip3 = ip3;
	}

	@JSON
	@Override
	public String getIp4() {
		if (_ip4 == null) {
			return StringPool.BLANK;
		}
		else {
			return _ip4;
		}
	}

	@Override
	public void setIp4(String ip4) {
		_ip4 = ip4;
	}

	@JSON
	@Override
	public long getInsertId() {
		return _insertId;
	}

	@Override
	public void setInsertId(long insertId) {
		_insertId = insertId;
	}

	@JSON
	@Override
	public Date getInsertDate() {
		return _insertDate;
	}

	@Override
	public void setInsertDate(Date insertDate) {
		_insertDate = insertDate;
	}

	@JSON
	@Override
	public long getUpdateId() {
		return _updateId;
	}

	@Override
	public void setUpdateId(long updateId) {
		_updateId = updateId;
	}

	@JSON
	@Override
	public Date getUpdateDate() {
		return _updateDate;
	}

	@Override
	public void setUpdateDate(Date updateDate) {
		_updateDate = updateDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public DeveloperIp toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (DeveloperIp)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		DeveloperIpImpl developerIpImpl = new DeveloperIpImpl();

		developerIpImpl.setIpSeq(getIpSeq());
		developerIpImpl.setUserId(getUserId());
		developerIpImpl.setGroupId(getGroupId());
		developerIpImpl.setIp1(getIp1());
		developerIpImpl.setIp2(getIp2());
		developerIpImpl.setIp3(getIp3());
		developerIpImpl.setIp4(getIp4());
		developerIpImpl.setInsertId(getInsertId());
		developerIpImpl.setInsertDate(getInsertDate());
		developerIpImpl.setUpdateId(getUpdateId());
		developerIpImpl.setUpdateDate(getUpdateDate());

		developerIpImpl.resetOriginalValues();

		return developerIpImpl;
	}

	@Override
	public int compareTo(DeveloperIp developerIp) {
		int value = 0;

		if (getIpSeq() < developerIp.getIpSeq()) {
			value = -1;
		}
		else if (getIpSeq() > developerIp.getIpSeq()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof DeveloperIp)) {
			return false;
		}

		DeveloperIp developerIp = (DeveloperIp)obj;

		DeveloperIpPK primaryKey = developerIp.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public void resetOriginalValues() {
		DeveloperIpModelImpl developerIpModelImpl = this;

		developerIpModelImpl._originalUserId = developerIpModelImpl._userId;

		developerIpModelImpl._setOriginalUserId = false;

		developerIpModelImpl._originalGroupId = developerIpModelImpl._groupId;

		developerIpModelImpl._setOriginalGroupId = false;

		developerIpModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<DeveloperIp> toCacheModel() {
		DeveloperIpCacheModel developerIpCacheModel = new DeveloperIpCacheModel();

		developerIpCacheModel.ipSeq = getIpSeq();

		developerIpCacheModel.userId = getUserId();

		developerIpCacheModel.groupId = getGroupId();

		developerIpCacheModel.ip1 = getIp1();

		String ip1 = developerIpCacheModel.ip1;

		if ((ip1 != null) && (ip1.length() == 0)) {
			developerIpCacheModel.ip1 = null;
		}

		developerIpCacheModel.ip2 = getIp2();

		String ip2 = developerIpCacheModel.ip2;

		if ((ip2 != null) && (ip2.length() == 0)) {
			developerIpCacheModel.ip2 = null;
		}

		developerIpCacheModel.ip3 = getIp3();

		String ip3 = developerIpCacheModel.ip3;

		if ((ip3 != null) && (ip3.length() == 0)) {
			developerIpCacheModel.ip3 = null;
		}

		developerIpCacheModel.ip4 = getIp4();

		String ip4 = developerIpCacheModel.ip4;

		if ((ip4 != null) && (ip4.length() == 0)) {
			developerIpCacheModel.ip4 = null;
		}

		developerIpCacheModel.insertId = getInsertId();

		Date insertDate = getInsertDate();

		if (insertDate != null) {
			developerIpCacheModel.insertDate = insertDate.getTime();
		}
		else {
			developerIpCacheModel.insertDate = Long.MIN_VALUE;
		}

		developerIpCacheModel.updateId = getUpdateId();

		Date updateDate = getUpdateDate();

		if (updateDate != null) {
			developerIpCacheModel.updateDate = updateDate.getTime();
		}
		else {
			developerIpCacheModel.updateDate = Long.MIN_VALUE;
		}

		return developerIpCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(23);

		sb.append("{ipSeq=");
		sb.append(getIpSeq());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", ip1=");
		sb.append(getIp1());
		sb.append(", ip2=");
		sb.append(getIp2());
		sb.append(", ip3=");
		sb.append(getIp3());
		sb.append(", ip4=");
		sb.append(getIp4());
		sb.append(", insertId=");
		sb.append(getInsertId());
		sb.append(", insertDate=");
		sb.append(getInsertDate());
		sb.append(", updateId=");
		sb.append(getUpdateId());
		sb.append(", updateDate=");
		sb.append(getUpdateDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(37);

		sb.append("<model><model-name>");
		sb.append("org.kisti.edison.science.model.DeveloperIp");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>ipSeq</column-name><column-value><![CDATA[");
		sb.append(getIpSeq());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ip1</column-name><column-value><![CDATA[");
		sb.append(getIp1());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ip2</column-name><column-value><![CDATA[");
		sb.append(getIp2());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ip3</column-name><column-value><![CDATA[");
		sb.append(getIp3());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ip4</column-name><column-value><![CDATA[");
		sb.append(getIp4());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>insertId</column-name><column-value><![CDATA[");
		sb.append(getInsertId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>insertDate</column-name><column-value><![CDATA[");
		sb.append(getInsertDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>updateId</column-name><column-value><![CDATA[");
		sb.append(getUpdateId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>updateDate</column-name><column-value><![CDATA[");
		sb.append(getUpdateDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = DeveloperIp.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			DeveloperIp.class
		};
	private long _ipSeq;
	private long _userId;
	private String _userUuid;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private String _ip1;
	private String _ip2;
	private String _ip3;
	private String _ip4;
	private long _insertId;
	private Date _insertDate;
	private long _updateId;
	private Date _updateDate;
	private long _columnBitmask;
	private DeveloperIp _escapedModel;
}